// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: ddBSeZgqRjx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Input from "antd/lib/input"; // plasmic-import: tO9wrxr8Nbb/codeComponent

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicContactForm.module.css"; // plasmic-import: ddBSeZgqRjx/css

export type PlasmicContactForm__VariantMembers = {};

export type PlasmicContactForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicContactForm__VariantsArgs;
export const PlasmicContactForm__VariantProps = new Array<VariantPropType>();

export type PlasmicContactForm__ArgsType = {};
type ArgPropType = keyof PlasmicContactForm__ArgsType;
export const PlasmicContactForm__ArgProps = new Array<ArgPropType>();

export type PlasmicContactForm__OverridesType = {
  root?: p.Flex<"div">;
  firstNameInput?: p.Flex<typeof Input>;
  lastNameInput?: p.Flex<typeof Input>;
  emailInput?: p.Flex<typeof Input>;
  phoneInput?: p.Flex<typeof Input>;
  messageInput?: p.Flex<typeof Input>;
  btn?: p.Flex<"div">;
};

export interface DefaultContactFormProps {
  className?: string;
}

export const defaultContactForm__Args: Partial<PlasmicContactForm__ArgsType> =
  {};

function PlasmicContactForm__RenderFunc(props: {
  variants: PlasmicContactForm__VariantsArgs;
  args: PlasmicContactForm__ArgsType;
  overrides: PlasmicContactForm__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultContactForm__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__t1EZ9)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xNDyA)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lXb1Q
                  )}
                >
                  {"First name"}
                </div>

                <Input
                  data-plasmic-name={"firstNameInput"}
                  data-plasmic-override={overrides.firstNameInput}
                  className={classNames("__wab_instance", sty.firstNameInput)}
                  defaultValue={"" as const}
                  id={"first-name" as const}
                  placeholder={"Your First Name" as const}
                  type={"" as const}
                />
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v5Wp)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q2FT
                  )}
                >
                  {"Last name"}
                </div>

                <Input
                  data-plasmic-name={"lastNameInput"}
                  data-plasmic-override={overrides.lastNameInput}
                  className={classNames("__wab_instance", sty.lastNameInput)}
                  defaultValue={"" as const}
                  id={"last-name" as const}
                  placeholder={"Your Last Name" as const}
                  type={"" as const}
                />
              </p.Stack>
            ) : null}
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fmvjL)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uitpo
              )}
            >
              {"Email"}
            </div>

            <Input
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput)}
              defaultValue={"" as const}
              id={"email-add" as const}
              placeholder={"Your  Email address" as const}
              type={"" as const}
            />
          </p.Stack>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__iuu1S)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nC9XK
              )}
            >
              {"Contact"}
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gmA3W)}
              >
                <Input
                  data-plasmic-name={"phoneInput"}
                  data-plasmic-override={overrides.phoneInput}
                  className={classNames("__wab_instance", sty.phoneInput)}
                  defaultValue={"" as const}
                  id={"phone" as const}
                  placeholder={"Your Contact Number" as const}
                  type={"" as const}
                />
              </p.Stack>
            ) : null}
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ebDqm)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__meNjk
              )}
            >
              {"Message"}
            </div>

            <Input
              data-plasmic-name={"messageInput"}
              data-plasmic-override={overrides.messageInput}
              className={classNames("__wab_instance", sty.messageInput)}
              defaultValue={"" as const}
              id={"message-text" as const}
              placeholder={"let us know what you want to convey" as const}
              type={"" as const}
            />
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"btn"}
          data-plasmic-override={overrides.btn}
          hasGap={true}
          className={classNames(projectcss.all, sty.btn)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oz1Qo
            )}
          >
            {"Send Message"}
          </div>
        </p.Stack>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "firstNameInput",
    "lastNameInput",
    "emailInput",
    "phoneInput",
    "messageInput",
    "btn"
  ],
  firstNameInput: ["firstNameInput"],
  lastNameInput: ["lastNameInput"],
  emailInput: ["emailInput"],
  phoneInput: ["phoneInput"],
  messageInput: ["messageInput"],
  btn: ["btn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  firstNameInput: typeof Input;
  lastNameInput: typeof Input;
  emailInput: typeof Input;
  phoneInput: typeof Input;
  messageInput: typeof Input;
  btn: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContactForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContactForm__VariantsArgs;
    args?: PlasmicContactForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContactForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContactForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContactForm__ArgProps,
      internalVariantPropNames: PlasmicContactForm__VariantProps
    });

    return PlasmicContactForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactForm";
  } else {
    func.displayName = `PlasmicContactForm.${nodeName}`;
  }
  return func;
}

export const PlasmicContactForm = Object.assign(
  // Top-level PlasmicContactForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    emailInput: makeNodeComponent("emailInput"),
    phoneInput: makeNodeComponent("phoneInput"),
    messageInput: makeNodeComponent("messageInput"),
    btn: makeNodeComponent("btn"),

    // Metadata about props expected for PlasmicContactForm
    internalVariantProps: PlasmicContactForm__VariantProps,
    internalArgProps: PlasmicContactForm__ArgProps
  }
);

export default PlasmicContactForm;
/* prettier-ignore-end */
