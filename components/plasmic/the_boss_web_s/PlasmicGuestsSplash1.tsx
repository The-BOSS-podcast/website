// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: RKCey6GcNr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicGuestsSplash1.module.css"; // plasmic-import: RKCey6GcNr/css

export type PlasmicGuestsSplash1__VariantMembers = {};

export type PlasmicGuestsSplash1__VariantsArgs = {};
type VariantPropType = keyof PlasmicGuestsSplash1__VariantsArgs;
export const PlasmicGuestsSplash1__VariantProps = new Array<VariantPropType>();

export type PlasmicGuestsSplash1__ArgsType = {};
type ArgPropType = keyof PlasmicGuestsSplash1__ArgsType;
export const PlasmicGuestsSplash1__ArgProps = new Array<ArgPropType>();

export type PlasmicGuestsSplash1__OverridesType = {
  root?: p.Flex<"div">;
  btnCtaPrimary12?: p.Flex<"div">;
};

export interface DefaultGuestsSplash1Props {
  className?: string;
}

export const defaultGuestsSplash1__Args: Partial<PlasmicGuestsSplash1__ArgsType> =
  {};

function PlasmicGuestsSplash1__RenderFunc(props: {
  variants: PlasmicGuestsSplash1__VariantsArgs;
  args: PlasmicGuestsSplash1__ArgsType;
  overrides: PlasmicGuestsSplash1__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultGuestsSplash1__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__yiNqg)}>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__luPxV)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___27OTd)}
                displayHeight={"112px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"112px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/_1Jpeg.jpeg",
                  fullWidth: 964,
                  fullHeight: 640,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__dyc)}
                displayHeight={"128px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"128px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/nidhiPantjpeg.jpeg",
                  fullWidth: 800,
                  fullHeight: 800,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nvJF)}
                displayHeight={"88px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"88px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/amanpreetBnW2Jpg.jpeg",
                  fullWidth: 1280,
                  fullHeight: 720,
                  aspectRatio: undefined
                }}
              />
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bzNbk)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Lgj6
                )}
              >
                {"Meet our Guests"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xQa4P
                )}
              >
                {
                  "Meet some of the most amazing entrepreneurial minds, experience their journey \nand learn about their business mindset through our podcast."
                }
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"btnCtaPrimary12"}
                data-plasmic-override={overrides.btnCtaPrimary12}
                hasGap={true}
                className={classNames(projectcss.all, sty.btnCtaPrimary12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4GYof
                  )}
                >
                  {"Go to Podcast"}
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xa82)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__jqjs5)}
                displayHeight={"120px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"120px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/bharatSethi2Jpg.jpeg",
                  fullWidth: 1200,
                  fullHeight: 706,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__hs3WZ)}
                displayHeight={"96px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"96px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/img154259Satnikroyjpg.jpeg",
                  fullWidth: 800,
                  fullHeight: 600,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__h4QeU)}
                displayHeight={"112px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"112px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/_1603088607MrLalChandBisujpeg.jpeg",
                  fullWidth: 300,
                  fullHeight: 300,
                  aspectRatio: undefined
                }}
              />
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "btnCtaPrimary12"],
  btnCtaPrimary12: ["btnCtaPrimary12"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  btnCtaPrimary12: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGuestsSplash1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGuestsSplash1__VariantsArgs;
    args?: PlasmicGuestsSplash1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGuestsSplash1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGuestsSplash1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGuestsSplash1__ArgProps,
      internalVariantPropNames: PlasmicGuestsSplash1__VariantProps
    });

    return PlasmicGuestsSplash1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGuestsSplash1";
  } else {
    func.displayName = `PlasmicGuestsSplash1.${nodeName}`;
  }
  return func;
}

export const PlasmicGuestsSplash1 = Object.assign(
  // Top-level PlasmicGuestsSplash1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    btnCtaPrimary12: makeNodeComponent("btnCtaPrimary12"),

    // Metadata about props expected for PlasmicGuestsSplash1
    internalVariantProps: PlasmicGuestsSplash1__VariantProps,
    internalArgProps: PlasmicGuestsSplash1__ArgProps
  }
);

export default PlasmicGuestsSplash1;
/* prettier-ignore-end */
