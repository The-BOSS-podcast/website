// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 9bHIml3gZD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarRes from "../../NavBarRes"; // plasmic-import: hi-mET-ngC/component
import FooterComDesk from "../../FooterComDesk"; // plasmic-import: H9tCPDoO68/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicPodcast.module.css"; // plasmic-import: 9bHIml3gZD/css

import Group7Icon from "./icons/PlasmicIcon__Group7"; // plasmic-import: AiziDyWYriU/icon
import Group8Icon from "./icons/PlasmicIcon__Group8"; // plasmic-import: TKRBI8johrl/icon
import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: 43qaydEIItB/icon
import Group10Icon from "./icons/PlasmicIcon__Group10"; // plasmic-import: al1lxnr7Jpi/icon
import ListenonIcon from "./icons/PlasmicIcon__Listenon"; // plasmic-import: 9qHkQyObq/icon
import Fill23Icon from "./icons/PlasmicIcon__Fill23"; // plasmic-import: n4y-VnBnydf/icon
import GlyphIcon from "./icons/PlasmicIcon__Glyph"; // plasmic-import: c2XJFCFE23j/icon
import Group29Icon from "./icons/PlasmicIcon__Group29"; // plasmic-import: pjTvNts4WGv/icon

export type PlasmicPodcast__VariantMembers = {};

export type PlasmicPodcast__VariantsArgs = {};
type VariantPropType = keyof PlasmicPodcast__VariantsArgs;
export const PlasmicPodcast__VariantProps = new Array<VariantPropType>();

export type PlasmicPodcast__ArgsType = {};
type ArgPropType = keyof PlasmicPodcast__ArgsType;
export const PlasmicPodcast__ArgProps = new Array<ArgPropType>();

export type PlasmicPodcast__OverridesType = {
  root?: p.Flex<"div">;
  navBarRes?: p.Flex<typeof NavBarRes>;
  ourPodcast?: p.Flex<"div">;
  text?: p.Flex<"div">;
  frame293?: p.Flex<"div">;
  frame290?: p.Flex<"div">;
  applePodcastsListenBadgeRgb?: p.Flex<"a"> & Partial<LinkProps>;
  us?: p.Flex<"div">;
  xmlid632?: p.Flex<"div">;
  xmlid648?: p.Flex<"div">;
  enGooglePodcastsBadge?: p.Flex<"a"> & Partial<LinkProps>;
  enGooglePodcastsBadge2?: p.Flex<"div">;
  podcastIconFinal?: p.Flex<"div">;
  spotifyPodcastBadgeBlkGrn330X80?: p.Flex<"a"> & Partial<LinkProps>;
  spotifyPodcastBadgeBlkGrn330X802?: p.Flex<"div">;
  frame291?: p.Flex<"div">;
  frame289?: p.Flex<"a"> & Partial<LinkProps>;
  hubhopper09?: p.Flex<"div">;
  jioSaavn?: p.Flex<"a"> & Partial<LinkProps>;
  ganna?: p.Flex<"a"> & Partial<LinkProps>;
  frame292?: p.Flex<"div">;
  redRoundelBlackTextHorizontal?: p.Flex<"a"> & Partial<LinkProps>;
  lockupsRedRoundelBlackTextHorizontal?: p.Flex<"div">;
  lockupsRedRoundelBlackTextHorizontal2?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  pocketCastsRoundelRed?: p.Flex<"div">;
  group3?: p.Flex<"div">;
  frame287?: p.Flex<"a"> & Partial<LinkProps>;
  deezerLogo?: p.Flex<"div">;
  stitcherListenBadgeColorDarkBg?: p.Flex<"a"> & Partial<LinkProps>;
  frame294?: p.Flex<"div">;
  frame288?: p.Flex<"a"> & Partial<LinkProps>;
  overcast2?: p.Flex<"div">;
  frame296?: p.Flex<"a"> & Partial<LinkProps>;
  kukuFm2?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  footerComDesk?: p.Flex<typeof FooterComDesk>;
};

export interface DefaultPodcastProps {}

function PlasmicPodcast__RenderFunc(props: {
  variants: PlasmicPodcast__VariantsArgs;
  args: PlasmicPodcast__ArgsType;
  overrides: PlasmicPodcast__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Our podcast"}</title>
        <meta key="og:title" property="og:title" content={"Our podcast"} />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Our podcast"}
        />
        <meta
          key="description"
          name="description"
          content={"Listen to our podcast on multiple streaming platforms."}
        />
        <meta
          key="og:description"
          property="og:description"
          content={"Listen to our podcast on multiple streaming platforms."}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={"Listen to our podcast on multiple streaming platforms."}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBarRes
            data-plasmic-name={"navBarRes"}
            data-plasmic-override={overrides.navBarRes}
            className={classNames("__wab_instance", sty.navBarRes)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"ourPodcast"}
              data-plasmic-override={overrides.ourPodcast}
              className={classNames(projectcss.all, sty.ourPodcast)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___1MlN4)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"our podcast"}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__znP4Z)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame293"}
                    data-plasmic-override={overrides.frame293}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame293)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame290"}
                      data-plasmic-override={overrides.frame290}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame290)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__hnKdF
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"applePodcastsListenBadgeRgb"}
                          data-plasmic-override={
                            overrides.applePodcastsListenBadgeRgb
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.applePodcastsListenBadgeRgb
                          )}
                          component={Link}
                          href={
                            "https://podcasts.apple.com/in/podcast/the-balls-of-steel-show/id1516257319" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"us"}
                            data-plasmic-override={overrides.us}
                            className={classNames(projectcss.all, sty.us)}
                          >
                            <div
                              data-plasmic-name={"xmlid632"}
                              data-plasmic-override={overrides.xmlid632}
                              className={classNames(
                                projectcss.all,
                                sty.xmlid632
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__uQgFc)}
                                displayHeight={"31px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"31px" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/the_boss_web_s/images/xmlid662.svg",
                                  fullWidth: 31,
                                  fullHeight: 31,
                                  aspectRatio: 1
                                }}
                              />

                              <div
                                data-plasmic-name={"xmlid648"}
                                data-plasmic-override={overrides.xmlid648}
                                className={classNames(
                                  projectcss.all,
                                  sty.xmlid648
                                )}
                              >
                                <Group7Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dpcM
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>

                            <Group8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7VzRi
                              )}
                              role={"img"}
                            />

                            <Group9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zSqSa
                              )}
                              role={"img"}
                            />
                          </div>
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__kwMrx
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"enGooglePodcastsBadge"}
                          data-plasmic-override={
                            overrides.enGooglePodcastsBadge
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.enGooglePodcastsBadge
                          )}
                          component={Link}
                          href={
                            "https://www.google.com/podcasts?feed=aHR0cHM6Ly9mZWVkcy5zaW1wbGVjYXN0LmNvbS9KX0J4bXNLOQ==" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"enGooglePodcastsBadge2"}
                            data-plasmic-override={
                              overrides.enGooglePodcastsBadge2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.enGooglePodcastsBadge2
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__ll3Qy)}
                              displayHeight={"47.292px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"188.766px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/the_boss_web_s/images/rectangleSolid.svg",
                                fullWidth: 188.766,
                                fullHeight: 47.292,
                                aspectRatio: 3.897959
                              }}
                            />

                            <div
                              data-plasmic-name={"podcastIconFinal"}
                              data-plasmic-override={overrides.podcastIconFinal}
                              className={classNames(
                                projectcss.all,
                                sty.podcastIconFinal
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__mUvK4)}
                                displayHeight={"34.105px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"34.105px" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/the_boss_web_s/images/logoPodcasts192Px.svg",
                                  fullWidth: 34.105,
                                  fullHeight: 34.105,
                                  aspectRatio: 1
                                }}
                              />
                            </div>

                            <Group10Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__icPyx
                              )}
                              role={"img"}
                            />

                            <ListenonIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7XE2C
                              )}
                              role={"img"}
                            />
                          </div>
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__gNoi7
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"spotifyPodcastBadgeBlkGrn330X80"}
                          data-plasmic-override={
                            overrides.spotifyPodcastBadgeBlkGrn330X80
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.spotifyPodcastBadgeBlkGrn330X80
                          )}
                          component={Link}
                          href={
                            "https://open.spotify.com/show/7MW2tGgECOZC3h4zqgBJK9" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={
                              "spotifyPodcastBadgeBlkGrn330X802"
                            }
                            data-plasmic-override={
                              overrides.spotifyPodcastBadgeBlkGrn330X802
                            }
                            className={classNames(
                              projectcss.all,
                              sty.spotifyPodcastBadgeBlkGrn330X802
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__frxPs)}
                              displayHeight={"47.399px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"197.4px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/the_boss_web_s/images/group22.svg",
                                fullWidth: 197.4,
                                fullHeight: 47.399,
                                aspectRatio: 4.125
                              }}
                            />
                          </div>
                        </p.PlasmicLink>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame291"}
                      data-plasmic-override={overrides.frame291}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame291)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column__jD8W)}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"frame289"}
                          data-plasmic-override={overrides.frame289}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.frame289
                          )}
                          component={Link}
                          href={
                            "https://hubhopper.com/podcast/the-balls-of-steel-show/313364" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"hubhopper09"}
                            data-plasmic-override={overrides.hubhopper09}
                            className={classNames(
                              projectcss.all,
                              sty.hubhopper09
                            )}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___5MBn
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"jioSaavn"}
                          data-plasmic-override={overrides.jioSaavn}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.jioSaavn
                          )}
                          component={Link}
                          href={
                            "https://www.jiosaavn.com/shows/the-balls-of-steel-show/1/AKG5SE0I7,s_" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___9Plwn
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"ganna"}
                          data-plasmic-override={overrides.ganna}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.ganna
                          )}
                          component={Link}
                          href={
                            "https://gaana.com/season/the-balls-of-steel--season-1" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        />
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame292"}
                      data-plasmic-override={overrides.frame292}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame292)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___6XxvH
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"redRoundelBlackTextHorizontal"}
                          data-plasmic-override={
                            overrides.redRoundelBlackTextHorizontal
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.redRoundelBlackTextHorizontal
                          )}
                          component={Link}
                          href={"https://pca.st/vxcpjk62" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={
                              "lockupsRedRoundelBlackTextHorizontal"
                            }
                            data-plasmic-override={
                              overrides.lockupsRedRoundelBlackTextHorizontal
                            }
                            className={classNames(
                              projectcss.all,
                              sty.lockupsRedRoundelBlackTextHorizontal
                            )}
                          >
                            <div
                              data-plasmic-name={
                                "lockupsRedRoundelBlackTextHorizontal2"
                              }
                              data-plasmic-override={
                                overrides.lockupsRedRoundelBlackTextHorizontal2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lockupsRedRoundelBlackTextHorizontal2
                              )}
                            >
                              <div
                                data-plasmic-name={"group2"}
                                data-plasmic-override={overrides.group2}
                                className={classNames(
                                  projectcss.all,
                                  sty.group2
                                )}
                              >
                                <div
                                  data-plasmic-name={"pocketCastsRoundelRed"}
                                  data-plasmic-override={
                                    overrides.pocketCastsRoundelRed
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.pocketCastsRoundelRed
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"group3"}
                                    data-plasmic-override={overrides.group3}
                                    className={classNames(
                                      projectcss.all,
                                      sty.group3
                                    )}
                                  >
                                    <Fill23Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ob6To
                                      )}
                                      role={"img"}
                                    />

                                    <GlyphIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__cGJf3
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>

                                <Group29Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__yMb9O
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          </div>
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__bcFDr
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"frame287"}
                          data-plasmic-override={overrides.frame287}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.frame287
                          )}
                          component={Link}
                          href={"https://deezer.com/show/1636602" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"deezerLogo"}
                            data-plasmic-override={overrides.deezerLogo}
                            className={classNames(
                              projectcss.all,
                              sty.deezerLogo
                            )}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___4YHxd
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"stitcherListenBadgeColorDarkBg"}
                          data-plasmic-override={
                            overrides.stitcherListenBadgeColorDarkBg
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.stitcherListenBadgeColorDarkBg
                          )}
                          component={Link}
                          href={
                            "https://www.stitcher.com/podcast/the-balls-of-steel-show" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        />
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame294"}
                      data-plasmic-override={overrides.frame294}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame294)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__nsfNj
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"frame288"}
                          data-plasmic-override={overrides.frame288}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.frame288
                          )}
                          component={Link}
                          href={
                            "https://overcast.fm/itunes1516257319/the-balls-of-steel-show" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"overcast2"}
                            data-plasmic-override={overrides.overcast2}
                            className={classNames(
                              projectcss.all,
                              sty.overcast2
                            )}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xeGLx
                        )}
                      >
                        <p.PlasmicLink
                          data-plasmic-name={"frame296"}
                          data-plasmic-override={overrides.frame296}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.frame296
                          )}
                          component={Link}
                          href={
                            "https://kuku.page.link/?apn=com.vlv.aravali&link=http://kukufm.com/show/the-balls-of-steel-show-1/?utm_source=share_ch&lang=english" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"kukuFm2"}
                            data-plasmic-override={overrides.kukuFm2}
                            className={classNames(projectcss.all, sty.kukuFm2)}
                          />
                        </p.PlasmicLink>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__rhElf
                        )}
                      >
                        {true ? (
                          <p.PlasmicLink
                            data-plasmic-name={"link"}
                            data-plasmic-override={overrides.link}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link
                            )}
                            component={Link}
                            href={
                              "https://www.breaker.audio/the-balls-of-steel-show" as const
                            }
                            platform={"nextjs"}
                            target={"_blank" as const}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__p6OCx)}
                              displayHeight={"47.948px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"220px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/the_boss_web_s/images/listenOnBreakerBlue.svg",
                                fullWidth: 220,
                                fullHeight: 47.948,
                                aspectRatio: 4.583333
                              }}
                            />
                          </p.PlasmicLink>
                        ) : null}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </div>
              ) : null}
            </div>
          ) : null}

          <FooterComDesk
            data-plasmic-name={"footerComDesk"}
            data-plasmic-override={overrides.footerComDesk}
            className={classNames("__wab_instance", sty.footerComDesk)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarRes",
    "ourPodcast",
    "text",
    "frame293",
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802",
    "frame291",
    "frame289",
    "hubhopper09",
    "jioSaavn",
    "ganna",
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "frame287",
    "deezerLogo",
    "stitcherListenBadgeColorDarkBg",
    "frame294",
    "frame288",
    "overcast2",
    "frame296",
    "kukuFm2",
    "link",
    "footerComDesk"
  ],
  navBarRes: ["navBarRes"],
  ourPodcast: [
    "ourPodcast",
    "text",
    "frame293",
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802",
    "frame291",
    "frame289",
    "hubhopper09",
    "jioSaavn",
    "ganna",
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "frame287",
    "deezerLogo",
    "stitcherListenBadgeColorDarkBg",
    "frame294",
    "frame288",
    "overcast2",
    "frame296",
    "kukuFm2",
    "link"
  ],
  text: ["text"],
  frame293: [
    "frame293",
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802",
    "frame291",
    "frame289",
    "hubhopper09",
    "jioSaavn",
    "ganna",
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "frame287",
    "deezerLogo",
    "stitcherListenBadgeColorDarkBg",
    "frame294",
    "frame288",
    "overcast2",
    "frame296",
    "kukuFm2",
    "link"
  ],
  frame290: [
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802"
  ],
  applePodcastsListenBadgeRgb: [
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648"
  ],
  us: ["us", "xmlid632", "xmlid648"],
  xmlid632: ["xmlid632", "xmlid648"],
  xmlid648: ["xmlid648"],
  enGooglePodcastsBadge: [
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal"
  ],
  enGooglePodcastsBadge2: ["enGooglePodcastsBadge2", "podcastIconFinal"],
  podcastIconFinal: ["podcastIconFinal"],
  spotifyPodcastBadgeBlkGrn330X80: [
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802"
  ],
  spotifyPodcastBadgeBlkGrn330X802: ["spotifyPodcastBadgeBlkGrn330X802"],
  frame291: ["frame291", "frame289", "hubhopper09", "jioSaavn", "ganna"],
  frame289: ["frame289", "hubhopper09"],
  hubhopper09: ["hubhopper09"],
  jioSaavn: ["jioSaavn"],
  ganna: ["ganna"],
  frame292: [
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "frame287",
    "deezerLogo",
    "stitcherListenBadgeColorDarkBg"
  ],
  redRoundelBlackTextHorizontal: [
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3"
  ],
  lockupsRedRoundelBlackTextHorizontal: [
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3"
  ],
  lockupsRedRoundelBlackTextHorizontal2: [
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3"
  ],
  group2: ["group2", "pocketCastsRoundelRed", "group3"],
  pocketCastsRoundelRed: ["pocketCastsRoundelRed", "group3"],
  group3: ["group3"],
  frame287: ["frame287", "deezerLogo"],
  deezerLogo: ["deezerLogo"],
  stitcherListenBadgeColorDarkBg: ["stitcherListenBadgeColorDarkBg"],
  frame294: [
    "frame294",
    "frame288",
    "overcast2",
    "frame296",
    "kukuFm2",
    "link"
  ],
  frame288: ["frame288", "overcast2"],
  overcast2: ["overcast2"],
  frame296: ["frame296", "kukuFm2"],
  kukuFm2: ["kukuFm2"],
  link: ["link"],
  footerComDesk: ["footerComDesk"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarRes: typeof NavBarRes;
  ourPodcast: "div";
  text: "div";
  frame293: "div";
  frame290: "div";
  applePodcastsListenBadgeRgb: "a";
  us: "div";
  xmlid632: "div";
  xmlid648: "div";
  enGooglePodcastsBadge: "a";
  enGooglePodcastsBadge2: "div";
  podcastIconFinal: "div";
  spotifyPodcastBadgeBlkGrn330X80: "a";
  spotifyPodcastBadgeBlkGrn330X802: "div";
  frame291: "div";
  frame289: "a";
  hubhopper09: "div";
  jioSaavn: "a";
  ganna: "a";
  frame292: "div";
  redRoundelBlackTextHorizontal: "a";
  lockupsRedRoundelBlackTextHorizontal: "div";
  lockupsRedRoundelBlackTextHorizontal2: "div";
  group2: "div";
  pocketCastsRoundelRed: "div";
  group3: "div";
  frame287: "a";
  deezerLogo: "div";
  stitcherListenBadgeColorDarkBg: "a";
  frame294: "div";
  frame288: "a";
  overcast2: "div";
  frame296: "a";
  kukuFm2: "div";
  link: "a";
  footerComDesk: typeof FooterComDesk;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPodcast__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPodcast__VariantsArgs;
    args?: PlasmicPodcast__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPodcast__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPodcast__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPodcast__ArgProps,
          internalVariantPropNames: PlasmicPodcast__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPodcast__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPodcast";
  } else {
    func.displayName = `PlasmicPodcast.${nodeName}`;
  }
  return func;
}

export const PlasmicPodcast = Object.assign(
  // Top-level PlasmicPodcast renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarRes: makeNodeComponent("navBarRes"),
    ourPodcast: makeNodeComponent("ourPodcast"),
    text: makeNodeComponent("text"),
    frame293: makeNodeComponent("frame293"),
    frame290: makeNodeComponent("frame290"),
    applePodcastsListenBadgeRgb: makeNodeComponent(
      "applePodcastsListenBadgeRgb"
    ),
    us: makeNodeComponent("us"),
    xmlid632: makeNodeComponent("xmlid632"),
    xmlid648: makeNodeComponent("xmlid648"),
    enGooglePodcastsBadge: makeNodeComponent("enGooglePodcastsBadge"),
    enGooglePodcastsBadge2: makeNodeComponent("enGooglePodcastsBadge2"),
    podcastIconFinal: makeNodeComponent("podcastIconFinal"),
    spotifyPodcastBadgeBlkGrn330X80: makeNodeComponent(
      "spotifyPodcastBadgeBlkGrn330X80"
    ),
    spotifyPodcastBadgeBlkGrn330X802: makeNodeComponent(
      "spotifyPodcastBadgeBlkGrn330X802"
    ),
    frame291: makeNodeComponent("frame291"),
    frame289: makeNodeComponent("frame289"),
    hubhopper09: makeNodeComponent("hubhopper09"),
    jioSaavn: makeNodeComponent("jioSaavn"),
    ganna: makeNodeComponent("ganna"),
    frame292: makeNodeComponent("frame292"),
    redRoundelBlackTextHorizontal: makeNodeComponent(
      "redRoundelBlackTextHorizontal"
    ),
    lockupsRedRoundelBlackTextHorizontal: makeNodeComponent(
      "lockupsRedRoundelBlackTextHorizontal"
    ),
    lockupsRedRoundelBlackTextHorizontal2: makeNodeComponent(
      "lockupsRedRoundelBlackTextHorizontal2"
    ),
    group2: makeNodeComponent("group2"),
    pocketCastsRoundelRed: makeNodeComponent("pocketCastsRoundelRed"),
    group3: makeNodeComponent("group3"),
    frame287: makeNodeComponent("frame287"),
    deezerLogo: makeNodeComponent("deezerLogo"),
    stitcherListenBadgeColorDarkBg: makeNodeComponent(
      "stitcherListenBadgeColorDarkBg"
    ),
    frame294: makeNodeComponent("frame294"),
    frame288: makeNodeComponent("frame288"),
    overcast2: makeNodeComponent("overcast2"),
    frame296: makeNodeComponent("frame296"),
    kukuFm2: makeNodeComponent("kukuFm2"),
    link: makeNodeComponent("link"),
    footerComDesk: makeNodeComponent("footerComDesk"),

    // Metadata about props expected for PlasmicPodcast
    internalVariantProps: PlasmicPodcast__VariantProps,
    internalArgProps: PlasmicPodcast__ArgProps
  }
);

export default PlasmicPodcast;
/* prettier-ignore-end */
