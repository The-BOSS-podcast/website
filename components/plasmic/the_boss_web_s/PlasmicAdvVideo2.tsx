// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: BQyn0S0v37a
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicAdvVideo2.module.css"; // plasmic-import: BQyn0S0v37a/css

import PlayArrowIcon from "./icons/PlasmicIcon__PlayArrow"; // plasmic-import: Th2-FWCfLs/icon

export type PlasmicAdvVideo2__VariantMembers = {};

export type PlasmicAdvVideo2__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdvVideo2__VariantsArgs;
export const PlasmicAdvVideo2__VariantProps = new Array<VariantPropType>();

export type PlasmicAdvVideo2__ArgsType = {};
type ArgPropType = keyof PlasmicAdvVideo2__ArgsType;
export const PlasmicAdvVideo2__ArgProps = new Array<ArgPropType>();

export type PlasmicAdvVideo2__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  columns?: p.Flex<"div">;
  videoBoss?: p.Flex<"div">;
  rectangle34?: p.Flex<"div">;
  rectangle35?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  group8?: p.Flex<"div">;
  frame280?: p.Flex<"div">;
  btn4?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultAdvVideo2Props {
  className?: string;
}

export const defaultAdvVideo2__Args: Partial<PlasmicAdvVideo2__ArgsType> = {};

function PlasmicAdvVideo2__RenderFunc(props: {
  variants: PlasmicAdvVideo2__VariantsArgs;
  args: PlasmicAdvVideo2__ArgsType;
  overrides: PlasmicAdvVideo2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAdvVideo2__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vCbV
          )}
        >
          {"Whatâ€™s Podcast Advertising?"}
        </div>
      </SectionHeading>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__xQec)}>
            <div
              data-plasmic-name={"videoBoss"}
              data-plasmic-override={overrides.videoBoss}
              className={classNames(projectcss.all, sty.videoBoss)}
            >
              <div
                data-plasmic-name={"rectangle34"}
                data-plasmic-override={overrides.rectangle34}
                className={classNames(projectcss.all, sty.rectangle34)}
              />

              <div
                data-plasmic-name={"rectangle35"}
                data-plasmic-override={overrides.rectangle35}
                className={classNames(projectcss.all, sty.rectangle35)}
              />

              <div
                data-plasmic-name={"frame2"}
                data-plasmic-override={overrides.frame2}
                className={classNames(projectcss.all, sty.frame2)}
              >
                <PlayArrowIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__gyMun)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"group8"}
              data-plasmic-override={overrides.group8}
              hasGap={true}
              className={classNames(projectcss.all, sty.group8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ydmrr
                )}
              >
                {"PODCAST ADVERTISING"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__adeW7
                )}
              >
                {
                  "Podcast Advertising Leads to Podcast Monetization, Learn With Us"
                }
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xaz1L
                )}
              >
                {
                  "In the rapidly evolving podcast industry, podcast advertisements have become an interest to explore for brands. Podcast advertising is when a brand promotes itself on different podcasts to maximize their reach. This helps podcasters to monetize their podcast and create amazing content consistently."
                }
              </div>

              <div
                data-plasmic-name={"frame280"}
                data-plasmic-override={overrides.frame280}
                className={classNames(projectcss.all, sty.frame280)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"btn4"}
                  data-plasmic-override={overrides.btn4}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.btn4)}
                  component={Link}
                  href={
                    "https://www.calendar.com/the-balls-of-steel-show/" as const
                  }
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jUEp
                    )}
                  >
                    {"Free Consultation Call"}
                  </div>
                </p.Stack>
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "columns",
    "videoBoss",
    "rectangle34",
    "rectangle35",
    "frame2",
    "svg",
    "group8",
    "frame280",
    "btn4"
  ],
  sectionHeading: ["sectionHeading"],
  columns: [
    "columns",
    "videoBoss",
    "rectangle34",
    "rectangle35",
    "frame2",
    "svg",
    "group8",
    "frame280",
    "btn4"
  ],
  videoBoss: ["videoBoss", "rectangle34", "rectangle35", "frame2", "svg"],
  rectangle34: ["rectangle34"],
  rectangle35: ["rectangle35"],
  frame2: ["frame2", "svg"],
  svg: ["svg"],
  group8: ["group8", "frame280", "btn4"],
  frame280: ["frame280", "btn4"],
  btn4: ["btn4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  columns: "div";
  videoBoss: "div";
  rectangle34: "div";
  rectangle35: "div";
  frame2: "div";
  svg: "svg";
  group8: "div";
  frame280: "div";
  btn4: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdvVideo2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdvVideo2__VariantsArgs;
    args?: PlasmicAdvVideo2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdvVideo2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdvVideo2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdvVideo2__ArgProps,
      internalVariantPropNames: PlasmicAdvVideo2__VariantProps
    });

    return PlasmicAdvVideo2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvVideo2";
  } else {
    func.displayName = `PlasmicAdvVideo2.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvVideo2 = Object.assign(
  // Top-level PlasmicAdvVideo2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    columns: makeNodeComponent("columns"),
    videoBoss: makeNodeComponent("videoBoss"),
    rectangle34: makeNodeComponent("rectangle34"),
    rectangle35: makeNodeComponent("rectangle35"),
    frame2: makeNodeComponent("frame2"),
    svg: makeNodeComponent("svg"),
    group8: makeNodeComponent("group8"),
    frame280: makeNodeComponent("frame280"),
    btn4: makeNodeComponent("btn4"),

    // Metadata about props expected for PlasmicAdvVideo2
    internalVariantProps: PlasmicAdvVideo2__VariantProps,
    internalArgProps: PlasmicAdvVideo2__ArgProps
  }
);

export default PlasmicAdvVideo2;
/* prettier-ignore-end */
