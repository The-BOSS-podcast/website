// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 9B3OY5WRkD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarRes from "../../NavBarRes"; // plasmic-import: hi-mET-ngC/component
import FooterComDesk from "../../FooterComDesk"; // plasmic-import: H9tCPDoO68/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicTerms.module.css"; // plasmic-import: 9B3OY5WRkD/css

export type PlasmicTerms__VariantMembers = {};

export type PlasmicTerms__VariantsArgs = {};
type VariantPropType = keyof PlasmicTerms__VariantsArgs;
export const PlasmicTerms__VariantProps = new Array<VariantPropType>();

export type PlasmicTerms__ArgsType = {};
type ArgPropType = keyof PlasmicTerms__ArgsType;
export const PlasmicTerms__ArgProps = new Array<ArgPropType>();

export type PlasmicTerms__OverridesType = {
  root?: p.Flex<"div">;
  navBarRes?: p.Flex<typeof NavBarRes>;
  terms?: p.Flex<"div">;
  whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds?: p.Flex<"div">;
  footerComDesk?: p.Flex<typeof FooterComDesk>;
};

export interface DefaultTermsProps {}

function PlasmicTerms__RenderFunc(props: {
  variants: PlasmicTerms__VariantsArgs;
  args: PlasmicTerms__ArgsType;
  overrides: PlasmicTerms__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBarRes
            data-plasmic-name={"navBarRes"}
            data-plasmic-override={overrides.navBarRes}
            className={classNames("__wab_instance", sty.navBarRes)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"terms"}
              data-plasmic-override={overrides.terms}
              className={classNames(projectcss.all, sty.terms)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__iqTfe)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__laNtr
                    )}
                  >
                    {"Terms of Use"}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__jIvSj)}>
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__s9DSg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pxm9O
                        )}
                      >
                        {"How BOSS started?"}
                      </div>

                      <div
                        data-plasmic-name={
                          "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
                        }
                        data-plasmic-override={
                          overrides.whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds
                        )}
                      >
                        {
                          "While running our podcast, The Balls Of Steel Show â€“ Dhandho Ni Soch, we encountered several problems with podcast monetization, advertisement and sponsorships. So, there we were, building our bridge to connect two extreme ends. "
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </div>
          ) : null}

          <FooterComDesk
            data-plasmic-name={"footerComDesk"}
            data-plasmic-override={overrides.footerComDesk}
            className={classNames("__wab_instance", sty.footerComDesk)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarRes",
    "terms",
    "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds",
    "footerComDesk"
  ],
  navBarRes: ["navBarRes"],
  terms: [
    "terms",
    "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
  ],
  whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds:
    [
      "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
    ],
  footerComDesk: ["footerComDesk"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarRes: typeof NavBarRes;
  terms: "div";
  whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds: "div";
  footerComDesk: typeof FooterComDesk;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTerms__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTerms__VariantsArgs;
    args?: PlasmicTerms__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTerms__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTerms__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTerms__ArgProps,
          internalVariantPropNames: PlasmicTerms__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTerms__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTerms";
  } else {
    func.displayName = `PlasmicTerms.${nodeName}`;
  }
  return func;
}

export const PlasmicTerms = Object.assign(
  // Top-level PlasmicTerms renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarRes: makeNodeComponent("navBarRes"),
    terms: makeNodeComponent("terms"),
    whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds:
      makeNodeComponent(
        "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
      ),
    footerComDesk: makeNodeComponent("footerComDesk"),

    // Metadata about props expected for PlasmicTerms
    internalVariantProps: PlasmicTerms__VariantProps,
    internalArgProps: PlasmicTerms__ArgProps
  }
);

export default PlasmicTerms;
/* prettier-ignore-end */
