// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 2a3pU-rBM-T
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicSubscribeCom.module.css"; // plasmic-import: 2a3pU-rBM-T/css

export type PlasmicSubscribeCom__VariantMembers = {};

export type PlasmicSubscribeCom__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubscribeCom__VariantsArgs;
export const PlasmicSubscribeCom__VariantProps = new Array<VariantPropType>();

export type PlasmicSubscribeCom__ArgsType = {
  subsEmailProp?: string;
};

type ArgPropType = keyof PlasmicSubscribeCom__ArgsType;
export const PlasmicSubscribeCom__ArgProps = new Array<ArgPropType>(
  "subsEmailProp"
);

export type PlasmicSubscribeCom__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<"form">;
  subsEmailInput2?: p.Flex<"input">;
  btnCtaPrimary?: p.Flex<"button">;
};

export interface DefaultSubscribeComProps {
  subsEmailProp?: string;
  className?: string;
}

function PlasmicSubscribeCom__RenderFunc(props: {
  variants: PlasmicSubscribeCom__VariantsArgs;
  args: PlasmicSubscribeCom__ArgsType;
  overrides: PlasmicSubscribeCom__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          subsEmailProp: "" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      title={"" as const}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___2Tlb6
        )}
      >
        {"Subscribe and up your business game!"}
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__hIyYr
        )}
      >
        {"Drop your email below and weâ€™ll help you hone your business mindset."}
      </div>

      {true ? (
        <p.Stack
          as={"form"}
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          hasGap={true}
          action={
            "https://script.google.com/macros/s/AKfycbwHhXz6_Qhb1qfmiyLyCg-2fiY7LiAlLeGsFqNOCnRZq5ooaBD4KmltJ6hSu00LHQdS/exec" as const
          }
          className={classNames(projectcss.all, sty.form)}
          method={"post" as const}
          name={"newsletter-subs" as const}
        >
          <input
            data-plasmic-name={"subsEmailInput2"}
            data-plasmic-override={overrides.subsEmailInput2}
            aria-label={"enter your email here" as const}
            aria-labelledby={"" as const}
            autoComplete={"email" as const}
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.subsEmailInput2
            )}
            id={"subs-email" as const}
            name={"subs_email" as const}
            onChange={"" as const}
            placeholder={"Your Email" as const}
            size={undefined}
            type={"email" as const}
            value={args.subsEmailProp}
          />

          <p.Stack
            as={"button"}
            data-plasmic-name={"btnCtaPrimary"}
            data-plasmic-override={overrides.btnCtaPrimary}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.btnCtaPrimary
            )}
            type={"submit" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jxpdZ
              )}
            >
              {"Subscribe"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "form", "subsEmailInput2", "btnCtaPrimary"],
  form: ["form", "subsEmailInput2", "btnCtaPrimary"],
  subsEmailInput2: ["subsEmailInput2"],
  btnCtaPrimary: ["btnCtaPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "form";
  subsEmailInput2: "input";
  btnCtaPrimary: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubscribeCom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubscribeCom__VariantsArgs;
    args?: PlasmicSubscribeCom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubscribeCom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubscribeCom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSubscribeCom__ArgProps,
          internalVariantPropNames: PlasmicSubscribeCom__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSubscribeCom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubscribeCom";
  } else {
    func.displayName = `PlasmicSubscribeCom.${nodeName}`;
  }
  return func;
}

export const PlasmicSubscribeCom = Object.assign(
  // Top-level PlasmicSubscribeCom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    subsEmailInput2: makeNodeComponent("subsEmailInput2"),
    btnCtaPrimary: makeNodeComponent("btnCtaPrimary"),

    // Metadata about props expected for PlasmicSubscribeCom
    internalVariantProps: PlasmicSubscribeCom__VariantProps,
    internalArgProps: PlasmicSubscribeCom__ArgProps
  }
);

export default PlasmicSubscribeCom;
/* prettier-ignore-end */
