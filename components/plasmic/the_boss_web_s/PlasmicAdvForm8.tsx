// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: qTtDsUanQha
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component
import Input from "antd/lib/input"; // plasmic-import: tO9wrxr8Nbb/codeComponent

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicAdvForm8.module.css"; // plasmic-import: qTtDsUanQha/css

export type PlasmicAdvForm8__VariantMembers = {};

export type PlasmicAdvForm8__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdvForm8__VariantsArgs;
export const PlasmicAdvForm8__VariantProps = new Array<VariantPropType>();

export type PlasmicAdvForm8__ArgsType = {};
type ArgPropType = keyof PlasmicAdvForm8__ArgsType;
export const PlasmicAdvForm8__ArgProps = new Array<ArgPropType>();

export type PlasmicAdvForm8__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  form?: p.Flex<"form">;
  firstNameInput?: p.Flex<typeof Input>;
  lastNameInput?: p.Flex<typeof Input>;
  emailInput?: p.Flex<typeof Input>;
  phoneInput?: p.Flex<typeof Input>;
  messageInput2?: p.Flex<typeof Input>;
  messageInput3?: p.Flex<typeof Input>;
  messageInput5?: p.Flex<typeof Input>;
  messageInput4?: p.Flex<typeof Input>;
  messageInput?: p.Flex<typeof Input>;
  btn?: p.Flex<"button">;
};

export interface DefaultAdvForm8Props {
  className?: string;
}

function PlasmicAdvForm8__RenderFunc(props: {
  variants: PlasmicAdvForm8__VariantsArgs;
  args: PlasmicAdvForm8__ArgsType;
  overrides: PlasmicAdvForm8__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rgrA
          )}
        >
          {"Letâ€™s Get Started"}
        </div>
      </SectionHeading>

      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fGsQs)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kNgZ
            )}
            id={"advertiser-form" as const}
          >
            {"Form for Advertisers"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nTf2M
            )}
          >
            {
              "Hi! Please fill the form below and weâ€™ll connect with you super soon\nto start proliferating your business numbers ðŸš€"
            }
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"form"}
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          hasGap={true}
          action={
            "https://script.google.com/macros/s/AKfycbwfKXPO3zSZp8WryIDOP-ra6ahR5VkXkDRP2kCaIhqWg4cD2Aq7gy2Lj3ROWXL6R8uo/exec" as const
          }
          className={classNames(projectcss.all, sty.form)}
          method={"post" as const}
          name={"advrtizer" as const}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox___3SEkx)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dSsKv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eUXt
                    )}
                  >
                    {"First name"}
                  </div>

                  <Input
                    data-plasmic-name={"firstNameInput"}
                    data-plasmic-override={overrides.firstNameInput}
                    className={classNames("__wab_instance", sty.firstNameInput)}
                    defaultValue={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                    id={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("first-name" as const)
                        : ("first-name" as const)
                    }
                    name={"first_name" as const}
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("Your First Name" as const)
                        : ("Your First Name" as const)
                    }
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                  />
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uQoHj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2O8Sh
                    )}
                  >
                    {"Last name"}
                  </div>

                  <Input
                    data-plasmic-name={"lastNameInput"}
                    data-plasmic-override={overrides.lastNameInput}
                    className={classNames("__wab_instance", sty.lastNameInput)}
                    defaultValue={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                    id={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("last-name" as const)
                        : ("last-name" as const)
                    }
                    name={"last_name" as const}
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("Your Last Name" as const)
                        : ("Your Last Name" as const)
                    }
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("" as const)
                        : ("" as const)
                    }
                  />
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xVrOl)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__duf6M
                )}
              >
                {"Email"}
              </div>

              <Input
                data-plasmic-name={"emailInput"}
                data-plasmic-override={overrides.emailInput}
                className={classNames("__wab_instance", sty.emailInput)}
                defaultValue={"" as const}
                id={"email-add" as const}
                name={"email_add" as const}
                placeholder={"Your  Email address" as const}
                type={"email" as const}
              />
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zEAr)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gYJcL
                )}
              >
                {"Contact"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kkzow)}
                >
                  <Input
                    data-plasmic-name={"phoneInput"}
                    data-plasmic-override={overrides.phoneInput}
                    className={classNames("__wab_instance", sty.phoneInput)}
                    defaultValue={"" as const}
                    id={"phone" as const}
                    name={"phone_num" as const}
                    placeholder={"Your Contact Number" as const}
                    type={"" as const}
                  />
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__trKh0)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___59O
                )}
              >
                {"Company Name"}
              </div>

              <Input
                data-plasmic-name={"messageInput2"}
                data-plasmic-override={overrides.messageInput2}
                className={classNames("__wab_instance", sty.messageInput2)}
                defaultValue={"" as const}
                id={"company-name" as const}
                name={"company_name" as const}
                placeholder={"Enter company name" as const}
                type={"" as const}
              />
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sppRw)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wvcp1
                )}
              >
                {"Website"}
              </div>

              <Input
                data-plasmic-name={"messageInput3"}
                data-plasmic-override={overrides.messageInput3}
                className={classNames("__wab_instance", sty.messageInput3)}
                defaultValue={"" as const}
                id={"website" as const}
                name={"website" as const}
                placeholder={"your website URL" as const}
                type={"" as const}
              />
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fBhxz)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lffI5
                )}
              >
                {"Target Audience"}
              </div>

              <Input
                data-plasmic-name={"messageInput5"}
                data-plasmic-override={overrides.messageInput5}
                className={classNames("__wab_instance", sty.messageInput5)}
                defaultValue={"" as const}
                id={"target-aud" as const}
                name={"target_aud" as const}
                placeholder={
                  "You may describe your target audience here" as const
                }
                type={"" as const}
              />
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aCqJ)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ypg1Y
                )}
              >
                {"Target Region"}
              </div>

              <Input
                data-plasmic-name={"messageInput4"}
                data-plasmic-override={overrides.messageInput4}
                className={classNames("__wab_instance", sty.messageInput4)}
                defaultValue={"" as const}
                id={"target-region" as const}
                name={"target_region" as const}
                placeholder={
                  "List geographical area that you want to target" as const
                }
                type={"" as const}
              />
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gQHv)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jEssv
                )}
              >
                {"Additional Notes"}
              </div>

              <Input
                data-plasmic-name={"messageInput"}
                data-plasmic-override={overrides.messageInput}
                className={classNames("__wab_instance", sty.messageInput)}
                defaultValue={"" as const}
                id={"addl-notes" as const}
                name={"addl_notes" as const}
                placeholder={
                  "Something else you might want to convey..." as const
                }
                type={"" as const}
              />
            </p.Stack>
          ) : null}

          <p.Stack
            as={"button"}
            data-plasmic-name={"btn"}
            data-plasmic-override={overrides.btn}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.button, sty.btn)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j1Tct
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Submit the Form"}
                </span>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "form",
    "firstNameInput",
    "lastNameInput",
    "emailInput",
    "phoneInput",
    "messageInput2",
    "messageInput3",
    "messageInput5",
    "messageInput4",
    "messageInput",
    "btn"
  ],
  sectionHeading: ["sectionHeading"],
  form: [
    "form",
    "firstNameInput",
    "lastNameInput",
    "emailInput",
    "phoneInput",
    "messageInput2",
    "messageInput3",
    "messageInput5",
    "messageInput4",
    "messageInput",
    "btn"
  ],
  firstNameInput: ["firstNameInput"],
  lastNameInput: ["lastNameInput"],
  emailInput: ["emailInput"],
  phoneInput: ["phoneInput"],
  messageInput2: ["messageInput2"],
  messageInput3: ["messageInput3"],
  messageInput5: ["messageInput5"],
  messageInput4: ["messageInput4"],
  messageInput: ["messageInput"],
  btn: ["btn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  form: "form";
  firstNameInput: typeof Input;
  lastNameInput: typeof Input;
  emailInput: typeof Input;
  phoneInput: typeof Input;
  messageInput2: typeof Input;
  messageInput3: typeof Input;
  messageInput5: typeof Input;
  messageInput4: typeof Input;
  messageInput: typeof Input;
  btn: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdvForm8__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdvForm8__VariantsArgs;
    args?: PlasmicAdvForm8__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdvForm8__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdvForm8__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdvForm8__ArgProps,
          internalVariantPropNames: PlasmicAdvForm8__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAdvForm8__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvForm8";
  } else {
    func.displayName = `PlasmicAdvForm8.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvForm8 = Object.assign(
  // Top-level PlasmicAdvForm8 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    form: makeNodeComponent("form"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    emailInput: makeNodeComponent("emailInput"),
    phoneInput: makeNodeComponent("phoneInput"),
    messageInput2: makeNodeComponent("messageInput2"),
    messageInput3: makeNodeComponent("messageInput3"),
    messageInput5: makeNodeComponent("messageInput5"),
    messageInput4: makeNodeComponent("messageInput4"),
    messageInput: makeNodeComponent("messageInput"),
    btn: makeNodeComponent("btn"),

    // Metadata about props expected for PlasmicAdvForm8
    internalVariantProps: PlasmicAdvForm8__VariantProps,
    internalArgProps: PlasmicAdvForm8__ArgProps
  }
);

export default PlasmicAdvForm8;
/* prettier-ignore-end */
