// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: iitORHJvPNl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicAdvComparision3.module.css"; // plasmic-import: iitORHJvPNl/css

export type PlasmicAdvComparision3__VariantMembers = {};

export type PlasmicAdvComparision3__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdvComparision3__VariantsArgs;
export const PlasmicAdvComparision3__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAdvComparision3__ArgsType = {};
type ArgPropType = keyof PlasmicAdvComparision3__ArgsType;
export const PlasmicAdvComparision3__ArgProps = new Array<ArgPropType>();

export type PlasmicAdvComparision3__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  frame349?: p.Flex<"div">;
  frame257?: p.Flex<"div">;
  frame258?: p.Flex<"div">;
  frame262?: p.Flex<"div">;
  frame259?: p.Flex<"div">;
  frame260?: p.Flex<"div">;
  frame261?: p.Flex<"div">;
  frame263?: p.Flex<"div">;
  frame265?: p.Flex<"div">;
  frame267?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  frame108?: p.Flex<"div">;
  frame110?: p.Flex<"div">;
  frame109?: p.Flex<"div">;
  frame111?: p.Flex<"div">;
  frame112?: p.Flex<"div">;
  frame113?: p.Flex<"div">;
  frame16?: p.Flex<"div">;
  frame135?: p.Flex<"div">;
  frame136?: p.Flex<"div">;
  frame137?: p.Flex<"div">;
  frame138?: p.Flex<"div">;
  frame139?: p.Flex<"div">;
  rectangle33?: p.Flex<"div">;
  btn7?: p.Flex<"div">;
};

export interface DefaultAdvComparision3Props {
  className?: string;
}

function PlasmicAdvComparision3__RenderFunc(props: {
  variants: PlasmicAdvComparision3__VariantsArgs;
  args: PlasmicAdvComparision3__ArgsType;
  overrides: PlasmicAdvComparision3__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vsLl8
          )}
        >
          {"The Podcast Market"}
        </div>
      </SectionHeading>

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame349"}
          data-plasmic-override={overrides.frame349}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame349)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame257"}
            data-plasmic-override={overrides.frame257}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame257)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame258"}
              data-plasmic-override={overrides.frame258}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame258)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gO7C)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("62px" as const)
                      : ("62px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("84px" as const)
                      : ("84px" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/the_boss_web_s/images/emoji20.svg",
                          fullWidth: 84,
                          fullHeight: 62,
                          aspectRatio: 1.354839
                        }
                      : {
                          src: "/plasmic/the_boss_web_s/images/emoji20.svg",
                          fullWidth: 84,
                          fullHeight: 62,
                          aspectRatio: 1.354839
                        }
                  }
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__riho6
                )}
              >
                {"Learn more"}
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"frame262"}
              data-plasmic-override={overrides.frame262}
              className={classNames(projectcss.all, sty.frame262)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i9K5F
                )}
              >
                {"Podcasting ranking"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1R1Fm
                )}
              >
                {"Monthly listeners"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dTsbR
                )}
              >
                {"Podcast Ad revenue"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3MeT
                )}
              >
                {"1st"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tcdYo
                )}
              >
                {"117.8M"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xrRy7
                )}
              >
                {"$1.3B"}
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame259"}
            data-plasmic-override={overrides.frame259}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame259)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame260"}
              data-plasmic-override={overrides.frame260}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame260)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__h4C5R)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("62px" as const)
                      : ("62px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("84px" as const)
                      : ("84px" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/the_boss_web_s/images/emoji21.svg",
                          fullWidth: 84,
                          fullHeight: 62,
                          aspectRatio: 1.354839
                        }
                      : {
                          src: "/plasmic/the_boss_web_s/images/emoji21.svg",
                          fullWidth: 84,
                          fullHeight: 62,
                          aspectRatio: 1.354839
                        }
                  }
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jtf5C
                )}
              >
                {"Learn more"}
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"frame261"}
              data-plasmic-override={overrides.frame261}
              className={classNames(projectcss.all, sty.frame261)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cZ5FR
                )}
              >
                {"Podcasting ranking"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yi5Kz
                )}
              >
                {"Monthly listeners"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dyiUv
                )}
              >
                {"Podcast Ad revenue"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mm3Mp
                )}
              >
                {"2nd"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gRDgu
                )}
              >
                {"85.6M"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0BGei
                )}
              >
                {"$194M"}
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame263"}
            data-plasmic-override={overrides.frame263}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame263)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame265"}
              data-plasmic-override={overrides.frame265}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame265)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sQwJr)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("61.999px" as const)
                      : ("61.999px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("83.999px" as const)
                      : ("83.999px" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/the_boss_web_s/images/emoji22.svg",
                          fullWidth: 83.999,
                          fullHeight: 61.999,
                          aspectRatio: 1.354839
                        }
                      : {
                          src: "/plasmic/the_boss_web_s/images/emoji22.svg",
                          fullWidth: 83.999,
                          fullHeight: 61.999,
                          aspectRatio: 1.354839
                        }
                  }
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___17X8I
                )}
              >
                {"Learn more"}
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"frame267"}
              data-plasmic-override={overrides.frame267}
              className={classNames(projectcss.all, sty.frame267)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uRyR
                )}
              >
                {"Podcasting ranking"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9LggI
                )}
              >
                {"Monthly listeners"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nUien
                )}
              >
                {"Podcast Ad revenue"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__veBgQ
                )}
              >
                {"3rd"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r1LgY
                )}
              >
                {"57.6M"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rf1PX
                )}
              >
                {"$182M"}
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__asWrt
            )}
          >
            {"Top 3 Podcasting Nations In The World"}
          </div>

          <div
            data-plasmic-name={"frame108"}
            data-plasmic-override={overrides.frame108}
            className={classNames(projectcss.all, sty.frame108)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame110"}
              data-plasmic-override={overrides.frame110}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame110)}
            >
              <div
                data-plasmic-name={"frame109"}
                data-plasmic-override={overrides.frame109}
                className={classNames(projectcss.all, sty.frame109)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame111"}
                  data-plasmic-override={overrides.frame111}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame111)}
                >
                  <div
                    data-plasmic-name={"frame112"}
                    data-plasmic-override={overrides.frame112}
                    className={classNames(projectcss.all, sty.frame112)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dP4So
                      )}
                    >
                      {"01"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k9YG4
                    )}
                  >
                    {"Podcasting ranking"}
                  </div>
                </p.Stack>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c5TlB
                  )}
                >
                  {"1st"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5Nfl5
                  )}
                >
                  {"2nd"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9SNdi
                  )}
                >
                  {"3rd"}
                </div>
              </div>

              <div
                data-plasmic-name={"frame113"}
                data-plasmic-override={overrides.frame113}
                className={classNames(projectcss.all, sty.frame113)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame16"}
                  data-plasmic-override={overrides.frame16}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame16)}
                >
                  <div
                    data-plasmic-name={"frame135"}
                    data-plasmic-override={overrides.frame135}
                    className={classNames(projectcss.all, sty.frame135)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cnlNr
                      )}
                    >
                      {"02"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gQpai
                    )}
                  >
                    {"Monthly listeners"}
                  </div>
                </p.Stack>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__viyLs
                  )}
                >
                  {"117.8M"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__imHm3
                  )}
                >
                  {"85.6M"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wADb
                  )}
                >
                  {"57.6M"}
                </div>
              </div>

              <div
                data-plasmic-name={"frame136"}
                data-plasmic-override={overrides.frame136}
                className={classNames(projectcss.all, sty.frame136)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame137"}
                  data-plasmic-override={overrides.frame137}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame137)}
                >
                  <div
                    data-plasmic-name={"frame138"}
                    data-plasmic-override={overrides.frame138}
                    className={classNames(projectcss.all, sty.frame138)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hg2Dc
                      )}
                    >
                      {"03"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__msFcj
                    )}
                  >
                    {"Podcast Ad revenue"}
                  </div>
                </p.Stack>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__coyCp
                  )}
                >
                  {"$1.3B"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ngzbS
                  )}
                >
                  {"$194M"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ni7Jz
                  )}
                >
                  {"$182M"}
                </div>
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"frame139"}
              data-plasmic-override={overrides.frame139}
              className={classNames(projectcss.all, sty.frame139)}
            >
              <div
                data-plasmic-name={"rectangle33"}
                data-plasmic-override={overrides.rectangle33}
                className={classNames(projectcss.all, sty.rectangle33)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fdJG
                )}
              >
                {"Country Statistics"}
              </div>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qCmLf)}
                displayHeight={"40px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"55.384px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/emoji10.svg",
                  fullWidth: 55.384,
                  fullHeight: 40,
                  aspectRatio: 1.4
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__uHd23)}
                displayHeight={"40px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"55.384px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/emoji11.svg",
                  fullWidth: 55.384,
                  fullHeight: 40,
                  aspectRatio: 1.4
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___2O53S)}
                displayHeight={"40px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"55.384px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/the_boss_web_s/images/emoji12.svg",
                  fullWidth: 55.384,
                  fullHeight: 40,
                  aspectRatio: 1.4
                }}
              />
            </div>
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"btn7"}
              data-plasmic-override={overrides.btn7}
              hasGap={true}
              className={classNames(projectcss.all, sty.btn7)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3OVDp
                )}
              >
                {"More statistics"}
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "frame349",
    "frame257",
    "frame258",
    "frame262",
    "frame259",
    "frame260",
    "frame261",
    "frame263",
    "frame265",
    "frame267",
    "freeBox",
    "frame108",
    "frame110",
    "frame109",
    "frame111",
    "frame112",
    "frame113",
    "frame16",
    "frame135",
    "frame136",
    "frame137",
    "frame138",
    "frame139",
    "rectangle33",
    "btn7"
  ],
  sectionHeading: ["sectionHeading"],
  frame349: [
    "frame349",
    "frame257",
    "frame258",
    "frame262",
    "frame259",
    "frame260",
    "frame261",
    "frame263",
    "frame265",
    "frame267"
  ],
  frame257: ["frame257", "frame258", "frame262"],
  frame258: ["frame258"],
  frame262: ["frame262"],
  frame259: ["frame259", "frame260", "frame261"],
  frame260: ["frame260"],
  frame261: ["frame261"],
  frame263: ["frame263", "frame265", "frame267"],
  frame265: ["frame265"],
  frame267: ["frame267"],
  freeBox: [
    "freeBox",
    "frame108",
    "frame110",
    "frame109",
    "frame111",
    "frame112",
    "frame113",
    "frame16",
    "frame135",
    "frame136",
    "frame137",
    "frame138",
    "frame139",
    "rectangle33",
    "btn7"
  ],
  frame108: [
    "frame108",
    "frame110",
    "frame109",
    "frame111",
    "frame112",
    "frame113",
    "frame16",
    "frame135",
    "frame136",
    "frame137",
    "frame138",
    "frame139",
    "rectangle33"
  ],
  frame110: [
    "frame110",
    "frame109",
    "frame111",
    "frame112",
    "frame113",
    "frame16",
    "frame135",
    "frame136",
    "frame137",
    "frame138"
  ],
  frame109: ["frame109", "frame111", "frame112"],
  frame111: ["frame111", "frame112"],
  frame112: ["frame112"],
  frame113: ["frame113", "frame16", "frame135"],
  frame16: ["frame16", "frame135"],
  frame135: ["frame135"],
  frame136: ["frame136", "frame137", "frame138"],
  frame137: ["frame137", "frame138"],
  frame138: ["frame138"],
  frame139: ["frame139", "rectangle33"],
  rectangle33: ["rectangle33"],
  btn7: ["btn7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  frame349: "div";
  frame257: "div";
  frame258: "div";
  frame262: "div";
  frame259: "div";
  frame260: "div";
  frame261: "div";
  frame263: "div";
  frame265: "div";
  frame267: "div";
  freeBox: "div";
  frame108: "div";
  frame110: "div";
  frame109: "div";
  frame111: "div";
  frame112: "div";
  frame113: "div";
  frame16: "div";
  frame135: "div";
  frame136: "div";
  frame137: "div";
  frame138: "div";
  frame139: "div";
  rectangle33: "div";
  btn7: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdvComparision3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdvComparision3__VariantsArgs;
    args?: PlasmicAdvComparision3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdvComparision3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdvComparision3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdvComparision3__ArgProps,
          internalVariantPropNames: PlasmicAdvComparision3__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAdvComparision3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvComparision3";
  } else {
    func.displayName = `PlasmicAdvComparision3.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvComparision3 = Object.assign(
  // Top-level PlasmicAdvComparision3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    frame349: makeNodeComponent("frame349"),
    frame257: makeNodeComponent("frame257"),
    frame258: makeNodeComponent("frame258"),
    frame262: makeNodeComponent("frame262"),
    frame259: makeNodeComponent("frame259"),
    frame260: makeNodeComponent("frame260"),
    frame261: makeNodeComponent("frame261"),
    frame263: makeNodeComponent("frame263"),
    frame265: makeNodeComponent("frame265"),
    frame267: makeNodeComponent("frame267"),
    freeBox: makeNodeComponent("freeBox"),
    frame108: makeNodeComponent("frame108"),
    frame110: makeNodeComponent("frame110"),
    frame109: makeNodeComponent("frame109"),
    frame111: makeNodeComponent("frame111"),
    frame112: makeNodeComponent("frame112"),
    frame113: makeNodeComponent("frame113"),
    frame16: makeNodeComponent("frame16"),
    frame135: makeNodeComponent("frame135"),
    frame136: makeNodeComponent("frame136"),
    frame137: makeNodeComponent("frame137"),
    frame138: makeNodeComponent("frame138"),
    frame139: makeNodeComponent("frame139"),
    rectangle33: makeNodeComponent("rectangle33"),
    btn7: makeNodeComponent("btn7"),

    // Metadata about props expected for PlasmicAdvComparision3
    internalVariantProps: PlasmicAdvComparision3__VariantProps,
    internalArgProps: PlasmicAdvComparision3__ArgProps
  }
);

export default PlasmicAdvComparision3;
/* prettier-ignore-end */
