// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: ZMIVAnut5so
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicPodcasterPerks5.module.css"; // plasmic-import: ZMIVAnut5so/css

import NounPriceSetPriceIcon from "./icons/PlasmicIcon__NounPriceSetPrice"; // plasmic-import: q6pCi-bSv9R/icon
import _37GroupIcon from "./icons/PlasmicIcon___37Group"; // plasmic-import: 8w9pXW3jzKO/icon
import Group18Icon from "./icons/PlasmicIcon__Group18"; // plasmic-import: xgXdTWhcZz/icon
import NounChooseDecideSpotsIcon from "./icons/PlasmicIcon__NounChooseDecideSpots"; // plasmic-import: -E7TRXUow1m/icon
import Group17Icon from "./icons/PlasmicIcon__Group17"; // plasmic-import: xrT4fdkHj/icon

export type PlasmicPodcasterPerks5__VariantMembers = {};

export type PlasmicPodcasterPerks5__VariantsArgs = {};
type VariantPropType = keyof PlasmicPodcasterPerks5__VariantsArgs;
export const PlasmicPodcasterPerks5__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPodcasterPerks5__ArgsType = {};
type ArgPropType = keyof PlasmicPodcasterPerks5__ArgsType;
export const PlasmicPodcasterPerks5__ArgProps = new Array<ArgPropType>();

export type PlasmicPodcasterPerks5__OverridesType = {
  root?: p.Flex<"div">;
  group14?: p.Flex<"div">;
  btn10?: p.Flex<"a"> & Partial<LinkProps>;
  group41?: p.Flex<"div">;
  frame176?: p.Flex<"div">;
  frame304?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
  frame305?: p.Flex<"div">;
  nounGroupCommunity?: p.Flex<"div">;
  frame178?: p.Flex<"div">;
  frame306?: p.Flex<"div">;
  nounChoiceOfferChoice?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  group3?: p.Flex<"div">;
  frame13?: p.Flex<"div">;
  frame307?: p.Flex<"div">;
  frame177?: p.Flex<"div">;
  frame308?: p.Flex<"div">;
  nounSignUp3590202?: p.Flex<"div">;
};

export interface DefaultPodcasterPerks5Props {
  className?: string;
}

export const defaultPodcasterPerks5__Args: Partial<PlasmicPodcasterPerks5__ArgsType> =
  {};

function PlasmicPodcasterPerks5__RenderFunc(props: {
  variants: PlasmicPodcasterPerks5__VariantsArgs;
  args: PlasmicPodcasterPerks5__ArgsType;
  overrides: PlasmicPodcasterPerks5__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultPodcasterPerks5__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"group14"}
        data-plasmic-override={overrides.group14}
        hasGap={true}
        className={classNames(projectcss.all, sty.group14)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1JfRf
          )}
        >
          {"Join us and witness the perks"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yi1L
          )}
        >
          {"Control stays yours. The BOSS facilitates everything"}
        </div>

        <p.Stack
          as={p.PlasmicLink}
          data-plasmic-name={"btn10"}
          data-plasmic-override={overrides.btn10}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.btn10)}
          component={Link}
          href={"#podcaster-form" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__k7Zqf
            )}
          >
            {"Sign-Up with BOSS"}
          </div>
        </p.Stack>
      </p.Stack>

      <div
        data-plasmic-name={"group41"}
        data-plasmic-override={overrides.group41}
        className={classNames(projectcss.all, sty.group41)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pKJu)}
          >
            <div
              data-plasmic-name={"frame176"}
              data-plasmic-override={overrides.frame176}
              className={classNames(projectcss.all, sty.frame176)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rqi3Z
                )}
              >
                {"You decide your price for\nAds & featuring guests"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y4BmJ
                )}
              >
                {"Set Ad price"}
              </div>

              <div
                data-plasmic-name={"frame304"}
                data-plasmic-override={overrides.frame304}
                className={classNames(projectcss.all, sty.frame304)}
              >
                <NounPriceSetPriceIcon
                  className={classNames(projectcss.all, sty.svg__ikpcI)}
                  role={"img"}
                />
              </div>
            </div>

            <div
              data-plasmic-name={"frame14"}
              data-plasmic-override={overrides.frame14}
              className={classNames(projectcss.all, sty.frame14)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v6H5S
                )}
              >
                {"Be a part of The BOSSâ€™s\nPremium Podcast Community"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gZzHr
                )}
              >
                {"The BOSS community"}
              </div>

              <div
                data-plasmic-name={"frame305"}
                data-plasmic-override={overrides.frame305}
                className={classNames(projectcss.all, sty.frame305)}
              >
                <div
                  data-plasmic-name={"nounGroupCommunity"}
                  data-plasmic-override={overrides.nounGroupCommunity}
                  className={classNames(projectcss.all, sty.nounGroupCommunity)}
                >
                  <_37GroupIcon
                    className={classNames(projectcss.all, sty.svg__x5Wri)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__iAvKh)}>
            <div
              data-plasmic-name={"frame178"}
              data-plasmic-override={overrides.frame178}
              className={classNames(projectcss.all, sty.frame178)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kjs4D
                )}
              >
                {"Accept or deny a Guest \nor an Advertisment offer"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5JdFn
                )}
              >
                {"Offer choice"}
              </div>

              <div
                data-plasmic-name={"frame306"}
                data-plasmic-override={overrides.frame306}
                className={classNames(projectcss.all, sty.frame306)}
              >
                <div
                  data-plasmic-name={"nounChoiceOfferChoice"}
                  data-plasmic-override={overrides.nounChoiceOfferChoice}
                  className={classNames(
                    projectcss.all,
                    sty.nounChoiceOfferChoice
                  )}
                >
                  <div
                    data-plasmic-name={"group2"}
                    data-plasmic-override={overrides.group2}
                    className={classNames(projectcss.all, sty.group2)}
                  >
                    <div
                      data-plasmic-name={"group3"}
                      data-plasmic-override={overrides.group3}
                      className={classNames(projectcss.all, sty.group3)}
                    >
                      <Group18Icon
                        className={classNames(projectcss.all, sty.svg__zglaI)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__g7Bnj)}
          >
            <div
              data-plasmic-name={"frame13"}
              data-plasmic-override={overrides.frame13}
              className={classNames(projectcss.all, sty.frame13)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__huOGo
                )}
              >
                {"You decide the kind of\nad spots you want to sell"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oaEPi
                )}
              >
                {"Decide Ad spots"}
              </div>

              <div
                data-plasmic-name={"frame307"}
                data-plasmic-override={overrides.frame307}
                className={classNames(projectcss.all, sty.frame307)}
              >
                <NounChooseDecideSpotsIcon
                  className={classNames(projectcss.all, sty.svg___8PfKw)}
                  role={"img"}
                />
              </div>
            </div>

            <div
              data-plasmic-name={"frame177"}
              data-plasmic-override={overrides.frame177}
              className={classNames(projectcss.all, sty.frame177)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tqw61
                )}
              >
                {"Weâ€™ll welcome you with\nwarm hugs."}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gxmbw
                )}
              >
                {"Free Sign-up"}
              </div>

              <div
                data-plasmic-name={"frame308"}
                data-plasmic-override={overrides.frame308}
                className={classNames(projectcss.all, sty.frame308)}
              >
                <div
                  data-plasmic-name={"nounSignUp3590202"}
                  data-plasmic-override={overrides.nounSignUp3590202}
                  className={classNames(projectcss.all, sty.nounSignUp3590202)}
                >
                  <Group17Icon
                    className={classNames(projectcss.all, sty.svg__gUrk)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "group14",
    "btn10",
    "group41",
    "frame176",
    "frame304",
    "frame14",
    "frame305",
    "nounGroupCommunity",
    "frame178",
    "frame306",
    "nounChoiceOfferChoice",
    "group2",
    "group3",
    "frame13",
    "frame307",
    "frame177",
    "frame308",
    "nounSignUp3590202"
  ],
  group14: ["group14", "btn10"],
  btn10: ["btn10"],
  group41: [
    "group41",
    "frame176",
    "frame304",
    "frame14",
    "frame305",
    "nounGroupCommunity",
    "frame178",
    "frame306",
    "nounChoiceOfferChoice",
    "group2",
    "group3",
    "frame13",
    "frame307",
    "frame177",
    "frame308",
    "nounSignUp3590202"
  ],
  frame176: ["frame176", "frame304"],
  frame304: ["frame304"],
  frame14: ["frame14", "frame305", "nounGroupCommunity"],
  frame305: ["frame305", "nounGroupCommunity"],
  nounGroupCommunity: ["nounGroupCommunity"],
  frame178: [
    "frame178",
    "frame306",
    "nounChoiceOfferChoice",
    "group2",
    "group3"
  ],
  frame306: ["frame306", "nounChoiceOfferChoice", "group2", "group3"],
  nounChoiceOfferChoice: ["nounChoiceOfferChoice", "group2", "group3"],
  group2: ["group2", "group3"],
  group3: ["group3"],
  frame13: ["frame13", "frame307"],
  frame307: ["frame307"],
  frame177: ["frame177", "frame308", "nounSignUp3590202"],
  frame308: ["frame308", "nounSignUp3590202"],
  nounSignUp3590202: ["nounSignUp3590202"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  group14: "div";
  btn10: "a";
  group41: "div";
  frame176: "div";
  frame304: "div";
  frame14: "div";
  frame305: "div";
  nounGroupCommunity: "div";
  frame178: "div";
  frame306: "div";
  nounChoiceOfferChoice: "div";
  group2: "div";
  group3: "div";
  frame13: "div";
  frame307: "div";
  frame177: "div";
  frame308: "div";
  nounSignUp3590202: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPodcasterPerks5__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPodcasterPerks5__VariantsArgs;
    args?: PlasmicPodcasterPerks5__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPodcasterPerks5__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPodcasterPerks5__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPodcasterPerks5__ArgProps,
      internalVariantPropNames: PlasmicPodcasterPerks5__VariantProps
    });

    return PlasmicPodcasterPerks5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPodcasterPerks5";
  } else {
    func.displayName = `PlasmicPodcasterPerks5.${nodeName}`;
  }
  return func;
}

export const PlasmicPodcasterPerks5 = Object.assign(
  // Top-level PlasmicPodcasterPerks5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group14: makeNodeComponent("group14"),
    btn10: makeNodeComponent("btn10"),
    group41: makeNodeComponent("group41"),
    frame176: makeNodeComponent("frame176"),
    frame304: makeNodeComponent("frame304"),
    frame14: makeNodeComponent("frame14"),
    frame305: makeNodeComponent("frame305"),
    nounGroupCommunity: makeNodeComponent("nounGroupCommunity"),
    frame178: makeNodeComponent("frame178"),
    frame306: makeNodeComponent("frame306"),
    nounChoiceOfferChoice: makeNodeComponent("nounChoiceOfferChoice"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    frame13: makeNodeComponent("frame13"),
    frame307: makeNodeComponent("frame307"),
    frame177: makeNodeComponent("frame177"),
    frame308: makeNodeComponent("frame308"),
    nounSignUp3590202: makeNodeComponent("nounSignUp3590202"),

    // Metadata about props expected for PlasmicPodcasterPerks5
    internalVariantProps: PlasmicPodcasterPerks5__VariantProps,
    internalArgProps: PlasmicPodcasterPerks5__ArgProps
  }
);

export default PlasmicPodcasterPerks5;
/* prettier-ignore-end */
