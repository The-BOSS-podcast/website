// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: CNgHl0Fr8c
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarRes from "../../NavBarRes"; // plasmic-import: hi-mET-ngC/component
import GuestsSplash1 from "../../GuestsSplash1"; // plasmic-import: RKCey6GcNr/component
import GuestsForbes2 from "../../GuestsForbes2"; // plasmic-import: wVcmaRVYZ7_/component
import GuestShowcase3 from "../../GuestShowcase3"; // plasmic-import: MBqqigu2NBW/component
import GuestsBrands4 from "../../GuestsBrands4"; // plasmic-import: cLvU_l0Kaq/component
import GuestTestimonial5 from "../../GuestTestimonial5"; // plasmic-import: nVIO1bPvnki/component
import FooterComDesk from "../../FooterComDesk"; // plasmic-import: H9tCPDoO68/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicGuests.module.css"; // plasmic-import: CNgHl0Fr8c/css

export type PlasmicGuests__VariantMembers = {};

export type PlasmicGuests__VariantsArgs = {};
type VariantPropType = keyof PlasmicGuests__VariantsArgs;
export const PlasmicGuests__VariantProps = new Array<VariantPropType>();

export type PlasmicGuests__ArgsType = {};
type ArgPropType = keyof PlasmicGuests__ArgsType;
export const PlasmicGuests__ArgProps = new Array<ArgPropType>();

export type PlasmicGuests__OverridesType = {
  root?: p.Flex<"div">;
  navBarRes?: p.Flex<typeof NavBarRes>;
  guestsApprovedDark?: p.Flex<"div">;
  guestsSplash1?: p.Flex<typeof GuestsSplash1>;
  guestsForbes2?: p.Flex<typeof GuestsForbes2>;
  guestShowcase3?: p.Flex<typeof GuestShowcase3>;
  guestsBrands4?: p.Flex<typeof GuestsBrands4>;
  guestTestimonial5?: p.Flex<typeof GuestTestimonial5>;
  footerComDesk?: p.Flex<typeof FooterComDesk>;
};

export interface DefaultGuestsProps {}

export const defaultGuests__Args: Partial<PlasmicGuests__ArgsType> = {};

function PlasmicGuests__RenderFunc(props: {
  variants: PlasmicGuests__VariantsArgs;
  args: PlasmicGuests__ArgsType;
  overrides: PlasmicGuests__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultGuests__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Guests"}</title>
        <meta key="og:title" property="og:title" content={"Guests"} />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "The Balls Of Steel Show hosts unheard entrepreneurial stories and spectacular business mindset of every entrepreneur in the crowd"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBarRes
            data-plasmic-name={"navBarRes"}
            data-plasmic-override={overrides.navBarRes}
            className={classNames("__wab_instance", sty.navBarRes)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"guestsApprovedDark"}
              data-plasmic-override={overrides.guestsApprovedDark}
              className={classNames(projectcss.all, sty.guestsApprovedDark)}
            >
              <GuestsSplash1
                data-plasmic-name={"guestsSplash1"}
                data-plasmic-override={overrides.guestsSplash1}
                className={classNames("__wab_instance", sty.guestsSplash1)}
              />

              <GuestsForbes2
                data-plasmic-name={"guestsForbes2"}
                data-plasmic-override={overrides.guestsForbes2}
                className={classNames("__wab_instance", sty.guestsForbes2)}
              />

              <GuestShowcase3
                data-plasmic-name={"guestShowcase3"}
                data-plasmic-override={overrides.guestShowcase3}
                className={classNames("__wab_instance", sty.guestShowcase3)}
              />

              <GuestsBrands4
                data-plasmic-name={"guestsBrands4"}
                data-plasmic-override={overrides.guestsBrands4}
                className={classNames("__wab_instance", sty.guestsBrands4)}
              />

              <GuestTestimonial5
                data-plasmic-name={"guestTestimonial5"}
                data-plasmic-override={overrides.guestTestimonial5}
                className={classNames("__wab_instance", sty.guestTestimonial5)}
              />
            </div>
          ) : null}

          <FooterComDesk
            data-plasmic-name={"footerComDesk"}
            data-plasmic-override={overrides.footerComDesk}
            className={classNames("__wab_instance", sty.footerComDesk)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarRes",
    "guestsApprovedDark",
    "guestsSplash1",
    "guestsForbes2",
    "guestShowcase3",
    "guestsBrands4",
    "guestTestimonial5",
    "footerComDesk"
  ],
  navBarRes: ["navBarRes"],
  guestsApprovedDark: [
    "guestsApprovedDark",
    "guestsSplash1",
    "guestsForbes2",
    "guestShowcase3",
    "guestsBrands4",
    "guestTestimonial5"
  ],
  guestsSplash1: ["guestsSplash1"],
  guestsForbes2: ["guestsForbes2"],
  guestShowcase3: ["guestShowcase3"],
  guestsBrands4: ["guestsBrands4"],
  guestTestimonial5: ["guestTestimonial5"],
  footerComDesk: ["footerComDesk"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarRes: typeof NavBarRes;
  guestsApprovedDark: "div";
  guestsSplash1: typeof GuestsSplash1;
  guestsForbes2: typeof GuestsForbes2;
  guestShowcase3: typeof GuestShowcase3;
  guestsBrands4: typeof GuestsBrands4;
  guestTestimonial5: typeof GuestTestimonial5;
  footerComDesk: typeof FooterComDesk;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGuests__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGuests__VariantsArgs;
    args?: PlasmicGuests__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGuests__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGuests__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGuests__ArgProps,
      internalVariantPropNames: PlasmicGuests__VariantProps
    });

    return PlasmicGuests__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGuests";
  } else {
    func.displayName = `PlasmicGuests.${nodeName}`;
  }
  return func;
}

export const PlasmicGuests = Object.assign(
  // Top-level PlasmicGuests renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarRes: makeNodeComponent("navBarRes"),
    guestsApprovedDark: makeNodeComponent("guestsApprovedDark"),
    guestsSplash1: makeNodeComponent("guestsSplash1"),
    guestsForbes2: makeNodeComponent("guestsForbes2"),
    guestShowcase3: makeNodeComponent("guestShowcase3"),
    guestsBrands4: makeNodeComponent("guestsBrands4"),
    guestTestimonial5: makeNodeComponent("guestTestimonial5"),
    footerComDesk: makeNodeComponent("footerComDesk"),

    // Metadata about props expected for PlasmicGuests
    internalVariantProps: PlasmicGuests__VariantProps,
    internalArgProps: PlasmicGuests__ArgProps
  }
);

export default PlasmicGuests;
/* prettier-ignore-end */
