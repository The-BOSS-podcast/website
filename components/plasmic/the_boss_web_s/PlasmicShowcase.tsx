// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: l6kubVOZHc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarRes from "../../NavBarRes"; // plasmic-import: hi-mET-ngC/component
import FooterComDesk from "../../FooterComDesk"; // plasmic-import: H9tCPDoO68/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicShowcase.module.css"; // plasmic-import: l6kubVOZHc/css

export type PlasmicShowcase__VariantMembers = {};

export type PlasmicShowcase__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowcase__VariantsArgs;
export const PlasmicShowcase__VariantProps = new Array<VariantPropType>();

export type PlasmicShowcase__ArgsType = {};
type ArgPropType = keyof PlasmicShowcase__ArgsType;
export const PlasmicShowcase__ArgProps = new Array<ArgPropType>();

export type PlasmicShowcase__OverridesType = {
  root?: p.Flex<"div">;
  navBarRes?: p.Flex<typeof NavBarRes>;
  showcase?: p.Flex<"div">;
  whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds?: p.Flex<"div">;
  footerComDesk?: p.Flex<typeof FooterComDesk>;
};

export interface DefaultShowcaseProps {}

export const defaultShowcase__Args: Partial<PlasmicShowcase__ArgsType> = {};

function PlasmicShowcase__RenderFunc(props: {
  variants: PlasmicShowcase__VariantsArgs;
  args: PlasmicShowcase__ArgsType;
  overrides: PlasmicShowcase__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultShowcase__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Podcast Showcase"}</title>
        <meta key="og:title" property="og:title" content={"Podcast Showcase"} />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "The BOSS Media certifies podcasts before taking them to advertisers for podcast monetization."
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBarRes
            data-plasmic-name={"navBarRes"}
            data-plasmic-override={overrides.navBarRes}
            className={classNames("__wab_instance", sty.navBarRes)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"showcase"}
              data-plasmic-override={overrides.showcase}
              className={classNames(projectcss.all, sty.showcase)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__l9Sbb)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sj7Pq
                    )}
                  >
                    {"Showcase"}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__teRL)}>
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kOvda)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Uqa1
                        )}
                      >
                        {"How BOSS started?"}
                      </div>

                      <div
                        data-plasmic-name={
                          "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
                        }
                        data-plasmic-override={
                          overrides.whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds
                        )}
                      >
                        {
                          "While running our podcast, The Balls Of Steel Show – Dhandho Ni Soch, we encountered several problems with podcast monetization, advertisement and sponsorships. So, there we were, building our bridge to connect two extreme ends. "
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Ze0Q
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__udIo9
                        )}
                      >
                        {"What we do"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__emRkv
                        )}
                      >
                        {
                          "Empowering Podcasters by connecting them with Brands, The BOSS is filling the gap between podcast monetization and advertisement. Podcasters monetize their content and brands advertise for relevant audiences through The BOSS Bridge. \n\nThe Balls Of Steel Show also provides end-to-end podcasting services, beginning from conceptualization to distribution of branded podcasts. Through our podcast 'The Balls Of Steel Show - Dhandho Ni Soch', we’re bringing out the unheard stories of Indian entrepreneurs and their business mindset."
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </div>
          ) : null}

          <FooterComDesk
            data-plasmic-name={"footerComDesk"}
            data-plasmic-override={overrides.footerComDesk}
            className={classNames("__wab_instance", sty.footerComDesk)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarRes",
    "showcase",
    "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds",
    "footerComDesk"
  ],
  navBarRes: ["navBarRes"],
  showcase: [
    "showcase",
    "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
  ],
  whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds:
    [
      "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
    ],
  footerComDesk: ["footerComDesk"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarRes: typeof NavBarRes;
  showcase: "div";
  whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds: "div";
  footerComDesk: typeof FooterComDesk;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowcase__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowcase__VariantsArgs;
    args?: PlasmicShowcase__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowcase__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShowcase__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShowcase__ArgProps,
      internalVariantPropNames: PlasmicShowcase__VariantProps
    });

    return PlasmicShowcase__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowcase";
  } else {
    func.displayName = `PlasmicShowcase.${nodeName}`;
  }
  return func;
}

export const PlasmicShowcase = Object.assign(
  // Top-level PlasmicShowcase renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarRes: makeNodeComponent("navBarRes"),
    showcase: makeNodeComponent("showcase"),
    whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds:
      makeNodeComponent(
        "whileRunningOurPodcastTheBallsOfSteelShowDhandhoNiSochWeEncounteredSeveralProblemsWithPodcastMonetizationAdvertisementAndSponsorshipsSoThereWeWereBuildingOurBridgeToConnectTwoExtremeEnds"
      ),
    footerComDesk: makeNodeComponent("footerComDesk"),

    // Metadata about props expected for PlasmicShowcase
    internalVariantProps: PlasmicShowcase__VariantProps,
    internalArgProps: PlasmicShowcase__ArgProps
  }
);

export default PlasmicShowcase;
/* prettier-ignore-end */
