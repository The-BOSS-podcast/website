// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 9jxA25xft25
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicPodcasterVideo2.module.css"; // plasmic-import: 9jxA25xft25/css

import PlayArrowIcon from "./icons/PlasmicIcon__PlayArrow"; // plasmic-import: Th2-FWCfLs/icon

export type PlasmicPodcasterVideo2__VariantMembers = {};

export type PlasmicPodcasterVideo2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPodcasterVideo2__VariantsArgs;
export const PlasmicPodcasterVideo2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPodcasterVideo2__ArgsType = {};
type ArgPropType = keyof PlasmicPodcasterVideo2__ArgsType;
export const PlasmicPodcasterVideo2__ArgProps = new Array<ArgPropType>();

export type PlasmicPodcasterVideo2__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  freeBox?: p.Flex<"div">;
  videoBoss?: p.Flex<"div">;
  rectangle34?: p.Flex<"div">;
  rectangle35?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  group8?: p.Flex<"div">;
  frame280?: p.Flex<"div">;
  btn3?: p.Flex<"div">;
  btn4?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultPodcasterVideo2Props {
  className?: string;
}

export const defaultPodcasterVideo2__Args: Partial<PlasmicPodcasterVideo2__ArgsType> =
  {};

function PlasmicPodcasterVideo2__RenderFunc(props: {
  variants: PlasmicPodcasterVideo2__VariantsArgs;
  args: PlasmicPodcasterVideo2__ArgsType;
  overrides: PlasmicPodcasterVideo2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultPodcasterVideo2__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__x34S
          )}
        >
          {"Polish Your Podcast"}
        </div>
      </SectionHeading>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"videoBoss"}
            data-plasmic-override={overrides.videoBoss}
            className={classNames(projectcss.all, sty.videoBoss)}
          >
            {true ? (
              <div
                data-plasmic-name={"rectangle34"}
                data-plasmic-override={overrides.rectangle34}
                className={classNames(projectcss.all, sty.rectangle34)}
              />
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"rectangle35"}
                data-plasmic-override={overrides.rectangle35}
                className={classNames(projectcss.all, sty.rectangle35)}
              />
            ) : null}

            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <PlayArrowIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"group8"}
            data-plasmic-override={overrides.group8}
            hasGap={true}
            className={classNames(projectcss.all, sty.group8)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h28Vb
              )}
            >
              {"NATIVE ADVERTISEMENT"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5KSuf
              )}
            >
              {"Join The BOSS and We Will Help You in Podcast Monetization"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kO4FM
              )}
            >
              {
                "The BOSS is the bridge that connects you to varied advertisers willing to promote their brands on your podcast. We will also help you to manage your podcast at every step from content conceptualization to its distribution. Making your podcasting career easier so that you can focus on creating amazing podcasts."
              }
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame280"}
              data-plasmic-override={overrides.frame280}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame280)}
            >
              {false ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"btn3"}
                  data-plasmic-override={overrides.btn3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.btn3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s2SNt
                    )}
                  >
                    {"Sign-Up with BOSS"}
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={p.PlasmicLink}
                data-plasmic-name={"btn4"}
                data-plasmic-override={overrides.btn4}
                hasGap={true}
                className={classNames(projectcss.all, projectcss.a, sty.btn4)}
                component={Link}
                href={
                  "https://www.calendar.com/the-balls-of-steel-show/" as const
                }
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t8MU
                  )}
                >
                  {"Free Consultation Call"}
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "freeBox",
    "videoBoss",
    "rectangle34",
    "rectangle35",
    "frame2",
    "svg",
    "group8",
    "frame280",
    "btn3",
    "btn4"
  ],
  sectionHeading: ["sectionHeading"],
  freeBox: [
    "freeBox",
    "videoBoss",
    "rectangle34",
    "rectangle35",
    "frame2",
    "svg",
    "group8",
    "frame280",
    "btn3",
    "btn4"
  ],
  videoBoss: ["videoBoss", "rectangle34", "rectangle35", "frame2", "svg"],
  rectangle34: ["rectangle34"],
  rectangle35: ["rectangle35"],
  frame2: ["frame2", "svg"],
  svg: ["svg"],
  group8: ["group8", "frame280", "btn3", "btn4"],
  frame280: ["frame280", "btn3", "btn4"],
  btn3: ["btn3"],
  btn4: ["btn4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  freeBox: "div";
  videoBoss: "div";
  rectangle34: "div";
  rectangle35: "div";
  frame2: "div";
  svg: "svg";
  group8: "div";
  frame280: "div";
  btn3: "div";
  btn4: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPodcasterVideo2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPodcasterVideo2__VariantsArgs;
    args?: PlasmicPodcasterVideo2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPodcasterVideo2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPodcasterVideo2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPodcasterVideo2__ArgProps,
      internalVariantPropNames: PlasmicPodcasterVideo2__VariantProps
    });

    return PlasmicPodcasterVideo2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPodcasterVideo2";
  } else {
    func.displayName = `PlasmicPodcasterVideo2.${nodeName}`;
  }
  return func;
}

export const PlasmicPodcasterVideo2 = Object.assign(
  // Top-level PlasmicPodcasterVideo2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    freeBox: makeNodeComponent("freeBox"),
    videoBoss: makeNodeComponent("videoBoss"),
    rectangle34: makeNodeComponent("rectangle34"),
    rectangle35: makeNodeComponent("rectangle35"),
    frame2: makeNodeComponent("frame2"),
    svg: makeNodeComponent("svg"),
    group8: makeNodeComponent("group8"),
    frame280: makeNodeComponent("frame280"),
    btn3: makeNodeComponent("btn3"),
    btn4: makeNodeComponent("btn4"),

    // Metadata about props expected for PlasmicPodcasterVideo2
    internalVariantProps: PlasmicPodcasterVideo2__VariantProps,
    internalArgProps: PlasmicPodcasterVideo2__ArgProps
  }
);

export default PlasmicPodcasterVideo2;
/* prettier-ignore-end */
