// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: z18WjvWRZTl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicAdvPodPlat7.module.css"; // plasmic-import: z18WjvWRZTl/css

import Group7Icon from "./icons/PlasmicIcon__Group7"; // plasmic-import: AiziDyWYriU/icon
import Group8Icon from "./icons/PlasmicIcon__Group8"; // plasmic-import: TKRBI8johrl/icon
import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: 43qaydEIItB/icon
import Group10Icon from "./icons/PlasmicIcon__Group10"; // plasmic-import: al1lxnr7Jpi/icon
import ListenonIcon from "./icons/PlasmicIcon__Listenon"; // plasmic-import: 9qHkQyObq/icon
import Fill23Icon from "./icons/PlasmicIcon__Fill23"; // plasmic-import: n4y-VnBnydf/icon
import GlyphIcon from "./icons/PlasmicIcon__Glyph"; // plasmic-import: c2XJFCFE23j/icon
import Group29Icon from "./icons/PlasmicIcon__Group29"; // plasmic-import: pjTvNts4WGv/icon

export type PlasmicAdvPodPlat7__VariantMembers = {};

export type PlasmicAdvPodPlat7__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdvPodPlat7__VariantsArgs;
export const PlasmicAdvPodPlat7__VariantProps = new Array<VariantPropType>();

export type PlasmicAdvPodPlat7__ArgsType = {};
type ArgPropType = keyof PlasmicAdvPodPlat7__ArgsType;
export const PlasmicAdvPodPlat7__ArgProps = new Array<ArgPropType>();

export type PlasmicAdvPodPlat7__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  freeBox?: p.Flex<"div">;
  frame293?: p.Flex<"div">;
  frame290?: p.Flex<"div">;
  applePodcastsListenBadgeRgb?: p.Flex<"div">;
  us?: p.Flex<"div">;
  xmlid632?: p.Flex<"div">;
  xmlid648?: p.Flex<"div">;
  enGooglePodcastsBadge?: p.Flex<"div">;
  enGooglePodcastsBadge2?: p.Flex<"div">;
  podcastIconFinal?: p.Flex<"div">;
  spotifyPodcastBadgeBlkGrn330X80?: p.Flex<"div">;
  spotifyPodcastBadgeBlkGrn330X802?: p.Flex<"div">;
  frame291?: p.Flex<"div">;
  frame289?: p.Flex<"div">;
  hubhopper09?: p.Flex<"div">;
  jioSaavn?: p.Flex<"div">;
  frame286?: p.Flex<"div">;
  overcast?: p.Flex<"div">;
  ganna?: p.Flex<"div">;
  frame287?: p.Flex<"div">;
  deezerLogo?: p.Flex<"div">;
  frame285?: p.Flex<"div">;
  kukuFm?: p.Flex<"div">;
  frame292?: p.Flex<"div">;
  redRoundelBlackTextHorizontal?: p.Flex<"div">;
  lockupsRedRoundelBlackTextHorizontal?: p.Flex<"div">;
  lockupsRedRoundelBlackTextHorizontal2?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  pocketCastsRoundelRed?: p.Flex<"div">;
  group3?: p.Flex<"div">;
  stitcherListenBadgeColorDarkBg?: p.Flex<"div">;
};

export interface DefaultAdvPodPlat7Props {
  className?: string;
}

function PlasmicAdvPodPlat7__RenderFunc(props: {
  variants: PlasmicAdvPodPlat7__VariantsArgs;
  args: PlasmicAdvPodPlat7__ArgsType;
  overrides: PlasmicAdvPodPlat7__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ehE7
          )}
        >
          {"Youâ€™ll Reach Everywhere"}
        </div>
      </SectionHeading>

      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__szpMh
            )}
          >
            {"More The Platforms, More The Reach"}
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame293"}
        data-plasmic-override={overrides.frame293}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame293)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame290"}
          data-plasmic-override={overrides.frame290}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame290)}
        >
          <div className={classNames(projectcss.all, sty.column__nHwL0)}>
            <div
              data-plasmic-name={"applePodcastsListenBadgeRgb"}
              data-plasmic-override={overrides.applePodcastsListenBadgeRgb}
              className={classNames(
                projectcss.all,
                sty.applePodcastsListenBadgeRgb
              )}
            >
              <div
                data-plasmic-name={"us"}
                data-plasmic-override={overrides.us}
                className={classNames(projectcss.all, sty.us)}
              >
                <div
                  data-plasmic-name={"xmlid632"}
                  data-plasmic-override={overrides.xmlid632}
                  className={classNames(projectcss.all, sty.xmlid632)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__inSi)}
                    displayHeight={"31px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"31px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/xmlid662.svg",
                      fullWidth: 31,
                      fullHeight: 31,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    data-plasmic-name={"xmlid648"}
                    data-plasmic-override={overrides.xmlid648}
                    className={classNames(projectcss.all, sty.xmlid648)}
                  >
                    <Group7Icon
                      className={classNames(projectcss.all, sty.svg__dYFqC)}
                      role={"img"}
                    />
                  </div>
                </div>

                <Group8Icon
                  className={classNames(projectcss.all, sty.svg__p0JVl)}
                  role={"img"}
                />

                <Group9Icon
                  className={classNames(projectcss.all, sty.svg__pYLb)}
                  role={"img"}
                />
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__nvTM)}>
            <div
              data-plasmic-name={"enGooglePodcastsBadge"}
              data-plasmic-override={overrides.enGooglePodcastsBadge}
              className={classNames(projectcss.all, sty.enGooglePodcastsBadge)}
            >
              <div
                data-plasmic-name={"enGooglePodcastsBadge2"}
                data-plasmic-override={overrides.enGooglePodcastsBadge2}
                className={classNames(
                  projectcss.all,
                  sty.enGooglePodcastsBadge2
                )}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sankC)}
                  displayHeight={"47.292px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"188.766px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/rectangleSolid.svg",
                    fullWidth: 188.766,
                    fullHeight: 47.292,
                    aspectRatio: 3.897959
                  }}
                />

                <div
                  data-plasmic-name={"podcastIconFinal"}
                  data-plasmic-override={overrides.podcastIconFinal}
                  className={classNames(projectcss.all, sty.podcastIconFinal)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__eppoy)}
                    displayHeight={"34.105px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"34.105px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/logoPodcasts192Px.svg",
                      fullWidth: 34.105,
                      fullHeight: 34.105,
                      aspectRatio: 1
                    }}
                  />
                </div>

                <Group10Icon
                  className={classNames(projectcss.all, sty.svg__o4X5J)}
                  role={"img"}
                />

                <ListenonIcon
                  className={classNames(projectcss.all, sty.svg___3P279)}
                  role={"img"}
                />
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__risuu)}>
            <div
              data-plasmic-name={"spotifyPodcastBadgeBlkGrn330X80"}
              data-plasmic-override={overrides.spotifyPodcastBadgeBlkGrn330X80}
              className={classNames(
                projectcss.all,
                sty.spotifyPodcastBadgeBlkGrn330X80
              )}
            >
              <div
                data-plasmic-name={"spotifyPodcastBadgeBlkGrn330X802"}
                data-plasmic-override={
                  overrides.spotifyPodcastBadgeBlkGrn330X802
                }
                className={classNames(
                  projectcss.all,
                  sty.spotifyPodcastBadgeBlkGrn330X802
                )}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__mZcXv)}
                  displayHeight={"47.399px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"197.4px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/group22.svg",
                    fullWidth: 197.4,
                    fullHeight: 47.399,
                    aspectRatio: 4.125
                  }}
                />
              </div>
            </div>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame291"}
          data-plasmic-override={overrides.frame291}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame291)}
        >
          <div className={classNames(projectcss.all, sty.column__gbjXc)}>
            <div
              data-plasmic-name={"frame289"}
              data-plasmic-override={overrides.frame289}
              className={classNames(projectcss.all, sty.frame289)}
            >
              <div
                data-plasmic-name={"hubhopper09"}
                data-plasmic-override={overrides.hubhopper09}
                className={classNames(projectcss.all, sty.hubhopper09)}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column___59U4J)}>
            <div
              data-plasmic-name={"jioSaavn"}
              data-plasmic-override={overrides.jioSaavn}
              className={classNames(projectcss.all, sty.jioSaavn)}
            />
          </div>

          <div className={classNames(projectcss.all, sty.column__bOzCj)}>
            <div
              data-plasmic-name={"frame286"}
              data-plasmic-override={overrides.frame286}
              className={classNames(projectcss.all, sty.frame286)}
            >
              <div
                data-plasmic-name={"overcast"}
                data-plasmic-override={overrides.overcast}
                className={classNames(projectcss.all, sty.overcast)}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__lBmZl)}>
            <div
              data-plasmic-name={"ganna"}
              data-plasmic-override={overrides.ganna}
              className={classNames(projectcss.all, sty.ganna)}
            />
          </div>

          <div className={classNames(projectcss.all, sty.column__zMEyD)}>
            <div
              data-plasmic-name={"frame287"}
              data-plasmic-override={overrides.frame287}
              className={classNames(projectcss.all, sty.frame287)}
            >
              <div
                data-plasmic-name={"deezerLogo"}
                data-plasmic-override={overrides.deezerLogo}
                className={classNames(projectcss.all, sty.deezerLogo)}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__xuCsH)}>
            <div
              data-plasmic-name={"frame285"}
              data-plasmic-override={overrides.frame285}
              className={classNames(projectcss.all, sty.frame285)}
            >
              <div
                data-plasmic-name={"kukuFm"}
                data-plasmic-override={overrides.kukuFm}
                className={classNames(projectcss.all, sty.kukuFm)}
              />
            </div>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame292"}
          data-plasmic-override={overrides.frame292}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame292)}
        >
          <div className={classNames(projectcss.all, sty.column__jO0E9)}>
            <div
              data-plasmic-name={"redRoundelBlackTextHorizontal"}
              data-plasmic-override={overrides.redRoundelBlackTextHorizontal}
              className={classNames(
                projectcss.all,
                sty.redRoundelBlackTextHorizontal
              )}
            >
              <div
                data-plasmic-name={"lockupsRedRoundelBlackTextHorizontal"}
                data-plasmic-override={
                  overrides.lockupsRedRoundelBlackTextHorizontal
                }
                className={classNames(
                  projectcss.all,
                  sty.lockupsRedRoundelBlackTextHorizontal
                )}
              >
                <div
                  data-plasmic-name={"lockupsRedRoundelBlackTextHorizontal2"}
                  data-plasmic-override={
                    overrides.lockupsRedRoundelBlackTextHorizontal2
                  }
                  className={classNames(
                    projectcss.all,
                    sty.lockupsRedRoundelBlackTextHorizontal2
                  )}
                >
                  <div
                    data-plasmic-name={"group2"}
                    data-plasmic-override={overrides.group2}
                    className={classNames(projectcss.all, sty.group2)}
                  >
                    <div
                      data-plasmic-name={"pocketCastsRoundelRed"}
                      data-plasmic-override={overrides.pocketCastsRoundelRed}
                      className={classNames(
                        projectcss.all,
                        sty.pocketCastsRoundelRed
                      )}
                    >
                      <div
                        data-plasmic-name={"group3"}
                        data-plasmic-override={overrides.group3}
                        className={classNames(projectcss.all, sty.group3)}
                      >
                        <Fill23Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1ZJiP
                          )}
                          role={"img"}
                        />

                        <GlyphIcon
                          className={classNames(projectcss.all, sty.svg__ozM4)}
                          role={"img"}
                        />
                      </div>
                    </div>

                    <Group29Icon
                      className={classNames(projectcss.all, sty.svg__uuOx2)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__hRn5)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__fDnTd)}
              displayHeight={"47.948px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"220px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/the_boss_web_s/images/listenOnBreakerBlue.svg",
                fullWidth: 220,
                fullHeight: 47.948,
                aspectRatio: 4.583333
              }}
            />
          </div>

          <div className={classNames(projectcss.all, sty.column___99Jh8)}>
            <div
              data-plasmic-name={"stitcherListenBadgeColorDarkBg"}
              data-plasmic-override={overrides.stitcherListenBadgeColorDarkBg}
              className={classNames(
                projectcss.all,
                sty.stitcherListenBadgeColorDarkBg
              )}
            />
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "freeBox",
    "frame293",
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802",
    "frame291",
    "frame289",
    "hubhopper09",
    "jioSaavn",
    "frame286",
    "overcast",
    "ganna",
    "frame287",
    "deezerLogo",
    "frame285",
    "kukuFm",
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "stitcherListenBadgeColorDarkBg"
  ],
  sectionHeading: ["sectionHeading"],
  freeBox: ["freeBox"],
  frame293: [
    "frame293",
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802",
    "frame291",
    "frame289",
    "hubhopper09",
    "jioSaavn",
    "frame286",
    "overcast",
    "ganna",
    "frame287",
    "deezerLogo",
    "frame285",
    "kukuFm",
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "stitcherListenBadgeColorDarkBg"
  ],
  frame290: [
    "frame290",
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648",
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal",
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802"
  ],
  applePodcastsListenBadgeRgb: [
    "applePodcastsListenBadgeRgb",
    "us",
    "xmlid632",
    "xmlid648"
  ],
  us: ["us", "xmlid632", "xmlid648"],
  xmlid632: ["xmlid632", "xmlid648"],
  xmlid648: ["xmlid648"],
  enGooglePodcastsBadge: [
    "enGooglePodcastsBadge",
    "enGooglePodcastsBadge2",
    "podcastIconFinal"
  ],
  enGooglePodcastsBadge2: ["enGooglePodcastsBadge2", "podcastIconFinal"],
  podcastIconFinal: ["podcastIconFinal"],
  spotifyPodcastBadgeBlkGrn330X80: [
    "spotifyPodcastBadgeBlkGrn330X80",
    "spotifyPodcastBadgeBlkGrn330X802"
  ],
  spotifyPodcastBadgeBlkGrn330X802: ["spotifyPodcastBadgeBlkGrn330X802"],
  frame291: [
    "frame291",
    "frame289",
    "hubhopper09",
    "jioSaavn",
    "frame286",
    "overcast",
    "ganna",
    "frame287",
    "deezerLogo",
    "frame285",
    "kukuFm"
  ],
  frame289: ["frame289", "hubhopper09"],
  hubhopper09: ["hubhopper09"],
  jioSaavn: ["jioSaavn"],
  frame286: ["frame286", "overcast"],
  overcast: ["overcast"],
  ganna: ["ganna"],
  frame287: ["frame287", "deezerLogo"],
  deezerLogo: ["deezerLogo"],
  frame285: ["frame285", "kukuFm"],
  kukuFm: ["kukuFm"],
  frame292: [
    "frame292",
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3",
    "stitcherListenBadgeColorDarkBg"
  ],
  redRoundelBlackTextHorizontal: [
    "redRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3"
  ],
  lockupsRedRoundelBlackTextHorizontal: [
    "lockupsRedRoundelBlackTextHorizontal",
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3"
  ],
  lockupsRedRoundelBlackTextHorizontal2: [
    "lockupsRedRoundelBlackTextHorizontal2",
    "group2",
    "pocketCastsRoundelRed",
    "group3"
  ],
  group2: ["group2", "pocketCastsRoundelRed", "group3"],
  pocketCastsRoundelRed: ["pocketCastsRoundelRed", "group3"],
  group3: ["group3"],
  stitcherListenBadgeColorDarkBg: ["stitcherListenBadgeColorDarkBg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  freeBox: "div";
  frame293: "div";
  frame290: "div";
  applePodcastsListenBadgeRgb: "div";
  us: "div";
  xmlid632: "div";
  xmlid648: "div";
  enGooglePodcastsBadge: "div";
  enGooglePodcastsBadge2: "div";
  podcastIconFinal: "div";
  spotifyPodcastBadgeBlkGrn330X80: "div";
  spotifyPodcastBadgeBlkGrn330X802: "div";
  frame291: "div";
  frame289: "div";
  hubhopper09: "div";
  jioSaavn: "div";
  frame286: "div";
  overcast: "div";
  ganna: "div";
  frame287: "div";
  deezerLogo: "div";
  frame285: "div";
  kukuFm: "div";
  frame292: "div";
  redRoundelBlackTextHorizontal: "div";
  lockupsRedRoundelBlackTextHorizontal: "div";
  lockupsRedRoundelBlackTextHorizontal2: "div";
  group2: "div";
  pocketCastsRoundelRed: "div";
  group3: "div";
  stitcherListenBadgeColorDarkBg: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdvPodPlat7__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdvPodPlat7__VariantsArgs;
    args?: PlasmicAdvPodPlat7__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdvPodPlat7__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdvPodPlat7__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdvPodPlat7__ArgProps,
          internalVariantPropNames: PlasmicAdvPodPlat7__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAdvPodPlat7__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvPodPlat7";
  } else {
    func.displayName = `PlasmicAdvPodPlat7.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvPodPlat7 = Object.assign(
  // Top-level PlasmicAdvPodPlat7 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    freeBox: makeNodeComponent("freeBox"),
    frame293: makeNodeComponent("frame293"),
    frame290: makeNodeComponent("frame290"),
    applePodcastsListenBadgeRgb: makeNodeComponent(
      "applePodcastsListenBadgeRgb"
    ),
    us: makeNodeComponent("us"),
    xmlid632: makeNodeComponent("xmlid632"),
    xmlid648: makeNodeComponent("xmlid648"),
    enGooglePodcastsBadge: makeNodeComponent("enGooglePodcastsBadge"),
    enGooglePodcastsBadge2: makeNodeComponent("enGooglePodcastsBadge2"),
    podcastIconFinal: makeNodeComponent("podcastIconFinal"),
    spotifyPodcastBadgeBlkGrn330X80: makeNodeComponent(
      "spotifyPodcastBadgeBlkGrn330X80"
    ),
    spotifyPodcastBadgeBlkGrn330X802: makeNodeComponent(
      "spotifyPodcastBadgeBlkGrn330X802"
    ),
    frame291: makeNodeComponent("frame291"),
    frame289: makeNodeComponent("frame289"),
    hubhopper09: makeNodeComponent("hubhopper09"),
    jioSaavn: makeNodeComponent("jioSaavn"),
    frame286: makeNodeComponent("frame286"),
    overcast: makeNodeComponent("overcast"),
    ganna: makeNodeComponent("ganna"),
    frame287: makeNodeComponent("frame287"),
    deezerLogo: makeNodeComponent("deezerLogo"),
    frame285: makeNodeComponent("frame285"),
    kukuFm: makeNodeComponent("kukuFm"),
    frame292: makeNodeComponent("frame292"),
    redRoundelBlackTextHorizontal: makeNodeComponent(
      "redRoundelBlackTextHorizontal"
    ),
    lockupsRedRoundelBlackTextHorizontal: makeNodeComponent(
      "lockupsRedRoundelBlackTextHorizontal"
    ),
    lockupsRedRoundelBlackTextHorizontal2: makeNodeComponent(
      "lockupsRedRoundelBlackTextHorizontal2"
    ),
    group2: makeNodeComponent("group2"),
    pocketCastsRoundelRed: makeNodeComponent("pocketCastsRoundelRed"),
    group3: makeNodeComponent("group3"),
    stitcherListenBadgeColorDarkBg: makeNodeComponent(
      "stitcherListenBadgeColorDarkBg"
    ),

    // Metadata about props expected for PlasmicAdvPodPlat7
    internalVariantProps: PlasmicAdvPodPlat7__VariantProps,
    internalArgProps: PlasmicAdvPodPlat7__ArgProps
  }
);

export default PlasmicAdvPodPlat7;
/* prettier-ignore-end */
