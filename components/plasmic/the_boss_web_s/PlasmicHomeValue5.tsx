// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: fuEyF9DLZnO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicHomeValue5.module.css"; // plasmic-import: fuEyF9DLZnO/css

import Line2Icon from "./icons/PlasmicIcon__Line2"; // plasmic-import: sTxujBbJGbB/icon
import Emoji2Icon from "./icons/PlasmicIcon__Emoji2"; // plasmic-import: P8W_77m7sot/icon

export type PlasmicHomeValue5__VariantMembers = {};

export type PlasmicHomeValue5__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeValue5__VariantsArgs;
export const PlasmicHomeValue5__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeValue5__ArgsType = {};
type ArgPropType = keyof PlasmicHomeValue5__ArgsType;
export const PlasmicHomeValue5__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeValue5__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  frame15?: p.Flex<"div">;
  frame24?: p.Flex<"div">;
  frame253?: p.Flex<"div">;
  frame252?: p.Flex<"div">;
  frame23?: p.Flex<"div">;
  frame20?: p.Flex<"div">;
  frame18?: p.Flex<"div">;
  frame19?: p.Flex<"div">;
  frame21?: p.Flex<"div">;
  btnCtaPrimary4?: p.Flex<"a"> & Partial<LinkProps>;
  frame16?: p.Flex<"div">;
  frame25?: p.Flex<"div">;
  frame254?: p.Flex<"div">;
  frame255?: p.Flex<"div">;
  frame26?: p.Flex<"div">;
  frame22?: p.Flex<"div">;
  frame27?: p.Flex<"div">;
  frame28?: p.Flex<"div">;
  frame29?: p.Flex<"div">;
  btnCtaPrimary5?: p.Flex<"a"> & Partial<LinkProps>;
  frame30?: p.Flex<"div">;
  frame31?: p.Flex<"div">;
  frame256?: p.Flex<"div">;
  frame257?: p.Flex<"div">;
  frame32?: p.Flex<"div">;
  frame33?: p.Flex<"div">;
  frame34?: p.Flex<"div">;
  frame35?: p.Flex<"div">;
  frame37?: p.Flex<"div">;
  btnCtaPrimary6?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomeValue5Props {
  className?: string;
}

export const defaultHomeValue5__Args: Partial<PlasmicHomeValue5__ArgsType> = {};

function PlasmicHomeValue5__RenderFunc(props: {
  variants: PlasmicHomeValue5__VariantsArgs;
  args: PlasmicHomeValue5__ArgsType;
  overrides: PlasmicHomeValue5__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomeValue5__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___99N3J
          )}
        >
          {"What We Provide"}
        </div>
      </SectionHeading>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__rxSph)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__u969J
            )}
          >
            {"There’s immense value for everyone!"}
          </div>
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ewqSr)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame15"}
            data-plasmic-override={overrides.frame15}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame15)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame24"}
              data-plasmic-override={overrides.frame24}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame24)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame253"}
                data-plasmic-override={overrides.frame253}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame253)}
              >
                <div
                  data-plasmic-name={"frame252"}
                  data-plasmic-override={overrides.frame252}
                  className={classNames(projectcss.all, sty.frame252)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___00Z1C)}
                    displayHeight={"48px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/onlineAdvertising.svg",
                      fullWidth: 48,
                      fullHeight: 48,
                      aspectRatio: 1
                    }}
                  />
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uUwL
                  )}
                >
                  {"For Advertiser"}
                </div>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s3Wy6
                )}
              >
                {
                  "Someone who’s willing to advertise their business on a renowned podcast to increase reach"
                }
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__z2HdY)}>
              <Line2Icon
                className={classNames(projectcss.all, sty.svg__aXpEq)}
                role={"img"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame23"}
              data-plasmic-override={overrides.frame23}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame23)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ypZnc
                )}
              >
                {"Services included:"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame20"}
                data-plasmic-override={overrides.frame20}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame20)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame18"}
                  data-plasmic-override={overrides.frame18}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame18)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kfjtR)}
                    displayHeight={"14px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"14px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/emoji.svg",
                      fullWidth: 14,
                      fullHeight: 14,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__di2Yz
                    )}
                  >
                    {"Annual podcast show"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame19"}
                  data-plasmic-override={overrides.frame19}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame19)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bUc7P)}
                    displayHeight={"14px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"14px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/emoji.svg",
                      fullWidth: 14,
                      fullHeight: 14,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9IFsr
                    )}
                  >
                    {"Podcast advertising"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame21"}
                  data-plasmic-override={overrides.frame21}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame21)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dUTfk)}
                    displayHeight={"14px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"14px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/emoji.svg",
                      fullWidth: 14,
                      fullHeight: 14,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nsKfs
                    )}
                  >
                    {"Social Media marketing"}
                  </div>
                </p.Stack>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3MDg
                )}
              >
                {"and many more..."}
              </div>
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"btnCtaPrimary4"}
              data-plasmic-override={overrides.btnCtaPrimary4}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.btnCtaPrimary4
              )}
              component={Link}
              href={"/advertisers" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xpp0Q
                )}
              >
                {"Learn more"}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame16"}
            data-plasmic-override={overrides.frame16}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame16)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame25"}
              data-plasmic-override={overrides.frame25}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame25)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame254"}
                data-plasmic-override={overrides.frame254}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame254)}
              >
                <div
                  data-plasmic-name={"frame255"}
                  data-plasmic-override={overrides.frame255}
                  className={classNames(projectcss.all, sty.frame255)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ktxle)}
                    displayHeight={"48px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/microphone3.svg",
                      fullWidth: 48,
                      fullHeight: 48,
                      aspectRatio: 1
                    }}
                  />
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h512M
                  )}
                >
                  {"For Podcaster"}
                </div>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t4Qq5
                )}
              >
                {
                  "A podcaster who’s willing to monetise their podcast by featuring paid ads"
                }
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__kj42N)}>
              <Line2Icon
                className={classNames(projectcss.all, sty.svg___2Gk9F)}
                role={"img"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame26"}
              data-plasmic-override={overrides.frame26}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame26)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ydEcS
                )}
              >
                {"Services included:"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame22"}
                data-plasmic-override={overrides.frame22}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame22)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame27"}
                  data-plasmic-override={overrides.frame27}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame27)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vi6G)}
                    displayHeight={"14px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"14px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/emoji.svg",
                      fullWidth: 14,
                      fullHeight: 14,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dTche
                    )}
                  >
                    {"Podcast monetisation"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame28"}
                  data-plasmic-override={overrides.frame28}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame28)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___76MP)}
                    displayHeight={"14px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"14px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/emoji.svg",
                      fullWidth: 14,
                      fullHeight: 14,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8CWe7
                    )}
                  >
                    {"Paid guests"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame29"}
                  data-plasmic-override={overrides.frame29}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame29)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__j0Ytg)}
                    displayHeight={"14px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"14px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/emoji.svg",
                      fullWidth: 14,
                      fullHeight: 14,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kuz5F
                    )}
                  >
                    {"Podcast editing packages"}
                  </div>
                </p.Stack>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mZEpu
                )}
              >
                {"and many more..."}
              </div>
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"btnCtaPrimary5"}
              data-plasmic-override={overrides.btnCtaPrimary5}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.btnCtaPrimary5
              )}
              component={Link}
              href={"/podcasters" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___09O2J
                )}
              >
                {"Learn more"}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame30"}
            data-plasmic-override={overrides.frame30}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame30)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame31"}
              data-plasmic-override={overrides.frame31}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame31)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame256"}
                data-plasmic-override={overrides.frame256}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame256)}
              >
                <div
                  data-plasmic-name={"frame257"}
                  data-plasmic-override={overrides.frame257}
                  className={classNames(projectcss.all, sty.frame257)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___5SpYt)}
                    displayHeight={"48px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/the_boss_web_s/images/father.svg",
                      fullWidth: 48,
                      fullHeight: 48,
                      aspectRatio: 1
                    }}
                  />
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tk54G
                  )}
                >
                  {"For Content Consumer"}
                </div>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jRGs
                )}
              >
                {
                  "Everyone can leverage our microsite which hosts some amazing podcast value bombs"
                }
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__eCmQo)}>
              <Line2Icon
                className={classNames(projectcss.all, sty.svg__xZfBz)}
                role={"img"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame32"}
              data-plasmic-override={overrides.frame32}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame32)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iMaFd
                )}
              >
                {"What to consume:"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame33"}
                data-plasmic-override={overrides.frame33}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame33)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame34"}
                  data-plasmic-override={overrides.frame34}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame34)}
                >
                  <Emoji2Icon
                    className={classNames(projectcss.all, sty.svg__ktn8U)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sXj36
                    )}
                  >
                    {"Podcast Stories"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame35"}
                  data-plasmic-override={overrides.frame35}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame35)}
                >
                  <Emoji2Icon
                    className={classNames(projectcss.all, sty.svg__jt8XG)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9VsWg
                    )}
                  >
                    {"Featured Articles"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame37"}
                  data-plasmic-override={overrides.frame37}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame37)}
                >
                  <Emoji2Icon
                    className={classNames(projectcss.all, sty.svg__ebSku)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sy8K1
                    )}
                  >
                    {"PodBlogs"}
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"btnCtaPrimary6"}
              data-plasmic-override={overrides.btnCtaPrimary6}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.btnCtaPrimary6
              )}
              component={Link}
              href={"https://contenthouse.ballsofsteelshow.com" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6UPm9
                )}
              >
                {"Visit site"}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "frame15",
    "frame24",
    "frame253",
    "frame252",
    "frame23",
    "frame20",
    "frame18",
    "frame19",
    "frame21",
    "btnCtaPrimary4",
    "frame16",
    "frame25",
    "frame254",
    "frame255",
    "frame26",
    "frame22",
    "frame27",
    "frame28",
    "frame29",
    "btnCtaPrimary5",
    "frame30",
    "frame31",
    "frame256",
    "frame257",
    "frame32",
    "frame33",
    "frame34",
    "frame35",
    "frame37",
    "btnCtaPrimary6"
  ],
  sectionHeading: ["sectionHeading"],
  frame15: [
    "frame15",
    "frame24",
    "frame253",
    "frame252",
    "frame23",
    "frame20",
    "frame18",
    "frame19",
    "frame21",
    "btnCtaPrimary4"
  ],
  frame24: ["frame24", "frame253", "frame252"],
  frame253: ["frame253", "frame252"],
  frame252: ["frame252"],
  frame23: ["frame23", "frame20", "frame18", "frame19", "frame21"],
  frame20: ["frame20", "frame18", "frame19", "frame21"],
  frame18: ["frame18"],
  frame19: ["frame19"],
  frame21: ["frame21"],
  btnCtaPrimary4: ["btnCtaPrimary4"],
  frame16: [
    "frame16",
    "frame25",
    "frame254",
    "frame255",
    "frame26",
    "frame22",
    "frame27",
    "frame28",
    "frame29",
    "btnCtaPrimary5"
  ],
  frame25: ["frame25", "frame254", "frame255"],
  frame254: ["frame254", "frame255"],
  frame255: ["frame255"],
  frame26: ["frame26", "frame22", "frame27", "frame28", "frame29"],
  frame22: ["frame22", "frame27", "frame28", "frame29"],
  frame27: ["frame27"],
  frame28: ["frame28"],
  frame29: ["frame29"],
  btnCtaPrimary5: ["btnCtaPrimary5"],
  frame30: [
    "frame30",
    "frame31",
    "frame256",
    "frame257",
    "frame32",
    "frame33",
    "frame34",
    "frame35",
    "frame37",
    "btnCtaPrimary6"
  ],
  frame31: ["frame31", "frame256", "frame257"],
  frame256: ["frame256", "frame257"],
  frame257: ["frame257"],
  frame32: ["frame32", "frame33", "frame34", "frame35", "frame37"],
  frame33: ["frame33", "frame34", "frame35", "frame37"],
  frame34: ["frame34"],
  frame35: ["frame35"],
  frame37: ["frame37"],
  btnCtaPrimary6: ["btnCtaPrimary6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  frame15: "div";
  frame24: "div";
  frame253: "div";
  frame252: "div";
  frame23: "div";
  frame20: "div";
  frame18: "div";
  frame19: "div";
  frame21: "div";
  btnCtaPrimary4: "a";
  frame16: "div";
  frame25: "div";
  frame254: "div";
  frame255: "div";
  frame26: "div";
  frame22: "div";
  frame27: "div";
  frame28: "div";
  frame29: "div";
  btnCtaPrimary5: "a";
  frame30: "div";
  frame31: "div";
  frame256: "div";
  frame257: "div";
  frame32: "div";
  frame33: "div";
  frame34: "div";
  frame35: "div";
  frame37: "div";
  btnCtaPrimary6: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeValue5__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeValue5__VariantsArgs;
    args?: PlasmicHomeValue5__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeValue5__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeValue5__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomeValue5__ArgProps,
      internalVariantPropNames: PlasmicHomeValue5__VariantProps
    });

    return PlasmicHomeValue5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeValue5";
  } else {
    func.displayName = `PlasmicHomeValue5.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeValue5 = Object.assign(
  // Top-level PlasmicHomeValue5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    frame15: makeNodeComponent("frame15"),
    frame24: makeNodeComponent("frame24"),
    frame253: makeNodeComponent("frame253"),
    frame252: makeNodeComponent("frame252"),
    frame23: makeNodeComponent("frame23"),
    frame20: makeNodeComponent("frame20"),
    frame18: makeNodeComponent("frame18"),
    frame19: makeNodeComponent("frame19"),
    frame21: makeNodeComponent("frame21"),
    btnCtaPrimary4: makeNodeComponent("btnCtaPrimary4"),
    frame16: makeNodeComponent("frame16"),
    frame25: makeNodeComponent("frame25"),
    frame254: makeNodeComponent("frame254"),
    frame255: makeNodeComponent("frame255"),
    frame26: makeNodeComponent("frame26"),
    frame22: makeNodeComponent("frame22"),
    frame27: makeNodeComponent("frame27"),
    frame28: makeNodeComponent("frame28"),
    frame29: makeNodeComponent("frame29"),
    btnCtaPrimary5: makeNodeComponent("btnCtaPrimary5"),
    frame30: makeNodeComponent("frame30"),
    frame31: makeNodeComponent("frame31"),
    frame256: makeNodeComponent("frame256"),
    frame257: makeNodeComponent("frame257"),
    frame32: makeNodeComponent("frame32"),
    frame33: makeNodeComponent("frame33"),
    frame34: makeNodeComponent("frame34"),
    frame35: makeNodeComponent("frame35"),
    frame37: makeNodeComponent("frame37"),
    btnCtaPrimary6: makeNodeComponent("btnCtaPrimary6"),

    // Metadata about props expected for PlasmicHomeValue5
    internalVariantProps: PlasmicHomeValue5__VariantProps,
    internalArgProps: PlasmicHomeValue5__ArgProps
  }
);

export default PlasmicHomeValue5;
/* prettier-ignore-end */
