// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 640-i8hCUfy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicPodcasterWhyboss3.module.css"; // plasmic-import: 640-i8hCUfy/css

import Ellipse1Icon from "./icons/PlasmicIcon__Ellipse1"; // plasmic-import: peyoGk09smg/icon
import Emoji7Icon from "./icons/PlasmicIcon__Emoji7"; // plasmic-import: wo39UeYtK5z/icon
import NounGrowthBusinessDev1Icon from "./icons/PlasmicIcon__NounGrowthBusinessDev1"; // plasmic-import: ZbZQD_xAjxh/icon

export type PlasmicPodcasterWhyboss3__VariantMembers = {};

export type PlasmicPodcasterWhyboss3__VariantsArgs = {};
type VariantPropType = keyof PlasmicPodcasterWhyboss3__VariantsArgs;
export const PlasmicPodcasterWhyboss3__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPodcasterWhyboss3__ArgsType = {};
type ArgPropType = keyof PlasmicPodcasterWhyboss3__ArgsType;
export const PlasmicPodcasterWhyboss3__ArgProps = new Array<ArgPropType>();

export type PlasmicPodcasterWhyboss3__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  group40?: p.Flex<"div">;
  frame12?: p.Flex<"div">;
  frame132?: p.Flex<"div">;
  frame131?: p.Flex<"div">;
  frame133?: p.Flex<"div">;
  frame134?: p.Flex<"div">;
  frame135?: p.Flex<"div">;
  frame136?: p.Flex<"div">;
  frame137?: p.Flex<"div">;
  frame138?: p.Flex<"div">;
  frame139?: p.Flex<"div">;
  frame157?: p.Flex<"div">;
  frame158?: p.Flex<"div">;
  frame159?: p.Flex<"div">;
  frame164?: p.Flex<"div">;
  unsplashh6PdEdr9IZo?: p.Flex<"div">;
  frame165?: p.Flex<"div">;
  frame166?: p.Flex<"div">;
  frame167?: p.Flex<"div">;
  rectangle36?: p.Flex<"div">;
  rectangle37?: p.Flex<"div">;
  rectangle38?: p.Flex<"div">;
  rectangle39?: p.Flex<"div">;
  frame168?: p.Flex<"div">;
  frame169?: p.Flex<"div">;
  frame342?: p.Flex<"div">;
  frame346?: p.Flex<"div">;
  frame197?: p.Flex<"div">;
  rectangle40?: p.Flex<"div">;
  frame345?: p.Flex<"div">;
  rectangle41?: p.Flex<"div">;
  frame344?: p.Flex<"div">;
  rectangle42?: p.Flex<"div">;
  frame347?: p.Flex<"div">;
  rectangle43?: p.Flex<"div">;
  frame348?: p.Flex<"div">;
  rectangle45?: p.Flex<"div">;
  frame216?: p.Flex<"div">;
  frame335?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  frame349?: p.Flex<"div">;
  rectangle46?: p.Flex<"div">;
  frame350?: p.Flex<"div">;
  frame351?: p.Flex<"div">;
  rectangle47?: p.Flex<"div">;
  frame198?: p.Flex<"div">;
  rectangle48?: p.Flex<"div">;
  frame352?: p.Flex<"div">;
  rectangle49?: p.Flex<"div">;
  frame353?: p.Flex<"div">;
  rectangle50?: p.Flex<"div">;
  frame170?: p.Flex<"div">;
  frame281?: p.Flex<"div">;
  btn6?: p.Flex<"a"> & Partial<LinkProps>;
  btn7?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultPodcasterWhyboss3Props {
  className?: string;
}

export const defaultPodcasterWhyboss3__Args: Partial<PlasmicPodcasterWhyboss3__ArgsType> =
  {};

function PlasmicPodcasterWhyboss3__RenderFunc(props: {
  variants: PlasmicPodcasterWhyboss3__VariantsArgs;
  args: PlasmicPodcasterWhyboss3__ArgsType;
  overrides: PlasmicPodcasterWhyboss3__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultPodcasterWhyboss3__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vsfJz
          )}
        >
          {"Why Choose BOSS?"}
        </div>
      </SectionHeading>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__c8Ptf)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tofiE
            )}
          >
            {"Focus on Creating The Best Of Content and Trust Us With the Rest"}
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"group40"}
        data-plasmic-override={overrides.group40}
        hasGap={true}
        className={classNames(projectcss.all, sty.group40)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame12"}
          data-plasmic-override={overrides.frame12}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame12)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame132"}
            data-plasmic-override={overrides.frame132}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame132)}
          >
            <div
              data-plasmic-name={"frame131"}
              data-plasmic-override={overrides.frame131}
              className={classNames(projectcss.all, sty.frame131)}
            >
              <Ellipse1Icon
                className={classNames(projectcss.all, sty.svg__i6Df8)}
                role={"img"}
              />

              <Emoji7Icon
                className={classNames(projectcss.all, sty.svg__jmsCj)}
                role={"img"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame133"}
              data-plasmic-override={overrides.frame133}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame133)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eSqkj
                )}
              >
                {"Paid Advertisers"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yirrH
                )}
              >
                {
                  "BOSS helps you in getting paid advertisers which are relevant to your podcast niche"
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame134"}
          data-plasmic-override={overrides.frame134}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame134)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame135"}
            data-plasmic-override={overrides.frame135}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame135)}
          >
            <div
              data-plasmic-name={"frame136"}
              data-plasmic-override={overrides.frame136}
              className={classNames(projectcss.all, sty.frame136)}
            >
              <Ellipse1Icon
                className={classNames(projectcss.all, sty.svg___9VWaa)}
                role={"img"}
              />

              <Emoji7Icon
                className={classNames(projectcss.all, sty.svg__hk97W)}
                role={"img"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame137"}
              data-plasmic-override={overrides.frame137}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame137)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nCqaV
                )}
              >
                {"Paid Guests"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___101JR
                )}
              >
                {
                  "BOSS connects you with paid guests whom\nyou can feature on your show"
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame138"}
          data-plasmic-override={overrides.frame138}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame138)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame139"}
            data-plasmic-override={overrides.frame139}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame139)}
          >
            <div
              data-plasmic-name={"frame157"}
              data-plasmic-override={overrides.frame157}
              className={classNames(projectcss.all, sty.frame157)}
            >
              <Ellipse1Icon
                className={classNames(projectcss.all, sty.svg__bWyV)}
                role={"img"}
              />

              <NounGrowthBusinessDev1Icon
                className={classNames(projectcss.all, sty.svg__rvShy)}
                role={"img"}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame158"}
              data-plasmic-override={overrides.frame158}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame158)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Osc
                )}
              >
                {"Business Development"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gdJQy
                )}
              >
                {
                  "BOSS implements strategies to help you monetise your podcast and multiply revenue"
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__goTvy)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__r6Zg5
            )}
          >
            {"We’ve made it work for ourselves"}
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame159"}
        data-plasmic-override={overrides.frame159}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame159)}
      >
        <div
          data-plasmic-name={"frame164"}
          data-plasmic-override={overrides.frame164}
          className={classNames(projectcss.all, sty.frame164)}
        >
          <div
            data-plasmic-name={"unsplashh6PdEdr9IZo"}
            data-plasmic-override={overrides.unsplashh6PdEdr9IZo}
            className={classNames(projectcss.all, sty.unsplashh6PdEdr9IZo)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame165"}
            data-plasmic-override={overrides.frame165}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame165)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rWczw
              )}
            >
              {"Self-Tested Growth"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Gi8O
              )}
            >
              {
                "We’ve made it work for ourselves. Generated revenue from podcast within first 5 months!"
              }
            </div>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"frame166"}
          data-plasmic-override={overrides.frame166}
          className={classNames(projectcss.all, sty.frame166)}
        >
          <div
            data-plasmic-name={"frame167"}
            data-plasmic-override={overrides.frame167}
            className={classNames(projectcss.all, sty.frame167)}
          >
            <div
              data-plasmic-name={"rectangle36"}
              data-plasmic-override={overrides.rectangle36}
              className={classNames(projectcss.all, sty.rectangle36)}
            />

            <div
              data-plasmic-name={"rectangle37"}
              data-plasmic-override={overrides.rectangle37}
              className={classNames(projectcss.all, sty.rectangle37)}
            />

            <div
              data-plasmic-name={"rectangle38"}
              data-plasmic-override={overrides.rectangle38}
              className={classNames(projectcss.all, sty.rectangle38)}
            />

            <div
              data-plasmic-name={"rectangle39"}
              data-plasmic-override={overrides.rectangle39}
              className={classNames(projectcss.all, sty.rectangle39)}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame168"}
            data-plasmic-override={overrides.frame168}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame168)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w4GP
              )}
            >
              {"100+ Guests Featured"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___97Nf
              )}
            >
              {
                "Over 100 guests interviewed and 5+ guests being under the Forbes 30 Under 30"
              }
            </div>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"frame169"}
          data-plasmic-override={overrides.frame169}
          className={classNames(projectcss.all, sty.frame169)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame342"}
            data-plasmic-override={overrides.frame342}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame342)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame346"}
              data-plasmic-override={overrides.frame346}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame346)}
            >
              <div
                data-plasmic-name={"frame197"}
                data-plasmic-override={overrides.frame197}
                className={classNames(projectcss.all, sty.frame197)}
              >
                <div
                  data-plasmic-name={"rectangle40"}
                  data-plasmic-override={overrides.rectangle40}
                  className={classNames(projectcss.all, sty.rectangle40)}
                />
              </div>

              <div
                data-plasmic-name={"frame345"}
                data-plasmic-override={overrides.frame345}
                className={classNames(projectcss.all, sty.frame345)}
              >
                <div
                  data-plasmic-name={"rectangle41"}
                  data-plasmic-override={overrides.rectangle41}
                  className={classNames(projectcss.all, sty.rectangle41)}
                />
              </div>

              <div
                data-plasmic-name={"frame344"}
                data-plasmic-override={overrides.frame344}
                className={classNames(projectcss.all, sty.frame344)}
              >
                <div
                  data-plasmic-name={"rectangle42"}
                  data-plasmic-override={overrides.rectangle42}
                  className={classNames(projectcss.all, sty.rectangle42)}
                />
              </div>

              <div
                data-plasmic-name={"frame347"}
                data-plasmic-override={overrides.frame347}
                className={classNames(projectcss.all, sty.frame347)}
              >
                <div
                  data-plasmic-name={"rectangle43"}
                  data-plasmic-override={overrides.rectangle43}
                  className={classNames(projectcss.all, sty.rectangle43)}
                />
              </div>
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iOdn9)}
              >
                <div
                  data-plasmic-name={"frame348"}
                  data-plasmic-override={overrides.frame348}
                  className={classNames(projectcss.all, sty.frame348)}
                >
                  <div
                    data-plasmic-name={"rectangle45"}
                    data-plasmic-override={overrides.rectangle45}
                    className={classNames(projectcss.all, sty.rectangle45)}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame216"}
                  data-plasmic-override={overrides.frame216}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame216)}
                >
                  <div
                    data-plasmic-name={"frame335"}
                    data-plasmic-override={overrides.frame335}
                    className={classNames(projectcss.all, sty.frame335)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"14px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"14px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/the_boss_web_s/images/blog3.svg",
                        fullWidth: 14,
                        fullHeight: 14,
                        aspectRatio: 1
                      }}
                    />
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qzhq1
                    )}
                  >
                    {"Feature article"}
                  </div>
                </p.Stack>

                <div
                  data-plasmic-name={"frame349"}
                  data-plasmic-override={overrides.frame349}
                  className={classNames(projectcss.all, sty.frame349)}
                >
                  <div
                    data-plasmic-name={"rectangle46"}
                    data-plasmic-override={overrides.rectangle46}
                    className={classNames(projectcss.all, sty.rectangle46)}
                  />
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame350"}
              data-plasmic-override={overrides.frame350}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame350)}
            >
              <div
                data-plasmic-name={"frame351"}
                data-plasmic-override={overrides.frame351}
                className={classNames(projectcss.all, sty.frame351)}
              >
                <div
                  data-plasmic-name={"rectangle47"}
                  data-plasmic-override={overrides.rectangle47}
                  className={classNames(projectcss.all, sty.rectangle47)}
                />
              </div>

              <div
                data-plasmic-name={"frame198"}
                data-plasmic-override={overrides.frame198}
                className={classNames(projectcss.all, sty.frame198)}
              >
                <div
                  data-plasmic-name={"rectangle48"}
                  data-plasmic-override={overrides.rectangle48}
                  className={classNames(projectcss.all, sty.rectangle48)}
                />
              </div>

              <div
                data-plasmic-name={"frame352"}
                data-plasmic-override={overrides.frame352}
                className={classNames(projectcss.all, sty.frame352)}
              >
                <div
                  data-plasmic-name={"rectangle49"}
                  data-plasmic-override={overrides.rectangle49}
                  className={classNames(projectcss.all, sty.rectangle49)}
                />
              </div>

              <div
                data-plasmic-name={"frame353"}
                data-plasmic-override={overrides.frame353}
                className={classNames(projectcss.all, sty.frame353)}
              >
                <div
                  data-plasmic-name={"rectangle50"}
                  data-plasmic-override={overrides.rectangle50}
                  className={classNames(projectcss.all, sty.rectangle50)}
                />
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame170"}
            data-plasmic-override={overrides.frame170}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame170)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bBhwA
              )}
            >
              {"200+ Featured Articles"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m39If
              )}
            >
              {
                "Over 200 companies have been featured on our Feature articles. Visit our Content House"
              }
            </div>
          </p.Stack>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame281"}
        data-plasmic-override={overrides.frame281}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame281)}
      >
        <p.Stack
          as={p.PlasmicLink}
          data-plasmic-name={"btn6"}
          data-plasmic-override={overrides.btn6}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.btn6)}
          component={Link}
          href={"#podcaster-form" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jDfZx
            )}
          >
            {"Sign-Up with BOSS"}
          </div>
        </p.Stack>

        <p.Stack
          as={p.PlasmicLink}
          data-plasmic-name={"btn7"}
          data-plasmic-override={overrides.btn7}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.btn7)}
          component={Link}
          href={"https://www.calendar.com/the-balls-of-steel-show/" as const}
          platform={"nextjs"}
          target={"_blank" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0AGyj
            )}
          >
            {"Free Consultation Call"}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "group40",
    "frame12",
    "frame132",
    "frame131",
    "frame133",
    "frame134",
    "frame135",
    "frame136",
    "frame137",
    "frame138",
    "frame139",
    "frame157",
    "frame158",
    "frame159",
    "frame164",
    "unsplashh6PdEdr9IZo",
    "frame165",
    "frame166",
    "frame167",
    "rectangle36",
    "rectangle37",
    "rectangle38",
    "rectangle39",
    "frame168",
    "frame169",
    "frame342",
    "frame346",
    "frame197",
    "rectangle40",
    "frame345",
    "rectangle41",
    "frame344",
    "rectangle42",
    "frame347",
    "rectangle43",
    "frame348",
    "rectangle45",
    "frame216",
    "frame335",
    "img",
    "frame349",
    "rectangle46",
    "frame350",
    "frame351",
    "rectangle47",
    "frame198",
    "rectangle48",
    "frame352",
    "rectangle49",
    "frame353",
    "rectangle50",
    "frame170",
    "frame281",
    "btn6",
    "btn7"
  ],
  sectionHeading: ["sectionHeading"],
  group40: [
    "group40",
    "frame12",
    "frame132",
    "frame131",
    "frame133",
    "frame134",
    "frame135",
    "frame136",
    "frame137",
    "frame138",
    "frame139",
    "frame157",
    "frame158"
  ],
  frame12: ["frame12", "frame132", "frame131", "frame133"],
  frame132: ["frame132", "frame131", "frame133"],
  frame131: ["frame131"],
  frame133: ["frame133"],
  frame134: ["frame134", "frame135", "frame136", "frame137"],
  frame135: ["frame135", "frame136", "frame137"],
  frame136: ["frame136"],
  frame137: ["frame137"],
  frame138: ["frame138", "frame139", "frame157", "frame158"],
  frame139: ["frame139", "frame157", "frame158"],
  frame157: ["frame157"],
  frame158: ["frame158"],
  frame159: [
    "frame159",
    "frame164",
    "unsplashh6PdEdr9IZo",
    "frame165",
    "frame166",
    "frame167",
    "rectangle36",
    "rectangle37",
    "rectangle38",
    "rectangle39",
    "frame168",
    "frame169",
    "frame342",
    "frame346",
    "frame197",
    "rectangle40",
    "frame345",
    "rectangle41",
    "frame344",
    "rectangle42",
    "frame347",
    "rectangle43",
    "frame348",
    "rectangle45",
    "frame216",
    "frame335",
    "img",
    "frame349",
    "rectangle46",
    "frame350",
    "frame351",
    "rectangle47",
    "frame198",
    "rectangle48",
    "frame352",
    "rectangle49",
    "frame353",
    "rectangle50",
    "frame170"
  ],
  frame164: ["frame164", "unsplashh6PdEdr9IZo", "frame165"],
  unsplashh6PdEdr9IZo: ["unsplashh6PdEdr9IZo"],
  frame165: ["frame165"],
  frame166: [
    "frame166",
    "frame167",
    "rectangle36",
    "rectangle37",
    "rectangle38",
    "rectangle39",
    "frame168"
  ],
  frame167: [
    "frame167",
    "rectangle36",
    "rectangle37",
    "rectangle38",
    "rectangle39"
  ],
  rectangle36: ["rectangle36"],
  rectangle37: ["rectangle37"],
  rectangle38: ["rectangle38"],
  rectangle39: ["rectangle39"],
  frame168: ["frame168"],
  frame169: [
    "frame169",
    "frame342",
    "frame346",
    "frame197",
    "rectangle40",
    "frame345",
    "rectangle41",
    "frame344",
    "rectangle42",
    "frame347",
    "rectangle43",
    "frame348",
    "rectangle45",
    "frame216",
    "frame335",
    "img",
    "frame349",
    "rectangle46",
    "frame350",
    "frame351",
    "rectangle47",
    "frame198",
    "rectangle48",
    "frame352",
    "rectangle49",
    "frame353",
    "rectangle50",
    "frame170"
  ],
  frame342: [
    "frame342",
    "frame346",
    "frame197",
    "rectangle40",
    "frame345",
    "rectangle41",
    "frame344",
    "rectangle42",
    "frame347",
    "rectangle43",
    "frame348",
    "rectangle45",
    "frame216",
    "frame335",
    "img",
    "frame349",
    "rectangle46",
    "frame350",
    "frame351",
    "rectangle47",
    "frame198",
    "rectangle48",
    "frame352",
    "rectangle49",
    "frame353",
    "rectangle50"
  ],
  frame346: [
    "frame346",
    "frame197",
    "rectangle40",
    "frame345",
    "rectangle41",
    "frame344",
    "rectangle42",
    "frame347",
    "rectangle43"
  ],
  frame197: ["frame197", "rectangle40"],
  rectangle40: ["rectangle40"],
  frame345: ["frame345", "rectangle41"],
  rectangle41: ["rectangle41"],
  frame344: ["frame344", "rectangle42"],
  rectangle42: ["rectangle42"],
  frame347: ["frame347", "rectangle43"],
  rectangle43: ["rectangle43"],
  frame348: ["frame348", "rectangle45"],
  rectangle45: ["rectangle45"],
  frame216: ["frame216", "frame335", "img"],
  frame335: ["frame335", "img"],
  img: ["img"],
  frame349: ["frame349", "rectangle46"],
  rectangle46: ["rectangle46"],
  frame350: [
    "frame350",
    "frame351",
    "rectangle47",
    "frame198",
    "rectangle48",
    "frame352",
    "rectangle49",
    "frame353",
    "rectangle50"
  ],
  frame351: ["frame351", "rectangle47"],
  rectangle47: ["rectangle47"],
  frame198: ["frame198", "rectangle48"],
  rectangle48: ["rectangle48"],
  frame352: ["frame352", "rectangle49"],
  rectangle49: ["rectangle49"],
  frame353: ["frame353", "rectangle50"],
  rectangle50: ["rectangle50"],
  frame170: ["frame170"],
  frame281: ["frame281", "btn6", "btn7"],
  btn6: ["btn6"],
  btn7: ["btn7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  group40: "div";
  frame12: "div";
  frame132: "div";
  frame131: "div";
  frame133: "div";
  frame134: "div";
  frame135: "div";
  frame136: "div";
  frame137: "div";
  frame138: "div";
  frame139: "div";
  frame157: "div";
  frame158: "div";
  frame159: "div";
  frame164: "div";
  unsplashh6PdEdr9IZo: "div";
  frame165: "div";
  frame166: "div";
  frame167: "div";
  rectangle36: "div";
  rectangle37: "div";
  rectangle38: "div";
  rectangle39: "div";
  frame168: "div";
  frame169: "div";
  frame342: "div";
  frame346: "div";
  frame197: "div";
  rectangle40: "div";
  frame345: "div";
  rectangle41: "div";
  frame344: "div";
  rectangle42: "div";
  frame347: "div";
  rectangle43: "div";
  frame348: "div";
  rectangle45: "div";
  frame216: "div";
  frame335: "div";
  img: typeof p.PlasmicImg;
  frame349: "div";
  rectangle46: "div";
  frame350: "div";
  frame351: "div";
  rectangle47: "div";
  frame198: "div";
  rectangle48: "div";
  frame352: "div";
  rectangle49: "div";
  frame353: "div";
  rectangle50: "div";
  frame170: "div";
  frame281: "div";
  btn6: "a";
  btn7: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPodcasterWhyboss3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPodcasterWhyboss3__VariantsArgs;
    args?: PlasmicPodcasterWhyboss3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPodcasterWhyboss3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPodcasterWhyboss3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPodcasterWhyboss3__ArgProps,
      internalVariantPropNames: PlasmicPodcasterWhyboss3__VariantProps
    });

    return PlasmicPodcasterWhyboss3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPodcasterWhyboss3";
  } else {
    func.displayName = `PlasmicPodcasterWhyboss3.${nodeName}`;
  }
  return func;
}

export const PlasmicPodcasterWhyboss3 = Object.assign(
  // Top-level PlasmicPodcasterWhyboss3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    group40: makeNodeComponent("group40"),
    frame12: makeNodeComponent("frame12"),
    frame132: makeNodeComponent("frame132"),
    frame131: makeNodeComponent("frame131"),
    frame133: makeNodeComponent("frame133"),
    frame134: makeNodeComponent("frame134"),
    frame135: makeNodeComponent("frame135"),
    frame136: makeNodeComponent("frame136"),
    frame137: makeNodeComponent("frame137"),
    frame138: makeNodeComponent("frame138"),
    frame139: makeNodeComponent("frame139"),
    frame157: makeNodeComponent("frame157"),
    frame158: makeNodeComponent("frame158"),
    frame159: makeNodeComponent("frame159"),
    frame164: makeNodeComponent("frame164"),
    unsplashh6PdEdr9IZo: makeNodeComponent("unsplashh6PdEdr9IZo"),
    frame165: makeNodeComponent("frame165"),
    frame166: makeNodeComponent("frame166"),
    frame167: makeNodeComponent("frame167"),
    rectangle36: makeNodeComponent("rectangle36"),
    rectangle37: makeNodeComponent("rectangle37"),
    rectangle38: makeNodeComponent("rectangle38"),
    rectangle39: makeNodeComponent("rectangle39"),
    frame168: makeNodeComponent("frame168"),
    frame169: makeNodeComponent("frame169"),
    frame342: makeNodeComponent("frame342"),
    frame346: makeNodeComponent("frame346"),
    frame197: makeNodeComponent("frame197"),
    rectangle40: makeNodeComponent("rectangle40"),
    frame345: makeNodeComponent("frame345"),
    rectangle41: makeNodeComponent("rectangle41"),
    frame344: makeNodeComponent("frame344"),
    rectangle42: makeNodeComponent("rectangle42"),
    frame347: makeNodeComponent("frame347"),
    rectangle43: makeNodeComponent("rectangle43"),
    frame348: makeNodeComponent("frame348"),
    rectangle45: makeNodeComponent("rectangle45"),
    frame216: makeNodeComponent("frame216"),
    frame335: makeNodeComponent("frame335"),
    img: makeNodeComponent("img"),
    frame349: makeNodeComponent("frame349"),
    rectangle46: makeNodeComponent("rectangle46"),
    frame350: makeNodeComponent("frame350"),
    frame351: makeNodeComponent("frame351"),
    rectangle47: makeNodeComponent("rectangle47"),
    frame198: makeNodeComponent("frame198"),
    rectangle48: makeNodeComponent("rectangle48"),
    frame352: makeNodeComponent("frame352"),
    rectangle49: makeNodeComponent("rectangle49"),
    frame353: makeNodeComponent("frame353"),
    rectangle50: makeNodeComponent("rectangle50"),
    frame170: makeNodeComponent("frame170"),
    frame281: makeNodeComponent("frame281"),
    btn6: makeNodeComponent("btn6"),
    btn7: makeNodeComponent("btn7"),

    // Metadata about props expected for PlasmicPodcasterWhyboss3
    internalVariantProps: PlasmicPodcasterWhyboss3__VariantProps,
    internalArgProps: PlasmicPodcasterWhyboss3__ArgProps
  }
);

export default PlasmicPodcasterWhyboss3;
/* prettier-ignore-end */
