// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 6a0Fa8t-p98
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicHomeVideo2.module.css"; // plasmic-import: 6a0Fa8t-p98/css

import PlayArrowIcon from "./icons/PlasmicIcon__PlayArrow"; // plasmic-import: Th2-FWCfLs/icon

export type PlasmicHomeVideo2__VariantMembers = {};

export type PlasmicHomeVideo2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeVideo2__VariantsArgs;
export const PlasmicHomeVideo2__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeVideo2__ArgsType = {};
type ArgPropType = keyof PlasmicHomeVideo2__ArgsType;
export const PlasmicHomeVideo2__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeVideo2__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  videoBoss?: p.Flex<"div">;
  rectangle34?: p.Flex<"div">;
  rectangle35?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  btn2?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomeVideo2Props {
  className?: string;
}

function PlasmicHomeVideo2__RenderFunc(props: {
  variants: PlasmicHomeVideo2__VariantsArgs;
  args: PlasmicHomeVideo2__ArgsType;
  overrides: PlasmicHomeVideo2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5Ql7I
          )}
        >
          {"Whatâ€™s The BOSS?"}
        </div>
      </SectionHeading>

      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kOuU0)}
        >
          <div
            data-plasmic-name={"videoBoss"}
            data-plasmic-override={overrides.videoBoss}
            className={classNames(projectcss.all, sty.videoBoss)}
          >
            <div
              data-plasmic-name={"rectangle34"}
              data-plasmic-override={overrides.rectangle34}
              className={classNames(projectcss.all, sty.rectangle34)}
            />

            <div
              data-plasmic-name={"rectangle35"}
              data-plasmic-override={overrides.rectangle35}
              className={classNames(projectcss.all, sty.rectangle35)}
            />

            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <PlayArrowIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sRM8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oFiGr
                )}
              >
                {"THE BALLS OF STEEL SHOW"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jcolc
                )}
              >
                {"a bridge between podcasters and advertisers"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oeCgP
                )}
              >
                {
                  "With us, podcasters can monetise their content through advertisments and advertisers can amplify their brands on podcasts."
                }
              </div>

              <p.Stack
                as={p.PlasmicLink}
                data-plasmic-name={"btn2"}
                data-plasmic-override={overrides.btn2}
                hasGap={true}
                className={classNames(projectcss.all, projectcss.a, sty.btn2)}
                component={Link}
                href={
                  "https://www.calendar.com/the-balls-of-steel-show/" as const
                }
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6PsfR
                  )}
                >
                  {"Free Consultation Call"}
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "videoBoss",
    "rectangle34",
    "rectangle35",
    "frame2",
    "svg",
    "btn2"
  ],
  sectionHeading: ["sectionHeading"],
  videoBoss: ["videoBoss", "rectangle34", "rectangle35", "frame2", "svg"],
  rectangle34: ["rectangle34"],
  rectangle35: ["rectangle35"],
  frame2: ["frame2", "svg"],
  svg: ["svg"],
  btn2: ["btn2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  videoBoss: "div";
  rectangle34: "div";
  rectangle35: "div";
  frame2: "div";
  svg: "svg";
  btn2: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeVideo2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeVideo2__VariantsArgs;
    args?: PlasmicHomeVideo2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeVideo2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeVideo2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomeVideo2__ArgProps,
          internalVariantPropNames: PlasmicHomeVideo2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomeVideo2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeVideo2";
  } else {
    func.displayName = `PlasmicHomeVideo2.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeVideo2 = Object.assign(
  // Top-level PlasmicHomeVideo2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    videoBoss: makeNodeComponent("videoBoss"),
    rectangle34: makeNodeComponent("rectangle34"),
    rectangle35: makeNodeComponent("rectangle35"),
    frame2: makeNodeComponent("frame2"),
    svg: makeNodeComponent("svg"),
    btn2: makeNodeComponent("btn2"),

    // Metadata about props expected for PlasmicHomeVideo2
    internalVariantProps: PlasmicHomeVideo2__VariantProps,
    internalArgProps: PlasmicHomeVideo2__ArgProps
  }
);

export default PlasmicHomeVideo2;
/* prettier-ignore-end */
