// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 4a5zClY4ZCw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component
import Input from "antd/lib/input"; // plasmic-import: tO9wrxr8Nbb/codeComponent
import Checkbox from "../../Checkbox"; // plasmic-import: 4aFWKT-1DBY/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicPodcasterForm.module.css"; // plasmic-import: 4a5zClY4ZCw/css

export type PlasmicPodcasterForm__VariantMembers = {};

export type PlasmicPodcasterForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicPodcasterForm__VariantsArgs;
export const PlasmicPodcasterForm__VariantProps = new Array<VariantPropType>();

export type PlasmicPodcasterForm__ArgsType = {};
type ArgPropType = keyof PlasmicPodcasterForm__ArgsType;
export const PlasmicPodcasterForm__ArgProps = new Array<ArgPropType>();

export type PlasmicPodcasterForm__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  form?: p.Flex<"form">;
  firstNameInput?: p.Flex<typeof Input>;
  lastNameInput?: p.Flex<typeof Input>;
  emailInput?: p.Flex<typeof Input>;
  phoneInput?: p.Flex<typeof Input>;
  messageInput3?: p.Flex<typeof Input>;
  messageInput?: p.Flex<typeof Input>;
  emailInput2?: p.Flex<typeof Input>;
  phoneInput2?: p.Flex<typeof Input>;
  messageInput4?: p.Flex<typeof Input>;
  messageInput2?: p.Flex<typeof Input>;
  firstNameInput2?: p.Flex<typeof Input>;
  lastNameInput2?: p.Flex<typeof Input>;
  lastNameInput3?: p.Flex<typeof Input>;
  checkbox?: p.Flex<typeof Checkbox>;
  btn?: p.Flex<"button">;
};

export interface DefaultPodcasterFormProps {
  className?: string;
}

export const defaultPodcasterForm__Args: Partial<PlasmicPodcasterForm__ArgsType> =
  {};

function PlasmicPodcasterForm__RenderFunc(props: {
  variants: PlasmicPodcasterForm__VariantsArgs;
  args: PlasmicPodcasterForm__ArgsType;
  overrides: PlasmicPodcasterForm__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultPodcasterForm__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ci3Ii
          )}
        >
          {"Letâ€™s Get Started"}
        </div>
      </SectionHeading>

      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u7Md)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pZRx
            )}
            id={"podcaster-form" as const}
          >
            {"Form for Podcasters"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y0Lfj
            )}
          >
            {
              "Hi! Please fill the form below and weâ€™ll connect with you super soon\nto level up your podcast business ðŸŽ™"
            }
          </div>
        </p.Stack>
      ) : null}
      {true ? (
        <form
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          action={
            "https://script.google.com/macros/s/AKfycbw7CO2JlLGjctAzDXQepza4YnA3ePi9_fZeVQfyYGZVAc_3jpolJTB7mkWXiOjST-0aGQ/exec" as const
          }
          className={classNames(projectcss.all, sty.form)}
          method={"post" as const}
          name={"podcaster" as const}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__tPup5)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mbp9K)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ktlOk)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yJioa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d5XLz
                            )}
                          >
                            {"First name"}
                          </div>

                          <Input
                            data-plasmic-name={"firstNameInput"}
                            data-plasmic-override={overrides.firstNameInput}
                            className={classNames(
                              "__wab_instance",
                              sty.firstNameInput
                            )}
                            defaultValue={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                            id={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("first-name" as const)
                                : ("first-name" as const)
                            }
                            name={"first_name" as const}
                            placeholder={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("Your First Name" as const)
                                : ("Your First Name" as const)
                            }
                            type={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                          />
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pRiP
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xtVxl
                            )}
                          >
                            {"Last name"}
                          </div>

                          <Input
                            data-plasmic-name={"lastNameInput"}
                            data-plasmic-override={overrides.lastNameInput}
                            className={classNames(
                              "__wab_instance",
                              sty.lastNameInput
                            )}
                            defaultValue={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                            id={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("last-name" as const)
                                : ("last-name" as const)
                            }
                            name={"last_name" as const}
                            placeholder={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("Your Last Name" as const)
                                : ("Your Last Name" as const)
                            }
                            type={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                          />
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qn6Nk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gQsMu
                        )}
                      >
                        {"Email"}
                      </div>

                      <Input
                        data-plasmic-name={"emailInput"}
                        data-plasmic-override={overrides.emailInput}
                        className={classNames("__wab_instance", sty.emailInput)}
                        defaultValue={"" as const}
                        id={"email-add" as const}
                        name={"email_add" as const}
                        placeholder={"Your  Email address" as const}
                        type={"" as const}
                      />
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zr5Nh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Xcqs
                        )}
                      >
                        {"Contact"}
                      </div>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lAfYy
                          )}
                        >
                          <Input
                            data-plasmic-name={"phoneInput"}
                            data-plasmic-override={overrides.phoneInput}
                            className={classNames(
                              "__wab_instance",
                              sty.phoneInput
                            )}
                            defaultValue={"" as const}
                            id={"phone" as const}
                            name={"phone_num" as const}
                            placeholder={"Your Contact Number" as const}
                            type={"" as const}
                          />
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__j0SjH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g871S
                        )}
                      >
                        {"Website"}
                      </div>

                      <Input
                        data-plasmic-name={"messageInput3"}
                        data-plasmic-override={overrides.messageInput3}
                        className={classNames(
                          "__wab_instance",
                          sty.messageInput3
                        )}
                        defaultValue={"" as const}
                        id={"website-url" as const}
                        name={"website_url" as const}
                        placeholder={"your website URL" as const}
                        type={"" as const}
                      />
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__f7QN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2JmP
                        )}
                      >
                        {"Additional Notes"}
                      </div>

                      <Input
                        data-plasmic-name={"messageInput"}
                        data-plasmic-override={overrides.messageInput}
                        className={classNames(
                          "__wab_instance",
                          sty.messageInput
                        )}
                        defaultValue={"" as const}
                        id={"addl-notes" as const}
                        name={"addl_notes" as const}
                        placeholder={
                          "Something else you might want to convey..." as const
                        }
                        type={"" as const}
                      />
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__j4GEe)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bNaja)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1NIpo
                        )}
                      >
                        {"Podcast Name"}
                      </div>

                      <Input
                        data-plasmic-name={"emailInput2"}
                        data-plasmic-override={overrides.emailInput2}
                        className={classNames(
                          "__wab_instance",
                          sty.emailInput2
                        )}
                        defaultValue={"" as const}
                        id={"podcast-name" as const}
                        name={"podcast_name" as const}
                        placeholder={"Enter podcast name" as const}
                        type={"" as const}
                      />
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7N8Lz
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__les1Y
                        )}
                      >
                        {"Podcast category"}
                      </div>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__epJ7P
                          )}
                        >
                          <Input
                            data-plasmic-name={"phoneInput2"}
                            data-plasmic-override={overrides.phoneInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.phoneInput2
                            )}
                            defaultValue={"" as const}
                            id={"podcast-category" as const}
                            name={"podcast_category" as const}
                            placeholder={
                              "Ex: entreprenuership, finance, travel, etc." as const
                            }
                            type={"" as const}
                          />
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1TmhQ
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a9Fcf
                        )}
                      >
                        {"RSS Feed URL"}
                      </div>

                      <Input
                        data-plasmic-name={"messageInput4"}
                        data-plasmic-override={overrides.messageInput4}
                        className={classNames(
                          "__wab_instance",
                          sty.messageInput4
                        )}
                        defaultValue={"" as const}
                        id={"podcast-feed" as const}
                        name={"podcast_feed" as const}
                        placeholder={"Enter your Podcast RSS URL" as const}
                        type={"" as const}
                      />
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vlxBm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wbiIv
                        )}
                      >
                        {"Hosting Platforms"}
                      </div>

                      <Input
                        data-plasmic-name={"messageInput2"}
                        data-plasmic-override={overrides.messageInput2}
                        className={classNames(
                          "__wab_instance",
                          sty.messageInput2
                        )}
                        defaultValue={"" as const}
                        id={"hosting-platform" as const}
                        name={"hosting_platform" as const}
                        placeholder={"Select platforms" as const}
                        type={"" as const}
                      />
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qyNr)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Sh7J
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kqFed
                            )}
                          >
                            {"Total Episodes live"}
                          </div>

                          <Input
                            data-plasmic-name={"firstNameInput2"}
                            data-plasmic-override={overrides.firstNameInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.firstNameInput2
                            )}
                            defaultValue={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                            id={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("first-name" as const)
                                : ("total-episodes" as const)
                            }
                            name={"total_episodes" as const}
                            placeholder={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("Your First Name" as const)
                                : ("Ex: 100" as const)
                            }
                            type={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                          />
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bhYs9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7FPuP
                            )}
                          >
                            {"Total Downloads"}
                          </div>

                          <Input
                            data-plasmic-name={"lastNameInput2"}
                            data-plasmic-override={overrides.lastNameInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.lastNameInput2
                            )}
                            defaultValue={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                            id={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("last-name" as const)
                                : ("total-downloads" as const)
                            }
                            name={"total_downloads" as const}
                            placeholder={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("Your Last Name" as const)
                                : ("Ex: 10000" as const)
                            }
                            type={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                          />
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1Zy5
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bT0K
                            )}
                          >
                            {"Avg. Downloads/month"}
                          </div>

                          <Input
                            data-plasmic-name={"lastNameInput3"}
                            data-plasmic-override={overrides.lastNameInput3}
                            className={classNames(
                              "__wab_instance",
                              sty.lastNameInput3
                            )}
                            defaultValue={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                            id={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("last-name" as const)
                                : ("avg-dld-mnth" as const)
                            }
                            name={"avg_dld_mnth" as const}
                            placeholder={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("Your Last Name" as const)
                                : ("Ex: 100" as const)
                            }
                            type={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("" as const)
                                : ("" as const)
                            }
                          />
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__o3Oix)}
            >
              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                className={classNames("__wab_instance", sty.checkbox)}
                name={"IsMonetized" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rGePp
                  )}
                >
                  {"Is your podcast Monetised?"}
                </div>
              </Checkbox>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"button"}
            data-plasmic-name={"btn"}
            data-plasmic-override={overrides.btn}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.button, sty.btn)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cbUHg
              )}
            >
              {"Submit Form"}
            </div>
          </p.Stack>
        </form>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "form",
    "firstNameInput",
    "lastNameInput",
    "emailInput",
    "phoneInput",
    "messageInput3",
    "messageInput",
    "emailInput2",
    "phoneInput2",
    "messageInput4",
    "messageInput2",
    "firstNameInput2",
    "lastNameInput2",
    "lastNameInput3",
    "checkbox",
    "btn"
  ],
  sectionHeading: ["sectionHeading"],
  form: [
    "form",
    "firstNameInput",
    "lastNameInput",
    "emailInput",
    "phoneInput",
    "messageInput3",
    "messageInput",
    "emailInput2",
    "phoneInput2",
    "messageInput4",
    "messageInput2",
    "firstNameInput2",
    "lastNameInput2",
    "lastNameInput3",
    "checkbox",
    "btn"
  ],
  firstNameInput: ["firstNameInput"],
  lastNameInput: ["lastNameInput"],
  emailInput: ["emailInput"],
  phoneInput: ["phoneInput"],
  messageInput3: ["messageInput3"],
  messageInput: ["messageInput"],
  emailInput2: ["emailInput2"],
  phoneInput2: ["phoneInput2"],
  messageInput4: ["messageInput4"],
  messageInput2: ["messageInput2"],
  firstNameInput2: ["firstNameInput2"],
  lastNameInput2: ["lastNameInput2"],
  lastNameInput3: ["lastNameInput3"],
  checkbox: ["checkbox"],
  btn: ["btn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  form: "form";
  firstNameInput: typeof Input;
  lastNameInput: typeof Input;
  emailInput: typeof Input;
  phoneInput: typeof Input;
  messageInput3: typeof Input;
  messageInput: typeof Input;
  emailInput2: typeof Input;
  phoneInput2: typeof Input;
  messageInput4: typeof Input;
  messageInput2: typeof Input;
  firstNameInput2: typeof Input;
  lastNameInput2: typeof Input;
  lastNameInput3: typeof Input;
  checkbox: typeof Checkbox;
  btn: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPodcasterForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPodcasterForm__VariantsArgs;
    args?: PlasmicPodcasterForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPodcasterForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPodcasterForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPodcasterForm__ArgProps,
      internalVariantPropNames: PlasmicPodcasterForm__VariantProps
    });

    return PlasmicPodcasterForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPodcasterForm";
  } else {
    func.displayName = `PlasmicPodcasterForm.${nodeName}`;
  }
  return func;
}

export const PlasmicPodcasterForm = Object.assign(
  // Top-level PlasmicPodcasterForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    form: makeNodeComponent("form"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    emailInput: makeNodeComponent("emailInput"),
    phoneInput: makeNodeComponent("phoneInput"),
    messageInput3: makeNodeComponent("messageInput3"),
    messageInput: makeNodeComponent("messageInput"),
    emailInput2: makeNodeComponent("emailInput2"),
    phoneInput2: makeNodeComponent("phoneInput2"),
    messageInput4: makeNodeComponent("messageInput4"),
    messageInput2: makeNodeComponent("messageInput2"),
    firstNameInput2: makeNodeComponent("firstNameInput2"),
    lastNameInput2: makeNodeComponent("lastNameInput2"),
    lastNameInput3: makeNodeComponent("lastNameInput3"),
    checkbox: makeNodeComponent("checkbox"),
    btn: makeNodeComponent("btn"),

    // Metadata about props expected for PlasmicPodcasterForm
    internalVariantProps: PlasmicPodcasterForm__VariantProps,
    internalArgProps: PlasmicPodcasterForm__ArgProps
  }
);

export default PlasmicPodcasterForm;
/* prettier-ignore-end */
