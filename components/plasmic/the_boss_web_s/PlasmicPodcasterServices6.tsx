// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 9OtI7XNdEKm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicPodcasterServices6.module.css"; // plasmic-import: 9OtI7XNdEKm/css

import Group12Icon from "./icons/PlasmicIcon__Group12"; // plasmic-import: qprEufAzJ8h/icon
import Group13Icon from "./icons/PlasmicIcon__Group13"; // plasmic-import: -5mzV579XW1/icon
import Group14Icon from "./icons/PlasmicIcon__Group14"; // plasmic-import: u-icB-RxJrS/icon
import Group15Icon from "./icons/PlasmicIcon__Group15"; // plasmic-import: lp4ywW_oH/icon
import Group16Icon from "./icons/PlasmicIcon__Group16"; // plasmic-import: dSVsf9dLeK/icon
import Layer11Icon from "./icons/PlasmicIcon__Layer11"; // plasmic-import: AKKy9AMxQl1/icon
import ManageAppsIcon from "./icons/PlasmicIcon__ManageApps"; // plasmic-import: wCrLKLegsh2/icon
import Layer5Icon from "./icons/PlasmicIcon__Layer5"; // plasmic-import: bSjAHajxkma/icon

export type PlasmicPodcasterServices6__VariantMembers = {};

export type PlasmicPodcasterServices6__VariantsArgs = {};
type VariantPropType = keyof PlasmicPodcasterServices6__VariantsArgs;
export const PlasmicPodcasterServices6__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPodcasterServices6__ArgsType = {};
type ArgPropType = keyof PlasmicPodcasterServices6__ArgsType;
export const PlasmicPodcasterServices6__ArgProps = new Array<ArgPropType>();

export type PlasmicPodcasterServices6__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<typeof SectionHeading>;
  freeBox?: p.Flex<"div">;
  frame85?: p.Flex<"div">;
  frame86?: p.Flex<"div">;
  frame83?: p.Flex<"div">;
  nounFilterContentCuration?: p.Flex<"div">;
  frame84?: p.Flex<"div">;
  frame87?: p.Flex<"div">;
  frame88?: p.Flex<"div">;
  nounMicrophonePodcastRecording?: p.Flex<"div">;
  frame89?: p.Flex<"div">;
  podcastRecording?: p.Flex<"div">;
  frame94?: p.Flex<"div">;
  frame96?: p.Flex<"div">;
  nounSoundPodcastEditing?: p.Flex<"div">;
  frame97?: p.Flex<"div">;
  frame98?: p.Flex<"div">;
  frame99?: p.Flex<"div">;
  nounContentRepurposing21?: p.Flex<"div">;
  frame100?: p.Flex<"div">;
  frame101?: p.Flex<"div">;
  frame102?: p.Flex<"div">;
  frame103?: p.Flex<"div">;
  nounVideoProduction?: p.Flex<"div">;
  frame104?: p.Flex<"div">;
  frame105?: p.Flex<"div">;
  frame106?: p.Flex<"div">;
  nounDigitalMarketing?: p.Flex<"div">;
  frame107?: p.Flex<"div">;
  frame108?: p.Flex<"div">;
  frame109?: p.Flex<"div">;
  nounPodcastManagement?: p.Flex<"div">;
  frame110?: p.Flex<"div">;
  frame111?: p.Flex<"div">;
  frame112?: p.Flex<"div">;
  nounTranscripts?: p.Flex<"div">;
  frame113?: p.Flex<"div">;
  frame282?: p.Flex<"div">;
  btn8?: p.Flex<"div">;
  btn9?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultPodcasterServices6Props {
  className?: string;
}

export const defaultPodcasterServices6__Args: Partial<PlasmicPodcasterServices6__ArgsType> =
  {};

function PlasmicPodcasterServices6__RenderFunc(props: {
  variants: PlasmicPodcasterServices6__VariantsArgs;
  args: PlasmicPodcasterServices6__ArgsType;
  overrides: PlasmicPodcasterServices6__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultPodcasterServices6__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SectionHeading
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        className={classNames("__wab_instance", sty.sectionHeading)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hyn42
          )}
        >
          {"The BOSS Services"}
        </div>
      </SectionHeading>

      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ngpoh
            )}
            id={"boss-services" as const}
          >
            {"Skyrocket Your Podcasting Career"}
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame85"}
        data-plasmic-override={overrides.frame85}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame85)}
      >
        <div className={classNames(projectcss.all, sty.column__fl5Zc)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame86"}
            data-plasmic-override={overrides.frame86}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame86)}
          >
            <div
              data-plasmic-name={"frame83"}
              data-plasmic-override={overrides.frame83}
              className={classNames(projectcss.all, sty.frame83)}
            >
              <div
                data-plasmic-name={"nounFilterContentCuration"}
                data-plasmic-override={overrides.nounFilterContentCuration}
                className={classNames(
                  projectcss.all,
                  sty.nounFilterContentCuration
                )}
              >
                <Group12Icon
                  className={classNames(projectcss.all, sty.svg__o66QW)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame84"}
              data-plasmic-override={overrides.frame84}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame84)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j0DRz
                )}
              >
                {"Content Curation"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aLpi
                )}
              >
                {
                  "Running out of topics? We will help you to conceptualize and curate the content that you want in your podcast based on your core belief and the vision of your podcast."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column___2IRH)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame87"}
            data-plasmic-override={overrides.frame87}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame87)}
          >
            <div
              data-plasmic-name={"frame88"}
              data-plasmic-override={overrides.frame88}
              className={classNames(projectcss.all, sty.frame88)}
            >
              <div
                data-plasmic-name={"nounMicrophonePodcastRecording"}
                data-plasmic-override={overrides.nounMicrophonePodcastRecording}
                className={classNames(
                  projectcss.all,
                  sty.nounMicrophonePodcastRecording
                )}
              >
                <Group13Icon
                  className={classNames(projectcss.all, sty.svg__hHbdW)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame89"}
              data-plasmic-override={overrides.frame89}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame89)}
            >
              <div
                data-plasmic-name={"podcastRecording"}
                data-plasmic-override={overrides.podcastRecording}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.podcastRecording
                )}
              >
                {"Podcast Recording "}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eOeHh
                )}
              >
                {
                  "Want to record your podcast professionally? With our top-notch equipment, you can now record your podcast in our professional set up in limited areas."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__m8Gnu)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame94"}
            data-plasmic-override={overrides.frame94}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame94)}
          >
            <div
              data-plasmic-name={"frame96"}
              data-plasmic-override={overrides.frame96}
              className={classNames(projectcss.all, sty.frame96)}
            >
              <div
                data-plasmic-name={"nounSoundPodcastEditing"}
                data-plasmic-override={overrides.nounSoundPodcastEditing}
                className={classNames(
                  projectcss.all,
                  sty.nounSoundPodcastEditing
                )}
              >
                <Group14Icon
                  className={classNames(projectcss.all, sty.svg___9NxtF)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame97"}
              data-plasmic-override={overrides.frame97}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame97)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7AaXw
                )}
              >
                {"Podcast Editing"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Tn15
                )}
              >
                {
                  "Finding it difficult of to edit your podcast? Don’t worry we’ll do it for you. The BOSS Media will help to professionally edit your podcast just the way you always desired it."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__fghQh)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame98"}
            data-plasmic-override={overrides.frame98}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame98)}
          >
            <div
              data-plasmic-name={"frame99"}
              data-plasmic-override={overrides.frame99}
              className={classNames(projectcss.all, sty.frame99)}
            >
              <div
                data-plasmic-name={"nounContentRepurposing21"}
                data-plasmic-override={overrides.nounContentRepurposing21}
                className={classNames(
                  projectcss.all,
                  sty.nounContentRepurposing21
                )}
              >
                <Group15Icon
                  className={classNames(projectcss.all, sty.svg__linSv)}
                  role={"img"}
                />
              </div>
            </div>

            <div
              data-plasmic-name={"frame100"}
              data-plasmic-override={overrides.frame100}
              className={classNames(projectcss.all, sty.frame100)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cYafe
                )}
              >
                {"Content Re-Purposing"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hTblJ
                )}
              >
                {
                  "Want to take your podcast to new listeners? The BOSS Media will help to programmatically to create marketable content for social media to push your podcast."
                }
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame101"}
        data-plasmic-override={overrides.frame101}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame101)}
      >
        <div className={classNames(projectcss.all, sty.column__yjmG6)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame102"}
            data-plasmic-override={overrides.frame102}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame102)}
          >
            <div
              data-plasmic-name={"frame103"}
              data-plasmic-override={overrides.frame103}
              className={classNames(projectcss.all, sty.frame103)}
            >
              <div
                data-plasmic-name={"nounVideoProduction"}
                data-plasmic-override={overrides.nounVideoProduction}
                className={classNames(projectcss.all, sty.nounVideoProduction)}
              >
                <Group16Icon
                  className={classNames(projectcss.all, sty.svg__tgFlq)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame104"}
              data-plasmic-override={overrides.frame104}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame104)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mg28R
                )}
              >
                {"Podcast Video Production"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yn5If
                )}
              >
                {
                  "Why limit to audio when you can reach your listener through video as well. With our live studio, podcasters can shoot their video episodes, create content for their social media and more."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__djNBj)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame105"}
            data-plasmic-override={overrides.frame105}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame105)}
          >
            <div
              data-plasmic-name={"frame106"}
              data-plasmic-override={overrides.frame106}
              className={classNames(projectcss.all, sty.frame106)}
            >
              <div
                data-plasmic-name={"nounDigitalMarketing"}
                data-plasmic-override={overrides.nounDigitalMarketing}
                className={classNames(projectcss.all, sty.nounDigitalMarketing)}
              >
                <Layer11Icon
                  className={classNames(projectcss.all, sty.svg__o4QB1)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame107"}
              data-plasmic-override={overrides.frame107}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame107)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x8OnB
                )}
              >
                {"Podcast Digital Marketing"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iRuqq
                )}
              >
                {
                  "Confused on digitally marketing your podcast, leave it to us. The BOSS Media can help you to digitally market your podcast and widen your community."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column___4WT4)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame108"}
            data-plasmic-override={overrides.frame108}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame108)}
          >
            <div
              data-plasmic-name={"frame109"}
              data-plasmic-override={overrides.frame109}
              className={classNames(projectcss.all, sty.frame109)}
            >
              <div
                data-plasmic-name={"nounPodcastManagement"}
                data-plasmic-override={overrides.nounPodcastManagement}
                className={classNames(
                  projectcss.all,
                  sty.nounPodcastManagement
                )}
              >
                <ManageAppsIcon
                  className={classNames(projectcss.all, sty.svg__zKqIi)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame110"}
              data-plasmic-override={overrides.frame110}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame110)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qoxBk
                )}
              >
                {"Podcast Management"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Pz7L
                )}
              >
                {
                  "Finding it difficult to think of content, get guests, record your podcast and editing it? We will take care of it. The BOSS Media will manage you podcast, you just have to record your podcast."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__sKcUl)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame111"}
            data-plasmic-override={overrides.frame111}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame111)}
          >
            <div
              data-plasmic-name={"frame112"}
              data-plasmic-override={overrides.frame112}
              className={classNames(projectcss.all, sty.frame112)}
            >
              <div
                data-plasmic-name={"nounTranscripts"}
                data-plasmic-override={overrides.nounTranscripts}
                className={classNames(projectcss.all, sty.nounTranscripts)}
              >
                <Layer5Icon
                  className={classNames(projectcss.all, sty.svg___4JIoU)}
                  role={"img"}
                />
              </div>
            </div>

            <div
              data-plasmic-name={"frame113"}
              data-plasmic-override={overrides.frame113}
              className={classNames(projectcss.all, sty.frame113)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d1GUn
                )}
              >
                {"Transcription & Shownotes"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lWfwX
                )}
              >
                {
                  "It seems hard to write content, our dedicated team of writers will transcribe your podcast and give you shownotes for every episode."
                }
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame282"}
        data-plasmic-override={overrides.frame282}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame282)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"btn8"}
            data-plasmic-override={overrides.btn8}
            hasGap={true}
            className={classNames(projectcss.all, sty.btn8)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yaozt
              )}
            >
              {"Sign-Up with BOSS"}
            </div>
          </p.Stack>
        ) : null}

        <p.Stack
          as={p.PlasmicLink}
          data-plasmic-name={"btn9"}
          data-plasmic-override={overrides.btn9}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.btn9)}
          component={Link}
          href={"https://www.calendar.com/the-balls-of-steel-show/" as const}
          platform={"nextjs"}
          target={"_blank" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nNjs7
            )}
          >
            {"Consult Us Now"}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "freeBox",
    "frame85",
    "frame86",
    "frame83",
    "nounFilterContentCuration",
    "frame84",
    "frame87",
    "frame88",
    "nounMicrophonePodcastRecording",
    "frame89",
    "podcastRecording",
    "frame94",
    "frame96",
    "nounSoundPodcastEditing",
    "frame97",
    "frame98",
    "frame99",
    "nounContentRepurposing21",
    "frame100",
    "frame101",
    "frame102",
    "frame103",
    "nounVideoProduction",
    "frame104",
    "frame105",
    "frame106",
    "nounDigitalMarketing",
    "frame107",
    "frame108",
    "frame109",
    "nounPodcastManagement",
    "frame110",
    "frame111",
    "frame112",
    "nounTranscripts",
    "frame113",
    "frame282",
    "btn8",
    "btn9"
  ],
  sectionHeading: ["sectionHeading"],
  freeBox: ["freeBox"],
  frame85: [
    "frame85",
    "frame86",
    "frame83",
    "nounFilterContentCuration",
    "frame84",
    "frame87",
    "frame88",
    "nounMicrophonePodcastRecording",
    "frame89",
    "podcastRecording",
    "frame94",
    "frame96",
    "nounSoundPodcastEditing",
    "frame97",
    "frame98",
    "frame99",
    "nounContentRepurposing21",
    "frame100"
  ],
  frame86: ["frame86", "frame83", "nounFilterContentCuration", "frame84"],
  frame83: ["frame83", "nounFilterContentCuration"],
  nounFilterContentCuration: ["nounFilterContentCuration"],
  frame84: ["frame84"],
  frame87: [
    "frame87",
    "frame88",
    "nounMicrophonePodcastRecording",
    "frame89",
    "podcastRecording"
  ],
  frame88: ["frame88", "nounMicrophonePodcastRecording"],
  nounMicrophonePodcastRecording: ["nounMicrophonePodcastRecording"],
  frame89: ["frame89", "podcastRecording"],
  podcastRecording: ["podcastRecording"],
  frame94: ["frame94", "frame96", "nounSoundPodcastEditing", "frame97"],
  frame96: ["frame96", "nounSoundPodcastEditing"],
  nounSoundPodcastEditing: ["nounSoundPodcastEditing"],
  frame97: ["frame97"],
  frame98: ["frame98", "frame99", "nounContentRepurposing21", "frame100"],
  frame99: ["frame99", "nounContentRepurposing21"],
  nounContentRepurposing21: ["nounContentRepurposing21"],
  frame100: ["frame100"],
  frame101: [
    "frame101",
    "frame102",
    "frame103",
    "nounVideoProduction",
    "frame104",
    "frame105",
    "frame106",
    "nounDigitalMarketing",
    "frame107",
    "frame108",
    "frame109",
    "nounPodcastManagement",
    "frame110",
    "frame111",
    "frame112",
    "nounTranscripts",
    "frame113"
  ],
  frame102: ["frame102", "frame103", "nounVideoProduction", "frame104"],
  frame103: ["frame103", "nounVideoProduction"],
  nounVideoProduction: ["nounVideoProduction"],
  frame104: ["frame104"],
  frame105: ["frame105", "frame106", "nounDigitalMarketing", "frame107"],
  frame106: ["frame106", "nounDigitalMarketing"],
  nounDigitalMarketing: ["nounDigitalMarketing"],
  frame107: ["frame107"],
  frame108: ["frame108", "frame109", "nounPodcastManagement", "frame110"],
  frame109: ["frame109", "nounPodcastManagement"],
  nounPodcastManagement: ["nounPodcastManagement"],
  frame110: ["frame110"],
  frame111: ["frame111", "frame112", "nounTranscripts", "frame113"],
  frame112: ["frame112", "nounTranscripts"],
  nounTranscripts: ["nounTranscripts"],
  frame113: ["frame113"],
  frame282: ["frame282", "btn8", "btn9"],
  btn8: ["btn8"],
  btn9: ["btn9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: typeof SectionHeading;
  freeBox: "div";
  frame85: "div";
  frame86: "div";
  frame83: "div";
  nounFilterContentCuration: "div";
  frame84: "div";
  frame87: "div";
  frame88: "div";
  nounMicrophonePodcastRecording: "div";
  frame89: "div";
  podcastRecording: "div";
  frame94: "div";
  frame96: "div";
  nounSoundPodcastEditing: "div";
  frame97: "div";
  frame98: "div";
  frame99: "div";
  nounContentRepurposing21: "div";
  frame100: "div";
  frame101: "div";
  frame102: "div";
  frame103: "div";
  nounVideoProduction: "div";
  frame104: "div";
  frame105: "div";
  frame106: "div";
  nounDigitalMarketing: "div";
  frame107: "div";
  frame108: "div";
  frame109: "div";
  nounPodcastManagement: "div";
  frame110: "div";
  frame111: "div";
  frame112: "div";
  nounTranscripts: "div";
  frame113: "div";
  frame282: "div";
  btn8: "div";
  btn9: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPodcasterServices6__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPodcasterServices6__VariantsArgs;
    args?: PlasmicPodcasterServices6__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPodcasterServices6__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPodcasterServices6__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPodcasterServices6__ArgProps,
      internalVariantPropNames: PlasmicPodcasterServices6__VariantProps
    });

    return PlasmicPodcasterServices6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPodcasterServices6";
  } else {
    func.displayName = `PlasmicPodcasterServices6.${nodeName}`;
  }
  return func;
}

export const PlasmicPodcasterServices6 = Object.assign(
  // Top-level PlasmicPodcasterServices6 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    freeBox: makeNodeComponent("freeBox"),
    frame85: makeNodeComponent("frame85"),
    frame86: makeNodeComponent("frame86"),
    frame83: makeNodeComponent("frame83"),
    nounFilterContentCuration: makeNodeComponent("nounFilterContentCuration"),
    frame84: makeNodeComponent("frame84"),
    frame87: makeNodeComponent("frame87"),
    frame88: makeNodeComponent("frame88"),
    nounMicrophonePodcastRecording: makeNodeComponent(
      "nounMicrophonePodcastRecording"
    ),
    frame89: makeNodeComponent("frame89"),
    podcastRecording: makeNodeComponent("podcastRecording"),
    frame94: makeNodeComponent("frame94"),
    frame96: makeNodeComponent("frame96"),
    nounSoundPodcastEditing: makeNodeComponent("nounSoundPodcastEditing"),
    frame97: makeNodeComponent("frame97"),
    frame98: makeNodeComponent("frame98"),
    frame99: makeNodeComponent("frame99"),
    nounContentRepurposing21: makeNodeComponent("nounContentRepurposing21"),
    frame100: makeNodeComponent("frame100"),
    frame101: makeNodeComponent("frame101"),
    frame102: makeNodeComponent("frame102"),
    frame103: makeNodeComponent("frame103"),
    nounVideoProduction: makeNodeComponent("nounVideoProduction"),
    frame104: makeNodeComponent("frame104"),
    frame105: makeNodeComponent("frame105"),
    frame106: makeNodeComponent("frame106"),
    nounDigitalMarketing: makeNodeComponent("nounDigitalMarketing"),
    frame107: makeNodeComponent("frame107"),
    frame108: makeNodeComponent("frame108"),
    frame109: makeNodeComponent("frame109"),
    nounPodcastManagement: makeNodeComponent("nounPodcastManagement"),
    frame110: makeNodeComponent("frame110"),
    frame111: makeNodeComponent("frame111"),
    frame112: makeNodeComponent("frame112"),
    nounTranscripts: makeNodeComponent("nounTranscripts"),
    frame113: makeNodeComponent("frame113"),
    frame282: makeNodeComponent("frame282"),
    btn8: makeNodeComponent("btn8"),
    btn9: makeNodeComponent("btn9"),

    // Metadata about props expected for PlasmicPodcasterServices6
    internalVariantProps: PlasmicPodcasterServices6__VariantProps,
    internalArgProps: PlasmicPodcasterServices6__ArgProps
  }
);

export default PlasmicPodcasterServices6;
/* prettier-ignore-end */
