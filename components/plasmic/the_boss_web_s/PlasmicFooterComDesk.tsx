// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: H9tCPDoO68
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SubscribeCom from "../../SubscribeCom"; // plasmic-import: 2a3pU-rBM-T/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicFooterComDesk.module.css"; // plasmic-import: H9tCPDoO68/css

import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: DYuMPk5vfYy/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: g_9E3npC4Lr/icon
import Frame276Icon from "./icons/PlasmicIcon__Frame276"; // plasmic-import: hInYp9_B2ZK/icon
import YoutubeIcon from "./icons/PlasmicIcon__Youtube"; // plasmic-import: TzR2yHhj4vB/icon
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: eA56ygfU6bv/icon
import FacebookIcon from "./icons/PlasmicIcon__Facebook"; // plasmic-import: aBN7vzBUv15/icon

export type PlasmicFooterComDesk__VariantMembers = {};

export type PlasmicFooterComDesk__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterComDesk__VariantsArgs;
export const PlasmicFooterComDesk__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterComDesk__ArgsType = {};
type ArgPropType = keyof PlasmicFooterComDesk__ArgsType;
export const PlasmicFooterComDesk__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterComDesk__OverridesType = {
  root?: p.Flex<"div">;
  footerSection?: p.Flex<"div">;
  podcastwidget?: p.Flex<"div">;
  podcast?: p.Flex<"div">;
  podcastlabel?: p.Flex<"div">;
  btnCtaPrimary2?: p.Flex<"a"> & Partial<LinkProps>;
  navLinks?: p.Flex<"div">;
  frame25?: p.Flex<"div">;
  moreLinks?: p.Flex<"div">;
  frame26?: p.Flex<"div">;
  subscribeCom?: p.Flex<typeof SubscribeCom>;
  frame29?: p.Flex<"div">;
};

export interface DefaultFooterComDeskProps {
  className?: string;
}

export const defaultFooterComDesk__Args: Partial<PlasmicFooterComDesk__ArgsType> =
  {};

function PlasmicFooterComDesk__RenderFunc(props: {
  variants: PlasmicFooterComDesk__VariantsArgs;
  args: PlasmicFooterComDesk__ArgsType;
  overrides: PlasmicFooterComDesk__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFooterComDesk__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.footerSection)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9M2Gh)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xpYfn)}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"podcastwidget"}
                        data-plasmic-override={overrides.podcastwidget}
                        className={classNames(
                          projectcss.all,
                          sty.podcastwidget
                        )}
                      >
                        <div
                          data-plasmic-name={"podcast"}
                          data-plasmic-override={overrides.podcast}
                          className={classNames(projectcss.all, sty.podcast)}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"podcastlabel"}
                            data-plasmic-override={overrides.podcastlabel}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.podcastlabel
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mqRe
                              )}
                            >
                              {"The Balls Of Steel Show"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nA8Y
                              )}
                            >
                              {"Sarthak Varshney"}
                            </div>

                            <p.Stack
                              as={p.PlasmicLink}
                              data-plasmic-name={"btnCtaPrimary2"}
                              data-plasmic-override={overrides.btnCtaPrimary2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.btnCtaPrimary2
                              )}
                              component={Link}
                              href={"/podcast" as const}
                              platform={"nextjs"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lpekQ
                                )}
                              >
                                {"Go to Podcast"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        ) : null}
                      </div>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fdLc
                      )}
                    >
                      {"About the show"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fy2Vo
                      )}
                    >
                      {
                        "This show brings up the journey of those entrepreneurs who are still in the process of touching the peak of Everest. The ones who have done something and are still unknown. The ones who have enough balls to have set their foot on the paddle of following the path they wish to ride and not what the world directs them to. Let's jump in and have an insight into their minds and see how they're doing their dhandha (business)"
                      }
                    </div>
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__siGqs)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"navLinks"}
                      data-plasmic-override={overrides.navLinks}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.navLinks)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v5WpT
                        )}
                      >
                        {"Navigation"}
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame25"}
                        data-plasmic-override={overrides.frame25}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame25)}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__r0Q3P
                          )}
                          component={Link}
                          href={"/" as const}
                          platform={"nextjs"}
                        >
                          {"Home"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___9UxdF
                          )}
                          component={Link}
                          href={"/guests" as const}
                          platform={"nextjs"}
                        >
                          {"Guests"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__axAi4
                          )}
                          component={Link}
                          href={"/advertisers" as const}
                          platform={"nextjs"}
                        >
                          {"For Advertisers"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__yNmxG
                          )}
                          component={Link}
                          href={"/podcasters" as const}
                          platform={"nextjs"}
                        >
                          {"For Podcasters"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__jPb0Y
                          )}
                          component={Link}
                          href={"/production" as const}
                          platform={"nextjs"}
                        >
                          {"Podcast Production"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__x2G5
                          )}
                          component={Link}
                          href={
                            "https://contenthouse.ballsofsteelshow.com" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          {"Content House"}
                        </p.PlasmicLink>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"moreLinks"}
                      data-plasmic-override={overrides.moreLinks}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.moreLinks)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qVqex
                        )}
                      >
                        {"Company"}
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame26"}
                        data-plasmic-override={overrides.frame26}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame26)}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__eDhVz
                          )}
                          component={Link}
                          href={"/about" as const}
                          platform={"nextjs"}
                        >
                          {"About"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___0SXiH
                          )}
                          component={Link}
                          href={"/contact" as const}
                          platform={"nextjs"}
                        >
                          {"Contact"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__hPs01
                          )}
                          component={Link}
                          href={"/terms" as const}
                          platform={"nextjs"}
                        >
                          {"Terms of use"}
                        </p.PlasmicLink>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <SubscribeCom
                  data-plasmic-name={"subscribeCom"}
                  data-plasmic-override={overrides.subscribeCom}
                  className={classNames("__wab_instance", sty.subscribeCom)}
                />
              </p.Stack>
            ) : null}

            <Line1Icon
              className={classNames(projectcss.all, sty.svg__jBpV2)}
              role={"img"}
            />

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eekBk)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___28GjK
                  )}
                >
                  {"Copyright © All rights reserved | The Balls Of Steel Show"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame29"}
                  data-plasmic-override={overrides.frame29}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame29)}
                >
                  {true ? (
                    <p.PlasmicLink
                      aria-label={"linkedin page button" as const}
                      aria-labelledby={"" as const}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__jvWRl
                      )}
                      component={Link}
                      href={
                        "https://www.linkedin.com/company/the-balls-of-steel-show/" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <LinkedinIcon
                        className={classNames(projectcss.all, sty.svg__xpT6Q)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      aria-label={"instagram page link" as const}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__xn9Tg
                      )}
                      component={Link}
                      href={
                        "https://www.instagram.com/theballsofsteelshow/" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <Frame276Icon
                        className={classNames(projectcss.all, sty.svg__eQdIz)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      aria-label={"youtube page link" as const}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__cgqhd
                      )}
                      component={Link}
                      href={
                        "https://www.youtube.com/channel/UCbg7GVJBxYvxPbIIHzGsSVg" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <YoutubeIcon
                        className={classNames(projectcss.all, sty.svg__vd3Xt)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      aria-label={"twitter page link" as const}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__p0XKl
                      )}
                      component={Link}
                      href={"https://twitter.com/VarshneySaheb" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <TwitterIcon
                        className={classNames(projectcss.all, sty.svg__b44Ik)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      aria-label={"facebook page link" as const}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__sn0J
                      )}
                      component={Link}
                      href={
                        "https://www.facebook.com/theballsofsteelshow/" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <FacebookIcon
                        className={classNames(projectcss.all, sty.svg___6UoF)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  ) : null}
                </p.Stack>
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "footerSection",
    "podcastwidget",
    "podcast",
    "podcastlabel",
    "btnCtaPrimary2",
    "navLinks",
    "frame25",
    "moreLinks",
    "frame26",
    "subscribeCom",
    "frame29"
  ],
  footerSection: [
    "footerSection",
    "podcastwidget",
    "podcast",
    "podcastlabel",
    "btnCtaPrimary2",
    "navLinks",
    "frame25",
    "moreLinks",
    "frame26",
    "subscribeCom",
    "frame29"
  ],
  podcastwidget: ["podcastwidget", "podcast", "podcastlabel", "btnCtaPrimary2"],
  podcast: ["podcast"],
  podcastlabel: ["podcastlabel", "btnCtaPrimary2"],
  btnCtaPrimary2: ["btnCtaPrimary2"],
  navLinks: ["navLinks", "frame25"],
  frame25: ["frame25"],
  moreLinks: ["moreLinks", "frame26"],
  frame26: ["frame26"],
  subscribeCom: ["subscribeCom"],
  frame29: ["frame29"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  footerSection: "div";
  podcastwidget: "div";
  podcast: "div";
  podcastlabel: "div";
  btnCtaPrimary2: "a";
  navLinks: "div";
  frame25: "div";
  moreLinks: "div";
  frame26: "div";
  subscribeCom: typeof SubscribeCom;
  frame29: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterComDesk__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterComDesk__VariantsArgs;
    args?: PlasmicFooterComDesk__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterComDesk__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterComDesk__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterComDesk__ArgProps,
      internalVariantPropNames: PlasmicFooterComDesk__VariantProps
    });

    return PlasmicFooterComDesk__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterComDesk";
  } else {
    func.displayName = `PlasmicFooterComDesk.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterComDesk = Object.assign(
  // Top-level PlasmicFooterComDesk renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footerSection: makeNodeComponent("footerSection"),
    podcastwidget: makeNodeComponent("podcastwidget"),
    podcast: makeNodeComponent("podcast"),
    podcastlabel: makeNodeComponent("podcastlabel"),
    btnCtaPrimary2: makeNodeComponent("btnCtaPrimary2"),
    navLinks: makeNodeComponent("navLinks"),
    frame25: makeNodeComponent("frame25"),
    moreLinks: makeNodeComponent("moreLinks"),
    frame26: makeNodeComponent("frame26"),
    subscribeCom: makeNodeComponent("subscribeCom"),
    frame29: makeNodeComponent("frame29"),

    // Metadata about props expected for PlasmicFooterComDesk
    internalVariantProps: PlasmicFooterComDesk__VariantProps,
    internalArgProps: PlasmicFooterComDesk__ArgProps
  }
);

export default PlasmicFooterComDesk;
/* prettier-ignore-end */
