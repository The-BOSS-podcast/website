// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: Dd02V_gwsj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicBrandlist.module.css"; // plasmic-import: Dd02V_gwsj/css

export type PlasmicBrandlist__VariantMembers = {};

export type PlasmicBrandlist__VariantsArgs = {};
type VariantPropType = keyof PlasmicBrandlist__VariantsArgs;
export const PlasmicBrandlist__VariantProps = new Array<VariantPropType>();

export type PlasmicBrandlist__ArgsType = {};
type ArgPropType = keyof PlasmicBrandlist__ArgsType;
export const PlasmicBrandlist__ArgProps = new Array<ArgPropType>();

export type PlasmicBrandlist__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
};

export interface DefaultBrandlistProps {
  className?: string;
}

function PlasmicBrandlist__RenderFunc(props: {
  variants: PlasmicBrandlist__VariantsArgs;
  args: PlasmicBrandlist__ArgsType;
  overrides: PlasmicBrandlist__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__otztJ)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___3Enbd)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__tiHkg)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image3.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__hDgkl)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__iWk6L)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__t6I3J)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image5Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__lsuoF)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__bLtnh)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__q2WsJ)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/_1623395853RageCoffeeVitaBlendMediumRoastGroundCoffeeSouthIndianFilterPress250GLogopng.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__nBVoa)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__lVy2L)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__aq8ML)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image10Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__uEz8X)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__eUyJ)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zczrR)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image9Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__a1Pwi)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__hbUDn)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___2Kna9)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image8Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__zzdlX)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__l4WwB)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ioyuo)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image4Png2.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__wgyv)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__nb6Nf)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___9WZwC)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/zeppng.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__gfw9F)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__jGePh)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___2De0G)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image1Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__gHyVj)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__b49CT)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ztn3U)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image3Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__tjwpR)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___1I5Tr)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___66Rn)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/imagepng3.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.column__elv9W)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__vSoHz)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yozUn)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/image13Png.png",
                    fullWidth: 300,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBrandlist__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBrandlist__VariantsArgs;
    args?: PlasmicBrandlist__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBrandlist__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBrandlist__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBrandlist__ArgProps,
          internalVariantPropNames: PlasmicBrandlist__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBrandlist__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBrandlist";
  } else {
    func.displayName = `PlasmicBrandlist.${nodeName}`;
  }
  return func;
}

export const PlasmicBrandlist = Object.assign(
  // Top-level PlasmicBrandlist renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicBrandlist
    internalVariantProps: PlasmicBrandlist__VariantProps,
    internalArgProps: PlasmicBrandlist__ArgProps
  }
);

export default PlasmicBrandlist;
/* prettier-ignore-end */
