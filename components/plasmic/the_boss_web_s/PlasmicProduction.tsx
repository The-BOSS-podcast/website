// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: rLDL4B6Np6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarRes from "../../NavBarRes"; // plasmic-import: hi-mET-ngC/component
import SectionHeading from "../../SectionHeading"; // plasmic-import: 9cHukr1vk4/component
import FooterComDesk from "../../FooterComDesk"; // plasmic-import: H9tCPDoO68/component

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicProduction.module.css"; // plasmic-import: rLDL4B6Np6/css

import _26MixerIcon from "./icons/PlasmicIcon___26Mixer"; // plasmic-import: 5bgq_DZLf/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: f6fO5QmWCe/icon
import _28PodcastIcon from "./icons/PlasmicIcon___28Podcast"; // plasmic-import: Keook0Tn5ZA/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: jL3qpsJfhll/icon
import Group12Icon from "./icons/PlasmicIcon__Group12"; // plasmic-import: qprEufAzJ8h/icon
import Group13Icon from "./icons/PlasmicIcon__Group13"; // plasmic-import: -5mzV579XW1/icon
import Group14Icon from "./icons/PlasmicIcon__Group14"; // plasmic-import: u-icB-RxJrS/icon
import Group15Icon from "./icons/PlasmicIcon__Group15"; // plasmic-import: lp4ywW_oH/icon
import Group16Icon from "./icons/PlasmicIcon__Group16"; // plasmic-import: dSVsf9dLeK/icon
import Layer11Icon from "./icons/PlasmicIcon__Layer11"; // plasmic-import: AKKy9AMxQl1/icon
import ManageAppsIcon from "./icons/PlasmicIcon__ManageApps"; // plasmic-import: wCrLKLegsh2/icon
import Layer5Icon from "./icons/PlasmicIcon__Layer5"; // plasmic-import: bSjAHajxkma/icon

export type PlasmicProduction__VariantMembers = {};

export type PlasmicProduction__VariantsArgs = {};
type VariantPropType = keyof PlasmicProduction__VariantsArgs;
export const PlasmicProduction__VariantProps = new Array<VariantPropType>();

export type PlasmicProduction__ArgsType = {};
type ArgPropType = keyof PlasmicProduction__ArgsType;
export const PlasmicProduction__ArgProps = new Array<ArgPropType>();

export type PlasmicProduction__OverridesType = {
  root?: p.Flex<"div">;
  navBarRes?: p.Flex<typeof NavBarRes>;
  production?: p.Flex<"div">;
  ctAs?: p.Flex<"div">;
  frame282?: p.Flex<"div">;
  btn8?: p.Flex<"div">;
  btn9?: p.Flex<"a"> & Partial<LinkProps>;
  frame85?: p.Flex<"div">;
  frame86?: p.Flex<"div">;
  frame83?: p.Flex<"div">;
  nounMixerPodcastProd?: p.Flex<"div">;
  frame84?: p.Flex<"div">;
  frame87?: p.Flex<"div">;
  frame88?: p.Flex<"div">;
  nounPodcastPodcastAdv?: p.Flex<"div">;
  frame89?: p.Flex<"div">;
  frame90?: p.Flex<"div">;
  frame91?: p.Flex<"div">;
  nounPodcastGuestFeature?: p.Flex<"div">;
  frame92?: p.Flex<"div">;
  frame93?: p.Flex<"div">;
  frame94?: p.Flex<"div">;
  nounCustomizeCustomService1?: p.Flex<"div">;
  frame95?: p.Flex<"div">;
  frame114?: p.Flex<"div">;
  frame115?: p.Flex<"div">;
  frame116?: p.Flex<"div">;
  nounFilterContentCuration?: p.Flex<"div">;
  frame117?: p.Flex<"div">;
  frame118?: p.Flex<"div">;
  frame119?: p.Flex<"div">;
  nounMicrophonePodcastRecording?: p.Flex<"div">;
  frame120?: p.Flex<"div">;
  podcastRecording?: p.Flex<"div">;
  frame121?: p.Flex<"div">;
  frame96?: p.Flex<"div">;
  nounSoundPodcastEditing?: p.Flex<"div">;
  frame97?: p.Flex<"div">;
  frame98?: p.Flex<"div">;
  frame99?: p.Flex<"div">;
  nounContentRepurposing21?: p.Flex<"div">;
  frame100?: p.Flex<"div">;
  frame101?: p.Flex<"div">;
  frame102?: p.Flex<"div">;
  frame103?: p.Flex<"div">;
  nounVideoProduction?: p.Flex<"div">;
  frame104?: p.Flex<"div">;
  frame105?: p.Flex<"div">;
  frame106?: p.Flex<"div">;
  nounDigitalMarketing?: p.Flex<"div">;
  frame107?: p.Flex<"div">;
  frame108?: p.Flex<"div">;
  frame109?: p.Flex<"div">;
  nounPodcastManagement?: p.Flex<"div">;
  frame110?: p.Flex<"div">;
  frame111?: p.Flex<"div">;
  frame112?: p.Flex<"div">;
  nounTranscripts?: p.Flex<"div">;
  frame113?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  videoBoss?: p.Flex<"div">;
  rectangle34?: p.Flex<"div">;
  group8?: p.Flex<"div">;
  frame280?: p.Flex<"div">;
  btn3?: p.Flex<"div">;
  btn4?: p.Flex<"a"> & Partial<LinkProps>;
  footerComDesk?: p.Flex<typeof FooterComDesk>;
};

export interface DefaultProductionProps {}

export const defaultProduction__Args: Partial<PlasmicProduction__ArgsType> = {};

function PlasmicProduction__RenderFunc(props: {
  variants: PlasmicProduction__VariantsArgs;
  args: PlasmicProduction__ArgsType;
  overrides: PlasmicProduction__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultProduction__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Podcast Production"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Podcast Production"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBarRes
            data-plasmic-name={"navBarRes"}
            data-plasmic-override={overrides.navBarRes}
            className={classNames("__wab_instance", sty.navBarRes)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"production"}
              data-plasmic-override={overrides.production}
              className={classNames(projectcss.all, sty.production)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eJvW)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__pac5K)}
                  displayHeight={"165px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"186.738px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/emoji3.svg",
                    fullWidth: 186.738,
                    fullHeight: 165,
                    aspectRatio: 1.133333
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__soR6O
                  )}
                >
                  {"Create an Impact. \nWith Your Own Podcast Show"}
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g9X8J)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wr7Sc
                      )}
                    >
                      {
                        "The BOSS produces podcasts shows for different brands and individuals. \nWe are a one-stop-solution for podcast shows that helps the brand and individuals from\nconceptualizing to distributing their podcast show."
                      }
                    </div>
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"ctAs"}
                  data-plasmic-override={overrides.ctAs}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.ctAs)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame282"}
                    data-plasmic-override={overrides.frame282}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame282)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"btn8"}
                        data-plasmic-override={overrides.btn8}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.btn8)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vGnoY
                          )}
                        >
                          {"Sign-Up with BOSS"}
                        </div>
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={p.PlasmicLink}
                      data-plasmic-name={"btn9"}
                      data-plasmic-override={overrides.btn9}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.btn9
                      )}
                      component={Link}
                      href={
                        "https://www.calendar.com/the-balls-of-steel-show/" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xalch
                        )}
                      >
                        {"Consult Us Now"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qsaRp)}
                  displayHeight={"180px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"180px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/the_boss_web_s/images/emoji4.svg",
                    fullWidth: 180,
                    fullHeight: 180,
                    aspectRatio: 1
                  }}
                />
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__h1O7N)}
                >
                  <SectionHeading
                    className={classNames(
                      "__wab_instance",
                      sty.sectionHeading__xsVAa
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "What BOSS offers"
                      : "What BOSS Offers"}
                  </SectionHeading>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vRokX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ulHdd
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "The BOSS is your one-stop podcasting solution"
                          : "The BOSS is your one-stop podcasting solution"}
                      </div>
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame85"}
                    data-plasmic-override={overrides.frame85}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame85)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__xoYr4)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame86"}
                        data-plasmic-override={overrides.frame86}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame86)}
                      >
                        <div
                          data-plasmic-name={"frame83"}
                          data-plasmic-override={overrides.frame83}
                          className={classNames(projectcss.all, sty.frame83)}
                        >
                          <div
                            data-plasmic-name={"nounMixerPodcastProd"}
                            data-plasmic-override={
                              overrides.nounMixerPodcastProd
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounMixerPodcastProd
                            )}
                          >
                            <_26MixerIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lr4FA
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame84"}
                          data-plasmic-override={overrides.frame84}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame84)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x4NsM
                            )}
                          >
                            {"Podcast Production"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0PNAk
                            )}
                          >
                            {
                              "The BOSS Media renders an end-to-end podcast production service beginning from concept conceptualizing to distributing and marketing content."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__geodt)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame87"}
                        data-plasmic-override={overrides.frame87}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame87)}
                      >
                        <div
                          data-plasmic-name={"frame88"}
                          data-plasmic-override={overrides.frame88}
                          className={classNames(projectcss.all, sty.frame88)}
                        >
                          <div
                            data-plasmic-name={"nounPodcastPodcastAdv"}
                            data-plasmic-override={
                              overrides.nounPodcastPodcastAdv
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounPodcastPodcastAdv
                            )}
                          >
                            <Group3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vOOef
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame89"}
                          data-plasmic-override={overrides.frame89}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame89)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__it87X
                            )}
                          >
                            {"Podcast Branding"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5UovT
                            )}
                          >
                            {
                              "The BOSS will help you to create custom logos, branding and stationery for your podcast"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__qqU4I)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame90"}
                        data-plasmic-override={overrides.frame90}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame90)}
                      >
                        <div
                          data-plasmic-name={"frame91"}
                          data-plasmic-override={overrides.frame91}
                          className={classNames(projectcss.all, sty.frame91)}
                        >
                          <div
                            data-plasmic-name={"nounPodcastGuestFeature"}
                            data-plasmic-override={
                              overrides.nounPodcastGuestFeature
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounPodcastGuestFeature
                            )}
                          >
                            <_28PodcastIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uxJo2
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame92"}
                          data-plasmic-override={overrides.frame92}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame92)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mjYul
                            )}
                          >
                            {"Guest Featuring"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Bo
                            )}
                          >
                            {
                              "The BOSS Media caters to guest acquisition, guest management and handling in different domains"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__puDHi)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame93"}
                        data-plasmic-override={overrides.frame93}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame93)}
                      >
                        <div
                          data-plasmic-name={"frame94"}
                          data-plasmic-override={overrides.frame94}
                          className={classNames(projectcss.all, sty.frame94)}
                        >
                          <div
                            data-plasmic-name={"nounCustomizeCustomService1"}
                            data-plasmic-override={
                              overrides.nounCustomizeCustomService1
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounCustomizeCustomService1
                            )}
                          >
                            <Group4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hyB5
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame95"}
                          data-plasmic-override={overrides.frame95}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame95)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__heWHl
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Custom Podcast Service"
                              : "Custom Podcast Service"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9U0ZY
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "The BOSS Media has specialized tailor cut custom podcast service that caters to the specific podcasting needs including seasonal and special edition episodes."
                              : "The BOSS Media has specialized tailor cut custom podcast service that caters to the specific podcasting needs including seasonal and special edition episodes."}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame114"}
                    data-plasmic-override={overrides.frame114}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame114)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__jmcZt)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame115"}
                        data-plasmic-override={overrides.frame115}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame115)}
                      >
                        <div
                          data-plasmic-name={"frame116"}
                          data-plasmic-override={overrides.frame116}
                          className={classNames(projectcss.all, sty.frame116)}
                        >
                          <div
                            data-plasmic-name={"nounFilterContentCuration"}
                            data-plasmic-override={
                              overrides.nounFilterContentCuration
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounFilterContentCuration
                            )}
                          >
                            <Group12Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__sBe8
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame117"}
                          data-plasmic-override={overrides.frame117}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame117)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zCp7U
                            )}
                          >
                            {"Content Curation"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sCwjE
                            )}
                          >
                            {
                              "Running out of topics? We will help you to conceptualize and curate the content that you want in your podcast based on your core belief and the vision of your podcast."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__a8Vfv)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame118"}
                        data-plasmic-override={overrides.frame118}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame118)}
                      >
                        <div
                          data-plasmic-name={"frame119"}
                          data-plasmic-override={overrides.frame119}
                          className={classNames(projectcss.all, sty.frame119)}
                        >
                          <div
                            data-plasmic-name={"nounMicrophonePodcastRecording"}
                            data-plasmic-override={
                              overrides.nounMicrophonePodcastRecording
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounMicrophonePodcastRecording
                            )}
                          >
                            <Group13Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__reqiI
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame120"}
                          data-plasmic-override={overrides.frame120}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame120)}
                        >
                          <div
                            data-plasmic-name={"podcastRecording"}
                            data-plasmic-override={overrides.podcastRecording}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.podcastRecording
                            )}
                          >
                            {"Podcast Recording "}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7RAml
                            )}
                          >
                            {
                              "Want to record your podcast professionally? With our top-notch equipment, you can now record your podcast in our professional set up in limited areas."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__kdSSr)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame121"}
                        data-plasmic-override={overrides.frame121}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame121)}
                      >
                        <div
                          data-plasmic-name={"frame96"}
                          data-plasmic-override={overrides.frame96}
                          className={classNames(projectcss.all, sty.frame96)}
                        >
                          <div
                            data-plasmic-name={"nounSoundPodcastEditing"}
                            data-plasmic-override={
                              overrides.nounSoundPodcastEditing
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounSoundPodcastEditing
                            )}
                          >
                            <Group14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mpemk
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame97"}
                          data-plasmic-override={overrides.frame97}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame97)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__omKcx
                            )}
                          >
                            {"Podcast Editing"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l3Yb
                            )}
                          >
                            {
                              "Finding it difficult of to edit your podcast? Don’t worry we’ll do it for you. The BOSS Media will help to professionally edit your podcast just the way you always desired it."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__s8Jjb)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame98"}
                        data-plasmic-override={overrides.frame98}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame98)}
                      >
                        <div
                          data-plasmic-name={"frame99"}
                          data-plasmic-override={overrides.frame99}
                          className={classNames(projectcss.all, sty.frame99)}
                        >
                          <div
                            data-plasmic-name={"nounContentRepurposing21"}
                            data-plasmic-override={
                              overrides.nounContentRepurposing21
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounContentRepurposing21
                            )}
                          >
                            <Group15Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ddnjc
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"frame100"}
                          data-plasmic-override={overrides.frame100}
                          className={classNames(projectcss.all, sty.frame100)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wn8SU
                            )}
                          >
                            {"Content Re-Purposing"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Ye32
                            )}
                          >
                            {
                              "Want to take your podcast to new listeners? The BOSS Media will help to programmatically to create marketable content for social media to push your podcast."
                            }
                          </div>
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame101"}
                    data-plasmic-override={overrides.frame101}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame101)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__phlal)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame102"}
                        data-plasmic-override={overrides.frame102}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame102)}
                      >
                        <div
                          data-plasmic-name={"frame103"}
                          data-plasmic-override={overrides.frame103}
                          className={classNames(projectcss.all, sty.frame103)}
                        >
                          <div
                            data-plasmic-name={"nounVideoProduction"}
                            data-plasmic-override={
                              overrides.nounVideoProduction
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounVideoProduction
                            )}
                          >
                            <Group16Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__n3COu
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame104"}
                          data-plasmic-override={overrides.frame104}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame104)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vgUhh
                            )}
                          >
                            {"Podcast Video Production"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xtXjw
                            )}
                          >
                            {
                              "Why limit to audio when you can reach your listener through video as well. With our live studio, you can shoot their video episodes, create content for their social media and more."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__tXfyJ)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame105"}
                        data-plasmic-override={overrides.frame105}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame105)}
                      >
                        <div
                          data-plasmic-name={"frame106"}
                          data-plasmic-override={overrides.frame106}
                          className={classNames(projectcss.all, sty.frame106)}
                        >
                          <div
                            data-plasmic-name={"nounDigitalMarketing"}
                            data-plasmic-override={
                              overrides.nounDigitalMarketing
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounDigitalMarketing
                            )}
                          >
                            <Layer11Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__w113L
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame107"}
                          data-plasmic-override={overrides.frame107}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame107)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9VKht
                            )}
                          >
                            {"Podcast Digital Marketing"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mLMhl
                            )}
                          >
                            {
                              "Confused on digitally marketing your podcast, leave it to us. The BOSS Media can help you to digitally market your podcast and widen your community."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__y8YxP)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame108"}
                        data-plasmic-override={overrides.frame108}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame108)}
                      >
                        <div
                          data-plasmic-name={"frame109"}
                          data-plasmic-override={overrides.frame109}
                          className={classNames(projectcss.all, sty.frame109)}
                        >
                          <div
                            data-plasmic-name={"nounPodcastManagement"}
                            data-plasmic-override={
                              overrides.nounPodcastManagement
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nounPodcastManagement
                            )}
                          >
                            <ManageAppsIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7XWxt
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame110"}
                          data-plasmic-override={overrides.frame110}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame110)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hnzr9
                            )}
                          >
                            {"Podcast Management"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nTvN
                            )}
                          >
                            {
                              "Finding it difficult to think of content, get guests, record your podcast and editing it? We will take care of it. The BOSS Media will manage you podcast, you just have to record your podcast."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__fw9Q)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame111"}
                        data-plasmic-override={overrides.frame111}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame111)}
                      >
                        <div
                          data-plasmic-name={"frame112"}
                          data-plasmic-override={overrides.frame112}
                          className={classNames(projectcss.all, sty.frame112)}
                        >
                          <div
                            data-plasmic-name={"nounTranscripts"}
                            data-plasmic-override={overrides.nounTranscripts}
                            className={classNames(
                              projectcss.all,
                              sty.nounTranscripts
                            )}
                          >
                            <Layer5Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dhaX6
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"frame113"}
                          data-plasmic-override={overrides.frame113}
                          className={classNames(projectcss.all, sty.frame113)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f17Ai
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Transcription & Shownotes"
                              : "Transcription & Shownotes"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___46YHo
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "It seems hard to write content, our dedicated team of writers will transcribe your podcast and give you shownotes for every episode."
                              : "It seems hard to write content, our dedicated team of writers will transcribe your podcast and give you shownotes for every episode."}
                          </div>
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__k7J0B)}>
                <SectionHeading
                  className={classNames(
                    "__wab_instance",
                    sty.sectionHeading__mJbT
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__or5Qc
                    )}
                  >
                    {"Our Prominent Collabs"}
                  </div>
                </SectionHeading>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__psm0K)}
                    >
                      <div
                        data-plasmic-name={"videoBoss"}
                        data-plasmic-override={overrides.videoBoss}
                        className={classNames(projectcss.all, sty.videoBoss)}
                      >
                        <div
                          data-plasmic-name={"rectangle34"}
                          data-plasmic-override={overrides.rectangle34}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle34
                          )}
                        />
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__xYav6)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"group8"}
                        data-plasmic-override={overrides.group8}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.group8)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yxOts
                          )}
                        >
                          {"STREAMING NOW"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fEsqi
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Podcast Advertising Leads to Podcast Monetization, Learn With Us"
                            : "The Gentleman Show by The Man Company"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8C798
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "In the rapidly evolving podcast industry, podcast advertisements have become an interest to explore for brands. Podcast advertising is when a brand promotes itself on different podcasts to maximize their reach. This helps podcasters to monetize their podcast and create amazing content consistently."
                            : "'The Gentleman Show' is an ode to the modern gentleman who has broken the shackles of societal conventions and isn't afraid to be himself. He is constantly trying to unlearn, relearn and devise his understanding of becoming the modern gentleman and a better version of himself. \n\nThe podcast show will kick start conversations around what a man feels, faces, and strives to learn to polish his persona. Thus, 'The Gentleman Show' helps you accept yourself the way you are because your individuality makes you beautiful."}
                        </div>

                        <div
                          data-plasmic-name={"frame280"}
                          data-plasmic-override={overrides.frame280}
                          className={classNames(projectcss.all, sty.frame280)}
                        >
                          {false ? (
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"btn3"}
                              data-plasmic-override={overrides.btn3}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.btn3)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eztCz
                                )}
                              >
                                {"Start advertising"}
                              </div>
                            </p.Stack>
                          ) : null}

                          <p.Stack
                            as={p.PlasmicLink}
                            data-plasmic-name={"btn4"}
                            data-plasmic-override={overrides.btn4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.btn4
                            )}
                            component={Link}
                            href={
                              "https://open.spotify.com/show/0fpcio0Qo3IxXDE01uWo68?si=5d60b04e165b4567" as const
                            }
                            platform={"nextjs"}
                            target={"_blank" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eZnmE
                              )}
                            >
                              {"Listen Now on Spotify"}
                            </div>
                          </p.Stack>
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </div>
          ) : null}

          <FooterComDesk
            data-plasmic-name={"footerComDesk"}
            data-plasmic-override={overrides.footerComDesk}
            className={classNames("__wab_instance", sty.footerComDesk)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarRes",
    "production",
    "ctAs",
    "frame282",
    "btn8",
    "btn9",
    "frame85",
    "frame86",
    "frame83",
    "nounMixerPodcastProd",
    "frame84",
    "frame87",
    "frame88",
    "nounPodcastPodcastAdv",
    "frame89",
    "frame90",
    "frame91",
    "nounPodcastGuestFeature",
    "frame92",
    "frame93",
    "frame94",
    "nounCustomizeCustomService1",
    "frame95",
    "frame114",
    "frame115",
    "frame116",
    "nounFilterContentCuration",
    "frame117",
    "frame118",
    "frame119",
    "nounMicrophonePodcastRecording",
    "frame120",
    "podcastRecording",
    "frame121",
    "frame96",
    "nounSoundPodcastEditing",
    "frame97",
    "frame98",
    "frame99",
    "nounContentRepurposing21",
    "frame100",
    "frame101",
    "frame102",
    "frame103",
    "nounVideoProduction",
    "frame104",
    "frame105",
    "frame106",
    "nounDigitalMarketing",
    "frame107",
    "frame108",
    "frame109",
    "nounPodcastManagement",
    "frame110",
    "frame111",
    "frame112",
    "nounTranscripts",
    "frame113",
    "columns",
    "videoBoss",
    "rectangle34",
    "group8",
    "frame280",
    "btn3",
    "btn4",
    "footerComDesk"
  ],
  navBarRes: ["navBarRes"],
  production: [
    "production",
    "ctAs",
    "frame282",
    "btn8",
    "btn9",
    "frame85",
    "frame86",
    "frame83",
    "nounMixerPodcastProd",
    "frame84",
    "frame87",
    "frame88",
    "nounPodcastPodcastAdv",
    "frame89",
    "frame90",
    "frame91",
    "nounPodcastGuestFeature",
    "frame92",
    "frame93",
    "frame94",
    "nounCustomizeCustomService1",
    "frame95",
    "frame114",
    "frame115",
    "frame116",
    "nounFilterContentCuration",
    "frame117",
    "frame118",
    "frame119",
    "nounMicrophonePodcastRecording",
    "frame120",
    "podcastRecording",
    "frame121",
    "frame96",
    "nounSoundPodcastEditing",
    "frame97",
    "frame98",
    "frame99",
    "nounContentRepurposing21",
    "frame100",
    "frame101",
    "frame102",
    "frame103",
    "nounVideoProduction",
    "frame104",
    "frame105",
    "frame106",
    "nounDigitalMarketing",
    "frame107",
    "frame108",
    "frame109",
    "nounPodcastManagement",
    "frame110",
    "frame111",
    "frame112",
    "nounTranscripts",
    "frame113",
    "columns",
    "videoBoss",
    "rectangle34",
    "group8",
    "frame280",
    "btn3",
    "btn4"
  ],
  ctAs: ["ctAs", "frame282", "btn8", "btn9"],
  frame282: ["frame282", "btn8", "btn9"],
  btn8: ["btn8"],
  btn9: ["btn9"],
  frame85: [
    "frame85",
    "frame86",
    "frame83",
    "nounMixerPodcastProd",
    "frame84",
    "frame87",
    "frame88",
    "nounPodcastPodcastAdv",
    "frame89",
    "frame90",
    "frame91",
    "nounPodcastGuestFeature",
    "frame92",
    "frame93",
    "frame94",
    "nounCustomizeCustomService1",
    "frame95"
  ],
  frame86: ["frame86", "frame83", "nounMixerPodcastProd", "frame84"],
  frame83: ["frame83", "nounMixerPodcastProd"],
  nounMixerPodcastProd: ["nounMixerPodcastProd"],
  frame84: ["frame84"],
  frame87: ["frame87", "frame88", "nounPodcastPodcastAdv", "frame89"],
  frame88: ["frame88", "nounPodcastPodcastAdv"],
  nounPodcastPodcastAdv: ["nounPodcastPodcastAdv"],
  frame89: ["frame89"],
  frame90: ["frame90", "frame91", "nounPodcastGuestFeature", "frame92"],
  frame91: ["frame91", "nounPodcastGuestFeature"],
  nounPodcastGuestFeature: ["nounPodcastGuestFeature"],
  frame92: ["frame92"],
  frame93: ["frame93", "frame94", "nounCustomizeCustomService1", "frame95"],
  frame94: ["frame94", "nounCustomizeCustomService1"],
  nounCustomizeCustomService1: ["nounCustomizeCustomService1"],
  frame95: ["frame95"],
  frame114: [
    "frame114",
    "frame115",
    "frame116",
    "nounFilterContentCuration",
    "frame117",
    "frame118",
    "frame119",
    "nounMicrophonePodcastRecording",
    "frame120",
    "podcastRecording",
    "frame121",
    "frame96",
    "nounSoundPodcastEditing",
    "frame97",
    "frame98",
    "frame99",
    "nounContentRepurposing21",
    "frame100"
  ],
  frame115: ["frame115", "frame116", "nounFilterContentCuration", "frame117"],
  frame116: ["frame116", "nounFilterContentCuration"],
  nounFilterContentCuration: ["nounFilterContentCuration"],
  frame117: ["frame117"],
  frame118: [
    "frame118",
    "frame119",
    "nounMicrophonePodcastRecording",
    "frame120",
    "podcastRecording"
  ],
  frame119: ["frame119", "nounMicrophonePodcastRecording"],
  nounMicrophonePodcastRecording: ["nounMicrophonePodcastRecording"],
  frame120: ["frame120", "podcastRecording"],
  podcastRecording: ["podcastRecording"],
  frame121: ["frame121", "frame96", "nounSoundPodcastEditing", "frame97"],
  frame96: ["frame96", "nounSoundPodcastEditing"],
  nounSoundPodcastEditing: ["nounSoundPodcastEditing"],
  frame97: ["frame97"],
  frame98: ["frame98", "frame99", "nounContentRepurposing21", "frame100"],
  frame99: ["frame99", "nounContentRepurposing21"],
  nounContentRepurposing21: ["nounContentRepurposing21"],
  frame100: ["frame100"],
  frame101: [
    "frame101",
    "frame102",
    "frame103",
    "nounVideoProduction",
    "frame104",
    "frame105",
    "frame106",
    "nounDigitalMarketing",
    "frame107",
    "frame108",
    "frame109",
    "nounPodcastManagement",
    "frame110",
    "frame111",
    "frame112",
    "nounTranscripts",
    "frame113"
  ],
  frame102: ["frame102", "frame103", "nounVideoProduction", "frame104"],
  frame103: ["frame103", "nounVideoProduction"],
  nounVideoProduction: ["nounVideoProduction"],
  frame104: ["frame104"],
  frame105: ["frame105", "frame106", "nounDigitalMarketing", "frame107"],
  frame106: ["frame106", "nounDigitalMarketing"],
  nounDigitalMarketing: ["nounDigitalMarketing"],
  frame107: ["frame107"],
  frame108: ["frame108", "frame109", "nounPodcastManagement", "frame110"],
  frame109: ["frame109", "nounPodcastManagement"],
  nounPodcastManagement: ["nounPodcastManagement"],
  frame110: ["frame110"],
  frame111: ["frame111", "frame112", "nounTranscripts", "frame113"],
  frame112: ["frame112", "nounTranscripts"],
  nounTranscripts: ["nounTranscripts"],
  frame113: ["frame113"],
  columns: [
    "columns",
    "videoBoss",
    "rectangle34",
    "group8",
    "frame280",
    "btn3",
    "btn4"
  ],
  videoBoss: ["videoBoss", "rectangle34"],
  rectangle34: ["rectangle34"],
  group8: ["group8", "frame280", "btn3", "btn4"],
  frame280: ["frame280", "btn3", "btn4"],
  btn3: ["btn3"],
  btn4: ["btn4"],
  footerComDesk: ["footerComDesk"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarRes: typeof NavBarRes;
  production: "div";
  ctAs: "div";
  frame282: "div";
  btn8: "div";
  btn9: "a";
  frame85: "div";
  frame86: "div";
  frame83: "div";
  nounMixerPodcastProd: "div";
  frame84: "div";
  frame87: "div";
  frame88: "div";
  nounPodcastPodcastAdv: "div";
  frame89: "div";
  frame90: "div";
  frame91: "div";
  nounPodcastGuestFeature: "div";
  frame92: "div";
  frame93: "div";
  frame94: "div";
  nounCustomizeCustomService1: "div";
  frame95: "div";
  frame114: "div";
  frame115: "div";
  frame116: "div";
  nounFilterContentCuration: "div";
  frame117: "div";
  frame118: "div";
  frame119: "div";
  nounMicrophonePodcastRecording: "div";
  frame120: "div";
  podcastRecording: "div";
  frame121: "div";
  frame96: "div";
  nounSoundPodcastEditing: "div";
  frame97: "div";
  frame98: "div";
  frame99: "div";
  nounContentRepurposing21: "div";
  frame100: "div";
  frame101: "div";
  frame102: "div";
  frame103: "div";
  nounVideoProduction: "div";
  frame104: "div";
  frame105: "div";
  frame106: "div";
  nounDigitalMarketing: "div";
  frame107: "div";
  frame108: "div";
  frame109: "div";
  nounPodcastManagement: "div";
  frame110: "div";
  frame111: "div";
  frame112: "div";
  nounTranscripts: "div";
  frame113: "div";
  columns: "div";
  videoBoss: "div";
  rectangle34: "div";
  group8: "div";
  frame280: "div";
  btn3: "div";
  btn4: "a";
  footerComDesk: typeof FooterComDesk;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduction__VariantsArgs;
    args?: PlasmicProduction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProduction__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProduction__ArgProps,
      internalVariantPropNames: PlasmicProduction__VariantProps
    });

    return PlasmicProduction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduction";
  } else {
    func.displayName = `PlasmicProduction.${nodeName}`;
  }
  return func;
}

export const PlasmicProduction = Object.assign(
  // Top-level PlasmicProduction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarRes: makeNodeComponent("navBarRes"),
    production: makeNodeComponent("production"),
    ctAs: makeNodeComponent("ctAs"),
    frame282: makeNodeComponent("frame282"),
    btn8: makeNodeComponent("btn8"),
    btn9: makeNodeComponent("btn9"),
    frame85: makeNodeComponent("frame85"),
    frame86: makeNodeComponent("frame86"),
    frame83: makeNodeComponent("frame83"),
    nounMixerPodcastProd: makeNodeComponent("nounMixerPodcastProd"),
    frame84: makeNodeComponent("frame84"),
    frame87: makeNodeComponent("frame87"),
    frame88: makeNodeComponent("frame88"),
    nounPodcastPodcastAdv: makeNodeComponent("nounPodcastPodcastAdv"),
    frame89: makeNodeComponent("frame89"),
    frame90: makeNodeComponent("frame90"),
    frame91: makeNodeComponent("frame91"),
    nounPodcastGuestFeature: makeNodeComponent("nounPodcastGuestFeature"),
    frame92: makeNodeComponent("frame92"),
    frame93: makeNodeComponent("frame93"),
    frame94: makeNodeComponent("frame94"),
    nounCustomizeCustomService1: makeNodeComponent(
      "nounCustomizeCustomService1"
    ),
    frame95: makeNodeComponent("frame95"),
    frame114: makeNodeComponent("frame114"),
    frame115: makeNodeComponent("frame115"),
    frame116: makeNodeComponent("frame116"),
    nounFilterContentCuration: makeNodeComponent("nounFilterContentCuration"),
    frame117: makeNodeComponent("frame117"),
    frame118: makeNodeComponent("frame118"),
    frame119: makeNodeComponent("frame119"),
    nounMicrophonePodcastRecording: makeNodeComponent(
      "nounMicrophonePodcastRecording"
    ),
    frame120: makeNodeComponent("frame120"),
    podcastRecording: makeNodeComponent("podcastRecording"),
    frame121: makeNodeComponent("frame121"),
    frame96: makeNodeComponent("frame96"),
    nounSoundPodcastEditing: makeNodeComponent("nounSoundPodcastEditing"),
    frame97: makeNodeComponent("frame97"),
    frame98: makeNodeComponent("frame98"),
    frame99: makeNodeComponent("frame99"),
    nounContentRepurposing21: makeNodeComponent("nounContentRepurposing21"),
    frame100: makeNodeComponent("frame100"),
    frame101: makeNodeComponent("frame101"),
    frame102: makeNodeComponent("frame102"),
    frame103: makeNodeComponent("frame103"),
    nounVideoProduction: makeNodeComponent("nounVideoProduction"),
    frame104: makeNodeComponent("frame104"),
    frame105: makeNodeComponent("frame105"),
    frame106: makeNodeComponent("frame106"),
    nounDigitalMarketing: makeNodeComponent("nounDigitalMarketing"),
    frame107: makeNodeComponent("frame107"),
    frame108: makeNodeComponent("frame108"),
    frame109: makeNodeComponent("frame109"),
    nounPodcastManagement: makeNodeComponent("nounPodcastManagement"),
    frame110: makeNodeComponent("frame110"),
    frame111: makeNodeComponent("frame111"),
    frame112: makeNodeComponent("frame112"),
    nounTranscripts: makeNodeComponent("nounTranscripts"),
    frame113: makeNodeComponent("frame113"),
    columns: makeNodeComponent("columns"),
    videoBoss: makeNodeComponent("videoBoss"),
    rectangle34: makeNodeComponent("rectangle34"),
    group8: makeNodeComponent("group8"),
    frame280: makeNodeComponent("frame280"),
    btn3: makeNodeComponent("btn3"),
    btn4: makeNodeComponent("btn4"),
    footerComDesk: makeNodeComponent("footerComDesk"),

    // Metadata about props expected for PlasmicProduction
    internalVariantProps: PlasmicProduction__VariantProps,
    internalArgProps: PlasmicProduction__ArgProps
  }
);

export default PlasmicProduction;
/* prettier-ignore-end */
