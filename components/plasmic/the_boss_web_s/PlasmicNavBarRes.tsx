// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: hi-mET-ngC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent

import { useScreenVariants as useScreenVariantsjp7EaCu1Pi8YJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jp7eaCu1Pi8yJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicNavBarRes.module.css"; // plasmic-import: hi-mET-ngC/css

export type PlasmicNavBarRes__VariantMembers = {};

export type PlasmicNavBarRes__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavBarRes__VariantsArgs;
export const PlasmicNavBarRes__VariantProps = new Array<VariantPropType>();

export type PlasmicNavBarRes__ArgsType = {};
type ArgPropType = keyof PlasmicNavBarRes__ArgsType;
export const PlasmicNavBarRes__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBarRes__OverridesType = {
  root?: p.Flex<typeof NavigationBar>;
  btnCtaPrimary?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavBarResProps {
  className?: string;
}

export const defaultNavBarRes__Args: Partial<PlasmicNavBarRes__ArgsType> = {};

function PlasmicNavBarRes__RenderFunc(props: {
  variants: PlasmicNavBarRes__VariantsArgs;
  args: PlasmicNavBarRes__ArgsType;
  overrides: PlasmicNavBarRes__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavBarRes__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjp7EaCu1Pi8YJ()
  });

  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <p.Stack
          as={p.PlasmicLink}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.link__ytIgF)}
          component={Link}
          href={"/" as const}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__xnat0)}
            displayHeight={"3.5em" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            id={"top-of-page" as const}
            src={{
              src: "/plasmic/the_boss_web_s/images/theBossLogoPngYellow1.png",
              fullWidth: 595,
              fullHeight: 595,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__j0TT
            )}
          >
            {"The Balls Of Steel Show"}
          </div>
        </p.Stack>
      }
      className={classNames("__wab_instance", sty.root)}
      closeButton={
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__kCfhe)}
          displayHeight={"3em" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"none" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"3em" as const}
          src={{
            src: "/plasmic/the_boss_web_s/images/closepng.png",
            fullWidth: 512,
            fullHeight: 512,
            aspectRatio: undefined
          }}
        />
      }
      forceOpenMenu={
        hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      }
      itemsGap={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? (24 as const)
          : (16 as const)
      }
      menuItems={
        <React.Fragment>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__stvmZ
            )}
            component={Link}
            href={"/guests" as const}
            platform={"nextjs"}
          >
            {"Guests"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__trNq
            )}
            component={Link}
            href={"/advertisers" as const}
            platform={"nextjs"}
          >
            {"For Advertisers"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__rPdms
            )}
            component={Link}
            href={"/podcasters" as const}
            platform={"nextjs"}
          >
            {"For Podcasters"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___1Seti
            )}
            component={Link}
            href={"/production" as const}
            platform={"nextjs"}
          >
            {"Production"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___7Tn3O
            )}
            component={Link}
            href={"/contact" as const}
            platform={"nextjs"}
          >
            {"Contact"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__lJmX
            )}
            component={Link}
            href={"contenthouse.ballsofsteelshow.com" as const}
            platform={"nextjs"}
          >
            {"Content House"}
          </p.PlasmicLink>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"btnCtaPrimary"}
            data-plasmic-override={overrides.btnCtaPrimary}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.btnCtaPrimary
            )}
            component={Link}
            href={"/podcast" as const}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___48VK
              )}
            >
              {"Go to Podcast"}
            </div>
          </p.Stack>
        </React.Fragment>
      }
      openButton={
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__kt3Eg)}
          displayHeight={"3em" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"none" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"3em" as const}
          src={{
            src: "/plasmic/the_boss_web_s/images/menupng.png",
            fullWidth: 512,
            fullHeight: 512,
            aspectRatio: undefined
          }}
        />
      }
      responsiveBreakpoint={880 as const}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "btnCtaPrimary"],
  btnCtaPrimary: ["btnCtaPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  btnCtaPrimary: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBarRes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBarRes__VariantsArgs;
    args?: PlasmicNavBarRes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBarRes__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBarRes__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBarRes__ArgProps,
      internalVariantPropNames: PlasmicNavBarRes__VariantProps
    });

    return PlasmicNavBarRes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBarRes";
  } else {
    func.displayName = `PlasmicNavBarRes.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBarRes = Object.assign(
  // Top-level PlasmicNavBarRes renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    btnCtaPrimary: makeNodeComponent("btnCtaPrimary"),

    // Metadata about props expected for PlasmicNavBarRes
    internalVariantProps: PlasmicNavBarRes__VariantProps,
    internalArgProps: PlasmicNavBarRes__ArgProps
  }
);

export default PlasmicNavBarRes;
/* prettier-ignore-end */
