// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sx3ERcdAG6itf9PoNvoQTY
// Component: 6I24HxHuiGC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_boss_web_s.module.css"; // plasmic-import: sx3ERcdAG6itf9PoNvoQTY/projectcss
import sty from "./PlasmicShowcase5Slots.module.css"; // plasmic-import: 6I24HxHuiGC/css

export type PlasmicShowcase5Slots__VariantMembers = {};

export type PlasmicShowcase5Slots__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowcase5Slots__VariantsArgs;
export const PlasmicShowcase5Slots__VariantProps = new Array<VariantPropType>();

export type PlasmicShowcase5Slots__ArgsType = {};
type ArgPropType = keyof PlasmicShowcase5Slots__ArgsType;
export const PlasmicShowcase5Slots__ArgProps = new Array<ArgPropType>();

export type PlasmicShowcase5Slots__OverridesType = {
  root?: p.Flex<"div">;
  frame98?: p.Flex<"div">;
  rectangle15?: p.Flex<"div">;
  frame99?: p.Flex<"div">;
  frame114?: p.Flex<"div">;
  frame115?: p.Flex<"div">;
  frame100?: p.Flex<"div">;
  rectangle16?: p.Flex<"div">;
  frame101?: p.Flex<"div">;
  frame116?: p.Flex<"div">;
  frame121?: p.Flex<"div">;
  frame102?: p.Flex<"div">;
  rectangle17?: p.Flex<"div">;
  frame103?: p.Flex<"div">;
  frame127?: p.Flex<"div">;
  frame128?: p.Flex<"div">;
  frame104?: p.Flex<"div">;
  rectangle18?: p.Flex<"div">;
  frame105?: p.Flex<"div">;
  frame129?: p.Flex<"div">;
  frame130?: p.Flex<"div">;
  frame106?: p.Flex<"div">;
  rectangle19?: p.Flex<"div">;
  frame107?: p.Flex<"div">;
  frame131?: p.Flex<"div">;
  frame132?: p.Flex<"div">;
};

export interface DefaultShowcase5SlotsProps {
  className?: string;
}

export const defaultShowcase5Slots__Args: Partial<PlasmicShowcase5Slots__ArgsType> =
  {};

function PlasmicShowcase5Slots__RenderFunc(props: {
  variants: PlasmicShowcase5Slots__VariantsArgs;
  args: PlasmicShowcase5Slots__ArgsType;
  overrides: PlasmicShowcase5Slots__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultShowcase5Slots__Args, props.args);
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.column__qzFhs)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame98"}
          data-plasmic-override={overrides.frame98}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame98)}
        >
          <div
            data-plasmic-name={"rectangle15"}
            data-plasmic-override={overrides.rectangle15}
            className={classNames(projectcss.all, sty.rectangle15)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame99"}
            data-plasmic-override={overrides.frame99}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame99)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame114"}
              data-plasmic-override={overrides.frame114}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame114)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Z67D
                )}
              >
                {"Amrtia Sukumar"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame115"}
              data-plasmic-override={overrides.frame115}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame115)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vobcz
                )}
              >
                {"The Unsettling Podcast"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cq2W8
                )}
              >
                {
                  "UNSETTLING is a podcast that brings forth the stories of people who are following their passion and creating a niche for themselves in society."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>

      <div className={classNames(projectcss.all, sty.column__eLQw2)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame100"}
          data-plasmic-override={overrides.frame100}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame100)}
        >
          <div
            data-plasmic-name={"rectangle16"}
            data-plasmic-override={overrides.rectangle16}
            className={classNames(projectcss.all, sty.rectangle16)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame101"}
            data-plasmic-override={overrides.frame101}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame101)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame116"}
              data-plasmic-override={overrides.frame116}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame116)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pDa9K
                )}
              >
                {"Anurag Sharma"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame121"}
              data-plasmic-override={overrides.frame121}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame121)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yMeDw
                )}
              >
                {"The Socially Desi Show"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lo5Df
                )}
              >
                {
                  "You're listening to The Socially Desi show, a podcast that motivates you to LIVE CREATE and INSPIRE."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>

      <div className={classNames(projectcss.all, sty.column___7WTcx)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame102"}
          data-plasmic-override={overrides.frame102}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame102)}
        >
          <div
            data-plasmic-name={"rectangle17"}
            data-plasmic-override={overrides.rectangle17}
            className={classNames(projectcss.all, sty.rectangle17)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame103"}
            data-plasmic-override={overrides.frame103}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame103)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame127"}
              data-plasmic-override={overrides.frame127}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame127)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___95Tz8
                )}
              >
                {"Maitri Verma"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame128"}
              data-plasmic-override={overrides.frame128}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame128)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___19MDl
                )}
              >
                {"Little Fixes Podcast"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nwEj5
                )}
              >
                {
                  "Maitri talks to experts from various fields and together they share simple practical ideas to add value to your life."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>

      <div className={classNames(projectcss.all, sty.column__xJaP)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame104"}
          data-plasmic-override={overrides.frame104}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame104)}
        >
          <div
            data-plasmic-name={"rectangle18"}
            data-plasmic-override={overrides.rectangle18}
            className={classNames(projectcss.all, sty.rectangle18)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame105"}
            data-plasmic-override={overrides.frame105}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame105)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame129"}
              data-plasmic-override={overrides.frame129}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame129)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cxTu
                )}
              >
                {"Shubham Agarwal"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame130"}
              data-plasmic-override={overrides.frame130}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame130)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4FjlA
                )}
              >
                {"Secrets of Story Tellers"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ot4Ds
                )}
              >
                {
                  "A Podcast that interviews authors and writers from the world of business, literature & more."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>

      <div className={classNames(projectcss.all, sty.column__xmTx4)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame106"}
          data-plasmic-override={overrides.frame106}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame106)}
        >
          <div
            data-plasmic-name={"rectangle19"}
            data-plasmic-override={overrides.rectangle19}
            className={classNames(projectcss.all, sty.rectangle19)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame107"}
            data-plasmic-override={overrides.frame107}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame107)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame131"}
              data-plasmic-override={overrides.frame131}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame131)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y7SUz
                )}
              >
                {"Dilip Kumar/ Puja Darshan"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame132"}
              data-plasmic-override={overrides.frame132}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame132)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qFyxz
                )}
              >
                {"The Tastes of India"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gUa4Y
                )}
              >
                {
                  "The Tastes of India is a Weekly Bilingual, (primarily Hindi) Indian recipe food podcast and Cookery Show on Tasty Indian Recipes."
                }
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame98",
    "rectangle15",
    "frame99",
    "frame114",
    "frame115",
    "frame100",
    "rectangle16",
    "frame101",
    "frame116",
    "frame121",
    "frame102",
    "rectangle17",
    "frame103",
    "frame127",
    "frame128",
    "frame104",
    "rectangle18",
    "frame105",
    "frame129",
    "frame130",
    "frame106",
    "rectangle19",
    "frame107",
    "frame131",
    "frame132"
  ],
  frame98: ["frame98", "rectangle15", "frame99", "frame114", "frame115"],
  rectangle15: ["rectangle15"],
  frame99: ["frame99", "frame114", "frame115"],
  frame114: ["frame114"],
  frame115: ["frame115"],
  frame100: ["frame100", "rectangle16", "frame101", "frame116", "frame121"],
  rectangle16: ["rectangle16"],
  frame101: ["frame101", "frame116", "frame121"],
  frame116: ["frame116"],
  frame121: ["frame121"],
  frame102: ["frame102", "rectangle17", "frame103", "frame127", "frame128"],
  rectangle17: ["rectangle17"],
  frame103: ["frame103", "frame127", "frame128"],
  frame127: ["frame127"],
  frame128: ["frame128"],
  frame104: ["frame104", "rectangle18", "frame105", "frame129", "frame130"],
  rectangle18: ["rectangle18"],
  frame105: ["frame105", "frame129", "frame130"],
  frame129: ["frame129"],
  frame130: ["frame130"],
  frame106: ["frame106", "rectangle19", "frame107", "frame131", "frame132"],
  rectangle19: ["rectangle19"],
  frame107: ["frame107", "frame131", "frame132"],
  frame131: ["frame131"],
  frame132: ["frame132"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame98: "div";
  rectangle15: "div";
  frame99: "div";
  frame114: "div";
  frame115: "div";
  frame100: "div";
  rectangle16: "div";
  frame101: "div";
  frame116: "div";
  frame121: "div";
  frame102: "div";
  rectangle17: "div";
  frame103: "div";
  frame127: "div";
  frame128: "div";
  frame104: "div";
  rectangle18: "div";
  frame105: "div";
  frame129: "div";
  frame130: "div";
  frame106: "div";
  rectangle19: "div";
  frame107: "div";
  frame131: "div";
  frame132: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowcase5Slots__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowcase5Slots__VariantsArgs;
    args?: PlasmicShowcase5Slots__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowcase5Slots__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShowcase5Slots__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShowcase5Slots__ArgProps,
      internalVariantPropNames: PlasmicShowcase5Slots__VariantProps
    });

    return PlasmicShowcase5Slots__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowcase5Slots";
  } else {
    func.displayName = `PlasmicShowcase5Slots.${nodeName}`;
  }
  return func;
}

export const PlasmicShowcase5Slots = Object.assign(
  // Top-level PlasmicShowcase5Slots renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame98: makeNodeComponent("frame98"),
    rectangle15: makeNodeComponent("rectangle15"),
    frame99: makeNodeComponent("frame99"),
    frame114: makeNodeComponent("frame114"),
    frame115: makeNodeComponent("frame115"),
    frame100: makeNodeComponent("frame100"),
    rectangle16: makeNodeComponent("rectangle16"),
    frame101: makeNodeComponent("frame101"),
    frame116: makeNodeComponent("frame116"),
    frame121: makeNodeComponent("frame121"),
    frame102: makeNodeComponent("frame102"),
    rectangle17: makeNodeComponent("rectangle17"),
    frame103: makeNodeComponent("frame103"),
    frame127: makeNodeComponent("frame127"),
    frame128: makeNodeComponent("frame128"),
    frame104: makeNodeComponent("frame104"),
    rectangle18: makeNodeComponent("rectangle18"),
    frame105: makeNodeComponent("frame105"),
    frame129: makeNodeComponent("frame129"),
    frame130: makeNodeComponent("frame130"),
    frame106: makeNodeComponent("frame106"),
    rectangle19: makeNodeComponent("rectangle19"),
    frame107: makeNodeComponent("frame107"),
    frame131: makeNodeComponent("frame131"),
    frame132: makeNodeComponent("frame132"),

    // Metadata about props expected for PlasmicShowcase5Slots
    internalVariantProps: PlasmicShowcase5Slots__VariantProps,
    internalArgProps: PlasmicShowcase5Slots__ArgProps
  }
);

export default PlasmicShowcase5Slots;
/* prettier-ignore-end */
